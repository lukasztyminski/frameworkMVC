/*!
 * frameworkmvc
 * Fiercely quick and opinionated front-ends
 * https://github.com/lukasztyminski/OssomForms
 * @author Łukasz Tymiński
 * @version 1.0.0
 * Copyright 2018. MIT licensed.
 */
.clear:after,.clear:before{content:" ";display:table}.clear{*zoom:1}.clear:after{clear:both}*{box-sizing:border-box;font-smoothing:antialiased;text-rendering:optimizeLegibility}*,:active,:focus,:hover{outline:none}html{font-size:62.5%;background:radial-gradient(ellipse at center,#f7f6f0 0,#c2ba8c 80%,#b0a66b 100%)}body{font:300 16px Lato,sans-serif;color:#444;transition:all .4s ease-in .3s}body::-webkit-scrollbar{width:5px!important}body::-webkit-scrollbar-track{background:#fff}body::-webkit-scrollbar-thumb{background-color:rgba(31,31,31,.5)}body::-webkit-scrollbar-thumb:hover{background-color:#1f1f1f}body,html{min-height:100vh;overflow-x:hidden;display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-align:center;align-items:center;justify-center:center}.preloader{position:fixed;top:0;bottom:0;left:0;right:0;z-index:1;background:#fff;width:100%;height:100%;background:radial-gradient(ellipse at center,#f7f6f0 0,#c2ba8c 80%,#b0a66b 100%)}.img-responsive{max-width:100%;height:100%;display:block}.hidden{position:absolute;clip:rect(0 0 0 0);*clip:rect(0 0 0 0)}.main-wrapper{max-width:1150px;margin:0 auto;width:calc(100% - 20px)}

/*! normalize.css v4.1.1 | MIT License | github.com/necolas/normalize.css */html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block}audio:not([controls]){display:none;height:0}progress{vertical-align:baseline}[hidden],template{display:none}a{background-color:transparent;-webkit-text-decoration-skip:objects}a:active,a:hover{outline-width:0}abbr[title]{border-bottom:none;text-decoration:underline;text-decoration:underline dotted}b,strong{font-weight:inherit;font-weight:bolder}dfn{font-style:italic}h1{font-size:2em;margin:.67em 0}mark{background-color:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}img{border-style:none}svg:not(:root){overflow:hidden}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}figure{margin:1em 40px}hr{box-sizing:content-box;height:0;overflow:visible}button,input,select,textarea{font:inherit;margin:0}optgroup{font-weight:700}button,input{overflow:visible}button,select{text-transform:none}[type=reset],[type=submit],button,html [type=button]{-webkit-appearance:button}[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner,button::-moz-focus-inner{border-style:none;padding:0}[type=button]:-moz-focusring,[type=reset]:-moz-focusring,[type=submit]:-moz-focusring,button:-moz-focusring{outline:1px dotted ButtonText}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal}textarea{overflow:auto}[type=checkbox],[type=radio]{box-sizing:border-box;padding:0}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}[type=search]::-webkit-search-cancel-button,[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-input-placeholder{color:inherit;opacity:.54}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}.header{position:fixed;top:0;bottom:0;left:0;right:0;z-index:1;width:100%;height:70px;background:#fff;box-shadow:1px 1px 10px;text-transform:uppercase}@media only screen and (min-width:1024px){.header{-ms-flex-direction:row;flex-direction:row}}@media only screen and (min-width:1024px){.header,.header__bar{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center}.header__bar{-ms-flex-pack:distribute;justify-content:space-around;width:100%;height:100%}}.header__logo{left:0;padding:2rem;position:absolute;top:50%;transform:translateY(-50%)}@media only screen and (min-width:1024px){.header__logo{display:-ms-flexbox;display:flex;-ms-flex-pack:start;justify-content:flex-start;-ms-flex-align:center;align-items:center;position:relative;width:60%;top:0;transform:none}}.header__logo .header__logo--title{display:none}@media only screen and (min-width:1024px){.header__logo .header__logo--title{display:block;margin-right:1rem}}.header__logo .header__logo--title .header__logo--case{font-weight:300;color:#ccc59e}.header__menuTrigger{display:inline-block;padding:2rem;right:0;transition:all .4s ease-in-out;position:absolute;top:50%;transform:translateY(-50%)}@media only screen and (min-width:1024px){.header__menuTrigger{display:none}}.header__menuTrigger .header__menuTrigger--line{background:#727271;display:block;width:30px;height:2px;border-radius:10px;margin-bottom:7px;transition:all .4s ease-in-out}.header__menu{position:absolute;width:100%;display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;background:#fff;left:0;top:70px;transform:translate3d(-100%,0,0);right:0;transition:transform .4s ease-in-out,opacity .4s ease-in-out .3s,padding .4s ease-in-out 1s;padding:3rem 0 2rem}@media only screen and (min-width:1024px){.header__menu{transform:translateZ(0);position:relative;background:none;-ms-flex-direction:row;flex-direction:row;width:100%;-ms-flex-pack:end;justify-content:flex-end;top:0}}.header__menu .header__nav{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center}@media only screen and (min-width:1024px){.header__menu .header__nav{-ms-flex-direction:row;flex-direction:row}}.header__menu .header__nav .header__nav--link{color:#000;text-decoration:none;font-size:2rem;padding-bottom:.5rem;margin:.5rem 0;position:relative}@media only screen and (min-width:1024px){.header__menu .header__nav .header__nav--link{font-size:1.4rem;margin:0 2rem}}.header__menu .header__nav .header__nav--link:after{content:"";position:absolute;display:block;bottom:0;right:0;left:0;height:1px;background:#000;transition:transform .3s cubic-bezier(1,0,0,1);transform-origin:0 0;transform:scaleX(0)}.header__menu .header__nav .header__nav--link:hover:after{transform:scaleX(1);height:1.5px}.header__menu .header__nav .header__nav--link.header__nav--active{font-weight:700}.header__switch:checked+.header__bar .header__menuTrigger--line{background:#ccc;position:relative;margin-bottom:10px}.header__switch:checked+.header__bar .header__menuTrigger--line:first-child{transform:rotate(45deg);top:15px}.header__switch:checked+.header__bar .header__menuTrigger--line:nth-child(2){width:0;opacity:0}.header__switch:checked+.header__bar .header__menuTrigger--line:nth-child(3){transform:rotate(-45deg);top:-9px}.header__switch:checked+.header__bar .header__menu{transform:translateZ(0);box-shadow:1px 8px 15px #ccc}.main{margin-top:7rem}.form{padding:4rem 0}.form__content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;text-align:center}.form__content .form__content--title{font-size:2.5rem;color:#fff;text-transform:uppercase;text-shadow:1px 1px 1px #000}@media only screen and (min-width:768px){.form__content .form__content--title{font-size:3.5rem}}@media only screen and (min-width:1200px){.form__contentForm .main-wrapper{display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-ms-flex-pack:center;justify-content:center;-ms-flex-align:baseline;align-items:baseline}}.form__contentForm label{display:block;margin:1rem 0;font-size:2rem;font-weight:700}.form__contentForm input,.form__contentForm select{width:100%;max-width:250px;padding:1rem 0;text-indent:2rem;background:none;border:none;display:inline-block;border-bottom:1px solid #000;transition:all .4s ease-in-out}.form__contentForm input:active,.form__contentForm input:focus,.form__contentForm input:hover,.form__contentForm select:active,.form__contentForm select:focus,.form__contentForm select:hover{max-width:300px}@media only screen and (min-width:460px){.form__contentForm input:active,.form__contentForm input:focus,.form__contentForm input:hover,.form__contentForm select:active,.form__contentForm select:focus,.form__contentForm select:hover{max-width:75%}}.form__contentForm input:placeholder,.form__contentForm select:placeholder{transition:all .4s ease-in-out;text-align:center}@media only screen and (min-width:460px){.form__contentForm input,.form__contentForm select{max-width:300px}}.form__contentFormElement{margin:5rem 0;position:relative}@media only screen and (min-width:768px){.form__contentFormElement{display:-ms-flexbox;display:flex;-ms-flex-pack:distribute;justify-content:space-around;-ms-flex-align:center;align-items:center}}@media only screen and (min-width:1200px){.form__contentFormElement{-ms-flex:1 0 50%;flex:1 0 50%}}.form__contentFormElement.error{transition:all .4s ease-in-out}.form__contentFormElement.error input,.form__contentFormElement.error select{transition:all .4s ease-in-out;border:1px solid red}.form__contentFormCheckbox{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;padding:2rem;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;position:relative}.form__contentFormCheckbox.error{transition:all .4s ease-in-out}.form__contentFormCheckbox.error span{transition:all .4s ease-in-out;border-bottom:1px solid red;padding-bottom:2px}@media only screen and (min-width:768px){.form__contentFormCheckbox{-ms-flex-direction:row;flex-direction:row;-ms-flex-wrap:wrap;flex-wrap:wrap;padding-top:0}}@media only screen and (min-width:1200px){.form__contentFormCheckbox{-ms-flex:1 0 50%;flex:1 0 50%}}.form__contentFormCheckbox input{display:block;height:20px;border-radius:0;margin:2rem 0}@media only screen and (min-width:768px){.form__contentFormCheckbox input{margin:0;-ms-flex:0 0 10%;flex:0 0 10%}}.form__contentFormCheckbox .form__contentFormElement--msgError{bottom:60px}@media only screen and (min-width:768px){.form__contentFormCheckbox .form__contentFormElement--msgError{bottom:0}}.form__contentFormElement--msgError{position:absolute;display:block;color:red;text-align:center;width:100%;transition:all .4s ease-in-out;bottom:-30px}.form__contentFormElement--msgError.hiddenOn{visibility:hidden;opacity:0}.form__contentForm--send{padding:1rem 5rem;background:none;border:2px solid #fff;background:rgba(57,64,71,.709804);font-size:2rem;text-transform:uppercase;font-weight:700;color:#fff;transition:all .4s ease-in-out;cursor:pointer}.form__contentForm--send:active,.form__contentForm--send:focus,.form__contentForm--send:hover{border-color:#fff;background:#fff;color:rgba(57,64,71,.709804)}@media only screen and (min-width:768px){.form__contentForm--send{margin:3rem 0}}.listUser{padding:4rem 0}.flistUser__table{border-collapse:collapse;border-spacing:0;width:100%;border:1px solid #ddd}.flistUser__table th{background-color:#fff;padding:4px;font-size:1rem;width:52px}@media only screen and (min-width:768px){.flistUser__table th{width:150px;font-size:2rem}}.flistUser__table td,.flistUser__table th{text-align:left}@media only screen and (min-width:460px){.flistUser__table td,.flistUser__table th{padding:14px}}.footer{display:-ms-flexbox;display:flex;width:100vw;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;-ms-flex-direction:column;flex-direction:column;background:rgba(57,64,71,.709804);padding:2rem 0;color:#fff;font-weight:700;text-align:center}.footer .footer__copyrightAddress--mail{text-decoration:none;color:#dad5b8}@media only screen and (min-width:768px){.footer .footer__copyright{display:-ms-flexbox;display:flex;-ms-flex-pack:justify;justify-content:space-between;-ms-flex-align:center;align-items:center;text-align:left;padding:0 4rem}}.listUser .footer{position:absolute;bottom:0;left:0;right:0}::selection{background:#333;color:#fff;text-shadow:none}::-moz-selection{background:#333;color:#fff;text-shadow:none}::-webkit-selection{background:#333;color:#fff;text-shadow:none}@media print{*{background:transparent!important;color:#000!important;box-shadow:none!important;text-shadow:none!important}a,a:visited{text-decoration:underline}a[href]:after{content:" (" attr(href) ")"}abbr[title]:after{content:" (" attr(title) ")"}.ir a:after,a[href^="#"]:after,a[href^="javascript:"]:after{content:""}blockquote,pre{border:1px solid #999;page-break-inside:avoid}thead{display:table-header-group}img,tr{page-break-inside:avoid}img{max-width:100%!important}@page{margin:.5cm}h2,h3,p{orphans:3;widows:3}h2,h3{page-break-after:avoid}}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */

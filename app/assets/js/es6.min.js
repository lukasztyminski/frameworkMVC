/*!
 * frameworkmvc
 * Fiercely quick and opinionated front-ends
 * https://github.com/lukasztyminski/OssomForms
 * @author Łukasz Tymiński
 * @version 1.0.0
 * Copyright 2018. MIT licensed.
 */
!function e(t,n,r){function i(a,u){if(!n[a]){if(!t[a]){var s="function"==typeof require&&require;if(!u&&s)return s(a,!0);if(o)return o(a,!0);throw new Error("Cannot find module '"+a+"'")}var f=n[a]={exports:{}};t[a][0].call(f.exports,function(e){var n=t[a][1][e];return i(n?n:e)},f,f.exports,e,t,n,r)}return n[a].exports}for(var o="function"==typeof require&&require,a=0;a<r.length;a++)i(r[a]);return i}({1:[function(e,t,n){(function(e,t,r,i,o,a,u,s,f){var l="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";!function(e){"use strict";function t(e){var t=e.charCodeAt(0);return t===o||t===c?62:t===a||t===h?63:t<u?-1:t<u+10?t-u+26+26:t<f+26?t-f:t<s+26?t-s+26:void 0}function n(e){function n(e){f[c++]=e}var r,o,a,u,s,f;if(e.length%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var l=e.length;s="="===e.charAt(l-2)?2:"="===e.charAt(l-1)?1:0,f=new i(3*e.length/4-s),a=s>0?e.length-4:e.length;var c=0;for(r=0,o=0;r<a;r+=4,o+=3)u=t(e.charAt(r))<<18|t(e.charAt(r+1))<<12|t(e.charAt(r+2))<<6|t(e.charAt(r+3)),n((16711680&u)>>16),n((65280&u)>>8),n(255&u);return 2===s?(u=t(e.charAt(r))<<2|t(e.charAt(r+1))>>4,n(255&u)):1===s&&(u=t(e.charAt(r))<<10|t(e.charAt(r+1))<<4|t(e.charAt(r+2))>>2,n(u>>8&255),n(255&u)),f}function r(e){function t(e){return l.charAt(e)}function n(e){return t(e>>18&63)+t(e>>12&63)+t(e>>6&63)+t(63&e)}var r,i,o,a=e.length%3,u="";for(r=0,o=e.length-a;r<o;r+=3)i=(e[r]<<16)+(e[r+1]<<8)+e[r+2],u+=n(i);switch(a){case 1:i=e[e.length-1],u+=t(i>>2),u+=t(i<<4&63),u+="==";break;case 2:i=(e[e.length-2]<<8)+e[e.length-1],u+=t(i>>10),u+=t(i>>4&63),u+=t(i<<2&63),u+="="}return u}var i="undefined"!=typeof Uint8Array?Uint8Array:Array,o="+".charCodeAt(0),a="/".charCodeAt(0),u="0".charCodeAt(0),s="a".charCodeAt(0),f="A".charCodeAt(0),c="-".charCodeAt(0),h="_".charCodeAt(0);e.toByteArray=n,e.fromByteArray=r}("undefined"==typeof n?this.base64js={}:n)}).call(this,e("e/U+97"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\..\\node_modules\\base64-js\\lib\\b64.js","/..\\..\\node_modules\\base64-js\\lib")},{buffer:2,"e/U+97":4}],2:[function(e,t,n){(function(t,r,i,o,a,u,s,f,l){function i(e,t,n){if(!(this instanceof i))return new i(e,t,n);var r=typeof e;if("base64"===t&&"string"===r)for(e=x(e);e.length%4!==0;)e+="=";var o;if("number"===r)o=O(e);else if("string"===r)o=i.byteLength(e,t);else{if("object"!==r)throw new Error("First argument needs to be a number, array or string.");o=O(e.length)}var a;i._useTypedArrays?a=i._augment(new Uint8Array(o)):(a=this,a.length=o,a._isBuffer=!0);var u;if(i._useTypedArrays&&"number"==typeof e.byteLength)a._set(e);else if(P(e))for(u=0;u<o;u++)i.isBuffer(e)?a[u]=e.readUInt8(u):a[u]=e[u];else if("string"===r)a.write(e,0,t);else if("number"===r&&!i._useTypedArrays&&!n)for(u=0;u<o;u++)a[u]=0;return a}function c(e,t,n,r){n=Number(n)||0;var o=e.length-n;r?(r=Number(r),r>o&&(r=o)):r=o;var a=t.length;Q(a%2===0,"Invalid hex string"),r>a/2&&(r=a/2);for(var u=0;u<r;u++){var s=parseInt(t.substr(2*u,2),16);Q(!isNaN(s),"Invalid hex string"),e[n+u]=s}return i._charsWritten=2*u,u}function h(e,t,n,r){var o=i._charsWritten=Y(W(t),e,n,r);return o}function d(e,t,n,r){var o=i._charsWritten=Y(J(t),e,n,r);return o}function g(e,t,n,r){return d(e,t,n,r)}function p(e,t,n,r){var o=i._charsWritten=Y(X(t),e,n,r);return o}function y(e,t,n,r){var o=i._charsWritten=Y(R(t),e,n,r);return o}function b(e,t,n){return 0===t&&n===e.length?V.fromByteArray(e):V.fromByteArray(e.slice(t,n))}function w(e,t,n){var r="",i="";n=Math.min(e.length,n);for(var o=t;o<n;o++)e[o]<=127?(r+=z(i)+String.fromCharCode(e[o]),i=""):i+="%"+e[o].toString(16);return r+z(i)}function v(e,t,n){var r="";n=Math.min(e.length,n);for(var i=t;i<n;i++)r+=String.fromCharCode(e[i]);return r}function m(e,t,n){return v(e,t,n)}function E(e,t,n){var r=e.length;(!t||t<0)&&(t=0),(!n||n<0||n>r)&&(n=r);for(var i="",o=t;o<n;o++)i+=q(e[o]);return i}function I(e,t,n){for(var r=e.slice(t,n),i="",o=0;o<r.length;o+=2)i+=String.fromCharCode(r[o]+256*r[o+1]);return i}function A(e,t,n,r){r||(Q("boolean"==typeof n,"missing or invalid endian"),Q(void 0!==t&&null!==t,"missing offset"),Q(t+1<e.length,"Trying to read beyond buffer length"));var i=e.length;if(!(t>=i)){var o;return n?(o=e[t],t+1<i&&(o|=e[t+1]<<8)):(o=e[t]<<8,t+1<i&&(o|=e[t+1])),o}}function B(e,t,n,r){r||(Q("boolean"==typeof n,"missing or invalid endian"),Q(void 0!==t&&null!==t,"missing offset"),Q(t+3<e.length,"Trying to read beyond buffer length"));var i=e.length;if(!(t>=i)){var o;return n?(t+2<i&&(o=e[t+2]<<16),t+1<i&&(o|=e[t+1]<<8),o|=e[t],t+3<i&&(o+=e[t+3]<<24>>>0)):(t+1<i&&(o=e[t+1]<<16),t+2<i&&(o|=e[t+2]<<8),t+3<i&&(o|=e[t+3]),o+=e[t]<<24>>>0),o}}function _(e,t,n,r){r||(Q("boolean"==typeof n,"missing or invalid endian"),Q(void 0!==t&&null!==t,"missing offset"),Q(t+1<e.length,"Trying to read beyond buffer length"));var i=e.length;if(!(t>=i)){var o=A(e,t,n,!0),a=32768&o;return a?(65535-o+1)*-1:o}}function U(e,t,n,r){r||(Q("boolean"==typeof n,"missing or invalid endian"),Q(void 0!==t&&null!==t,"missing offset"),Q(t+3<e.length,"Trying to read beyond buffer length"));var i=e.length;if(!(t>=i)){var o=B(e,t,n,!0),a=2147483648&o;return a?(4294967295-o+1)*-1:o}}function L(e,t,n,r){return r||(Q("boolean"==typeof n,"missing or invalid endian"),Q(t+3<e.length,"Trying to read beyond buffer length")),Z.read(e,t,n,23,4)}function k(e,t,n,r){return r||(Q("boolean"==typeof n,"missing or invalid endian"),Q(t+7<e.length,"Trying to read beyond buffer length")),Z.read(e,t,n,52,8)}function C(e,t,n,r,i){i||(Q(void 0!==t&&null!==t,"missing value"),Q("boolean"==typeof r,"missing or invalid endian"),Q(void 0!==n&&null!==n,"missing offset"),Q(n+1<e.length,"trying to write beyond buffer length"),H(t,65535));var o=e.length;if(!(n>=o))for(var a=0,u=Math.min(o-n,2);a<u;a++)e[n+a]=(t&255<<8*(r?a:1-a))>>>8*(r?a:1-a)}function S(e,t,n,r,i){i||(Q(void 0!==t&&null!==t,"missing value"),Q("boolean"==typeof r,"missing or invalid endian"),Q(void 0!==n&&null!==n,"missing offset"),Q(n+3<e.length,"trying to write beyond buffer length"),H(t,4294967295));var o=e.length;if(!(n>=o))for(var a=0,u=Math.min(o-n,4);a<u;a++)e[n+a]=t>>>8*(r?a:3-a)&255}function T(e,t,n,r,i){i||(Q(void 0!==t&&null!==t,"missing value"),Q("boolean"==typeof r,"missing or invalid endian"),Q(void 0!==n&&null!==n,"missing offset"),Q(n+1<e.length,"Trying to write beyond buffer length"),K(t,32767,-32768));var o=e.length;n>=o||(t>=0?C(e,t,n,r,i):C(e,65535+t+1,n,r,i))}function M(e,t,n,r,i){i||(Q(void 0!==t&&null!==t,"missing value"),Q("boolean"==typeof r,"missing or invalid endian"),Q(void 0!==n&&null!==n,"missing offset"),Q(n+3<e.length,"Trying to write beyond buffer length"),K(t,2147483647,-2147483648));var o=e.length;n>=o||(t>=0?S(e,t,n,r,i):S(e,4294967295+t+1,n,r,i))}function j(e,t,n,r,i){i||(Q(void 0!==t&&null!==t,"missing value"),Q("boolean"==typeof r,"missing or invalid endian"),Q(void 0!==n&&null!==n,"missing offset"),Q(n+3<e.length,"Trying to write beyond buffer length"),G(t,3.4028234663852886e38,-3.4028234663852886e38));var o=e.length;n>=o||Z.write(e,t,n,r,23,4)}function N(e,t,n,r,i){i||(Q(void 0!==t&&null!==t,"missing value"),Q("boolean"==typeof r,"missing or invalid endian"),Q(void 0!==n&&null!==n,"missing offset"),Q(n+7<e.length,"Trying to write beyond buffer length"),G(t,1.7976931348623157e308,-1.7976931348623157e308));var o=e.length;n>=o||Z.write(e,t,n,r,52,8)}function x(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}function F(e,t,n){return"number"!=typeof e?n:(e=~~e,e>=t?t:e>=0?e:(e+=t,e>=0?e:0))}function O(e){return e=~~Math.ceil(+e),e<0?0:e}function D(e){return(Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)})(e)}function P(e){return D(e)||i.isBuffer(e)||e&&"object"==typeof e&&"number"==typeof e.length}function q(e){return e<16?"0"+e.toString(16):e.toString(16)}function W(e){for(var t=[],n=0;n<e.length;n++){var r=e.charCodeAt(n);if(r<=127)t.push(e.charCodeAt(n));else{var i=n;r>=55296&&r<=57343&&n++;for(var o=encodeURIComponent(e.slice(i,n+1)).substr(1).split("%"),a=0;a<o.length;a++)t.push(parseInt(o[a],16))}}return t}function J(e){for(var t=[],n=0;n<e.length;n++)t.push(255&e.charCodeAt(n));return t}function R(e){for(var t,n,r,i=[],o=0;o<e.length;o++)t=e.charCodeAt(o),n=t>>8,r=t%256,i.push(r),i.push(n);return i}function X(e){return V.toByteArray(e)}function Y(e,t,n,r){for(var i=0;i<r&&!(i+n>=t.length||i>=e.length);i++)t[i+n]=e[i];return i}function z(e){try{return decodeURIComponent(e)}catch(t){return String.fromCharCode(65533)}}function H(e,t){Q("number"==typeof e,"cannot write a non-number as a number"),Q(e>=0,"specified a negative value for writing an unsigned value"),Q(e<=t,"value is larger than maximum value for type"),Q(Math.floor(e)===e,"value has a fractional component")}function K(e,t,n){Q("number"==typeof e,"cannot write a non-number as a number"),Q(e<=t,"value larger than maximum allowed value"),Q(e>=n,"value smaller than minimum allowed value"),Q(Math.floor(e)===e,"value has a fractional component")}function G(e,t,n){Q("number"==typeof e,"cannot write a non-number as a number"),Q(e<=t,"value larger than maximum allowed value"),Q(e>=n,"value smaller than minimum allowed value")}function Q(e,t){if(!e)throw new Error(t||"Failed assertion")}var V=e("base64-js"),Z=e("ieee754");n.Buffer=i,n.SlowBuffer=i,n.INSPECT_MAX_BYTES=50,i.poolSize=8192,i._useTypedArrays=function(){try{var e=new ArrayBuffer(0),t=new Uint8Array(e);return t.foo=function(){return 42},42===t.foo()&&"function"==typeof t.subarray}catch(n){return!1}}(),i.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"raw":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},i.isBuffer=function(e){return!(null===e||void 0===e||!e._isBuffer)},i.byteLength=function(e,t){var n;switch(e+="",t||"utf8"){case"hex":n=e.length/2;break;case"utf8":case"utf-8":n=W(e).length;break;case"ascii":case"binary":case"raw":n=e.length;break;case"base64":n=X(e).length;break;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":n=2*e.length;break;default:throw new Error("Unknown encoding")}return n},i.concat=function(e,t){if(Q(D(e),"Usage: Buffer.concat(list, [totalLength])\nlist should be an Array."),0===e.length)return new i(0);if(1===e.length)return e[0];var n;if("number"!=typeof t)for(t=0,n=0;n<e.length;n++)t+=e[n].length;var r=new i(t),o=0;for(n=0;n<e.length;n++){var a=e[n];a.copy(r,o),o+=a.length}return r},i.prototype.write=function(e,t,n,r){if(isFinite(t))isFinite(n)||(r=n,n=void 0);else{var i=r;r=t,t=n,n=i}t=Number(t)||0;var o=this.length-t;n?(n=Number(n),n>o&&(n=o)):n=o,r=String(r||"utf8").toLowerCase();var a;switch(r){case"hex":a=c(this,e,t,n);break;case"utf8":case"utf-8":a=h(this,e,t,n);break;case"ascii":a=d(this,e,t,n);break;case"binary":a=g(this,e,t,n);break;case"base64":a=p(this,e,t,n);break;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":a=y(this,e,t,n);break;default:throw new Error("Unknown encoding")}return a},i.prototype.toString=function(e,t,n){var r=this;if(e=String(e||"utf8").toLowerCase(),t=Number(t)||0,n=void 0!==n?Number(n):n=r.length,n===t)return"";var i;switch(e){case"hex":i=E(r,t,n);break;case"utf8":case"utf-8":i=w(r,t,n);break;case"ascii":i=v(r,t,n);break;case"binary":i=m(r,t,n);break;case"base64":i=b(r,t,n);break;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":i=I(r,t,n);break;default:throw new Error("Unknown encoding")}return i},i.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}},i.prototype.copy=function(e,t,n,r){var o=this;if(n||(n=0),r||0===r||(r=this.length),t||(t=0),r!==n&&0!==e.length&&0!==o.length){Q(r>=n,"sourceEnd < sourceStart"),Q(t>=0&&t<e.length,"targetStart out of bounds"),Q(n>=0&&n<o.length,"sourceStart out of bounds"),Q(r>=0&&r<=o.length,"sourceEnd out of bounds"),r>this.length&&(r=this.length),e.length-t<r-n&&(r=e.length-t+n);var a=r-n;if(a<100||!i._useTypedArrays)for(var u=0;u<a;u++)e[u+t]=this[u+n];else e._set(this.subarray(n,n+a),t)}},i.prototype.slice=function(e,t){var n=this.length;if(e=F(e,n,0),t=F(t,n,n),i._useTypedArrays)return i._augment(this.subarray(e,t));for(var r=t-e,o=new i(r,(void 0),(!0)),a=0;a<r;a++)o[a]=this[a+e];return o},i.prototype.get=function(e){return console.log(".get() is deprecated. Access using array indexes instead."),this.readUInt8(e)},i.prototype.set=function(e,t){return console.log(".set() is deprecated. Access using array indexes instead."),this.writeUInt8(e,t)},i.prototype.readUInt8=function(e,t){if(t||(Q(void 0!==e&&null!==e,"missing offset"),Q(e<this.length,"Trying to read beyond buffer length")),!(e>=this.length))return this[e]},i.prototype.readUInt16LE=function(e,t){return A(this,e,!0,t)},i.prototype.readUInt16BE=function(e,t){return A(this,e,!1,t)},i.prototype.readUInt32LE=function(e,t){return B(this,e,!0,t)},i.prototype.readUInt32BE=function(e,t){return B(this,e,!1,t)},i.prototype.readInt8=function(e,t){if(t||(Q(void 0!==e&&null!==e,"missing offset"),Q(e<this.length,"Trying to read beyond buffer length")),!(e>=this.length)){var n=128&this[e];return n?(255-this[e]+1)*-1:this[e]}},i.prototype.readInt16LE=function(e,t){return _(this,e,!0,t)},i.prototype.readInt16BE=function(e,t){return _(this,e,!1,t)},i.prototype.readInt32LE=function(e,t){return U(this,e,!0,t)},i.prototype.readInt32BE=function(e,t){return U(this,e,!1,t)},i.prototype.readFloatLE=function(e,t){return L(this,e,!0,t)},i.prototype.readFloatBE=function(e,t){return L(this,e,!1,t)},i.prototype.readDoubleLE=function(e,t){return k(this,e,!0,t)},i.prototype.readDoubleBE=function(e,t){return k(this,e,!1,t)},i.prototype.writeUInt8=function(e,t,n){n||(Q(void 0!==e&&null!==e,"missing value"),Q(void 0!==t&&null!==t,"missing offset"),Q(t<this.length,"trying to write beyond buffer length"),H(e,255)),t>=this.length||(this[t]=e)},i.prototype.writeUInt16LE=function(e,t,n){C(this,e,t,!0,n)},i.prototype.writeUInt16BE=function(e,t,n){C(this,e,t,!1,n)},i.prototype.writeUInt32LE=function(e,t,n){S(this,e,t,!0,n)},i.prototype.writeUInt32BE=function(e,t,n){S(this,e,t,!1,n)},i.prototype.writeInt8=function(e,t,n){n||(Q(void 0!==e&&null!==e,"missing value"),Q(void 0!==t&&null!==t,"missing offset"),Q(t<this.length,"Trying to write beyond buffer length"),K(e,127,-128)),t>=this.length||(e>=0?this.writeUInt8(e,t,n):this.writeUInt8(255+e+1,t,n))},i.prototype.writeInt16LE=function(e,t,n){T(this,e,t,!0,n)},i.prototype.writeInt16BE=function(e,t,n){T(this,e,t,!1,n)},i.prototype.writeInt32LE=function(e,t,n){M(this,e,t,!0,n)},i.prototype.writeInt32BE=function(e,t,n){M(this,e,t,!1,n)},i.prototype.writeFloatLE=function(e,t,n){j(this,e,t,!0,n)},i.prototype.writeFloatBE=function(e,t,n){j(this,e,t,!1,n)},i.prototype.writeDoubleLE=function(e,t,n){N(this,e,t,!0,n)},i.prototype.writeDoubleBE=function(e,t,n){N(this,e,t,!1,n)},i.prototype.fill=function(e,t,n){if(e||(e=0),t||(t=0),n||(n=this.length),"string"==typeof e&&(e=e.charCodeAt(0)),Q("number"==typeof e&&!isNaN(e),"value is not a number"),Q(n>=t,"end < start"),n!==t&&0!==this.length){Q(t>=0&&t<this.length,"start out of bounds"),Q(n>=0&&n<=this.length,"end out of bounds");for(var r=t;r<n;r++)this[r]=e}},i.prototype.inspect=function(){for(var e=[],t=this.length,r=0;r<t;r++)if(e[r]=q(this[r]),r===n.INSPECT_MAX_BYTES){e[r+1]="...";break}return"<Buffer "+e.join(" ")+">"},i.prototype.toArrayBuffer=function(){if("undefined"!=typeof Uint8Array){if(i._useTypedArrays)return new i(this).buffer;for(var e=new Uint8Array(this.length),t=0,n=e.length;t<n;t+=1)e[t]=this[t];return e.buffer}throw new Error("Buffer.toArrayBuffer not supported in this browser")};var $=i.prototype;i._augment=function(e){return e._isBuffer=!0,e._get=e.get,e._set=e.set,e.get=$.get,e.set=$.set,e.write=$.write,e.toString=$.toString,e.toLocaleString=$.toString,e.toJSON=$.toJSON,e.copy=$.copy,e.slice=$.slice,e.readUInt8=$.readUInt8,e.readUInt16LE=$.readUInt16LE,e.readUInt16BE=$.readUInt16BE,e.readUInt32LE=$.readUInt32LE,e.readUInt32BE=$.readUInt32BE,e.readInt8=$.readInt8,e.readInt16LE=$.readInt16LE,e.readInt16BE=$.readInt16BE,e.readInt32LE=$.readInt32LE,e.readInt32BE=$.readInt32BE,e.readFloatLE=$.readFloatLE,e.readFloatBE=$.readFloatBE,e.readDoubleLE=$.readDoubleLE,e.readDoubleBE=$.readDoubleBE,e.writeUInt8=$.writeUInt8,e.writeUInt16LE=$.writeUInt16LE,e.writeUInt16BE=$.writeUInt16BE,e.writeUInt32LE=$.writeUInt32LE,e.writeUInt32BE=$.writeUInt32BE,e.writeInt8=$.writeInt8,e.writeInt16LE=$.writeInt16LE,e.writeInt16BE=$.writeInt16BE,e.writeInt32LE=$.writeInt32LE,e.writeInt32BE=$.writeInt32BE,e.writeFloatLE=$.writeFloatLE,e.writeFloatBE=$.writeFloatBE,e.writeDoubleLE=$.writeDoubleLE,e.writeDoubleBE=$.writeDoubleBE,e.fill=$.fill,e.inspect=$.inspect,e.toArrayBuffer=$.toArrayBuffer,e}}).call(this,e("e/U+97"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\..\\node_modules\\buffer\\index.js","/..\\..\\node_modules\\buffer")},{"base64-js":1,buffer:2,"e/U+97":4,ieee754:3}],3:[function(e,t,n){(function(e,t,r,i,o,a,u,s,f){n.read=function(e,t,n,r,i){var o,a,u=8*i-r-1,s=(1<<u)-1,f=s>>1,l=-7,c=n?i-1:0,h=n?-1:1,d=e[t+c];for(c+=h,o=d&(1<<-l)-1,d>>=-l,l+=u;l>0;o=256*o+e[t+c],c+=h,l-=8);for(a=o&(1<<-l)-1,o>>=-l,l+=r;l>0;a=256*a+e[t+c],c+=h,l-=8);if(0===o)o=1-f;else{if(o===s)return a?NaN:(d?-1:1)*(1/0);a+=Math.pow(2,r),o-=f}return(d?-1:1)*a*Math.pow(2,o-r)},n.write=function(e,t,n,r,i,o){var a,u,s,f=8*o-i-1,l=(1<<f)-1,c=l>>1,h=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,d=r?0:o-1,g=r?1:-1,p=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(u=isNaN(t)?1:0,a=l):(a=Math.floor(Math.log(t)/Math.LN2),t*(s=Math.pow(2,-a))<1&&(a--,s*=2),t+=a+c>=1?h/s:h*Math.pow(2,1-c),t*s>=2&&(a++,s/=2),a+c>=l?(u=0,a=l):a+c>=1?(u=(t*s-1)*Math.pow(2,i),a+=c):(u=t*Math.pow(2,c-1)*Math.pow(2,i),a=0));i>=8;e[n+d]=255&u,d+=g,u/=256,i-=8);for(a=a<<i|u,f+=i;f>0;e[n+d]=255&a,d+=g,a/=256,f-=8);e[n+d-g]|=128*p}}).call(this,e("e/U+97"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\..\\node_modules\\ieee754\\index.js","/..\\..\\node_modules\\ieee754")},{buffer:2,"e/U+97":4}],4:[function(e,t,n){(function(e,n,r,i,o,a,u,s,f){function l(){}var e=t.exports={};e.nextTick=function(){var e="undefined"!=typeof window&&window.setImmediate,t="undefined"!=typeof window&&window.postMessage&&window.addEventListener;if(e)return function(e){return window.setImmediate(e)};if(t){var n=[];return window.addEventListener("message",function(e){var t=e.source;if((t===window||null===t)&&"process-tick"===e.data&&(e.stopPropagation(),n.length>0)){var r=n.shift();r()}},!0),function(e){n.push(e),window.postMessage("process-tick","*")}}return function(e){setTimeout(e,0)}}(),e.title="browser",e.browser=!0,e.env={},e.argv=[],e.on=l,e.addListener=l,e.once=l,e.off=l,e.removeListener=l,e.removeAllListeners=l,e.emit=l,e.binding=function(e){throw new Error("process.binding is not supported")},e.cwd=function(){return"/"},e.chdir=function(e){throw new Error("process.chdir is not supported")}}).call(this,e("e/U+97"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\..\\node_modules\\process\\browser.js","/..\\..\\node_modules\\process")},{buffer:2,"e/U+97":4}],5:[function(e,t,n){(function(e,t,n,r,i,o,a,u,s){"use strict";function f(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function l(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function c(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var h=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),d=function(){function e(){c(this,e),this._name="";for(var t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];this._sideLengths=n}return h(e,[{key:"sayHello",value:function(){return this.firstName+" "+this.lastName}},{key:"getPerimeter",value:function(){return this._sideLengths.reduce(function(e,t){return e+t})}},{key:"getArea",value:function(){return this._sideLengths[0]*this._sideLengths[1]}}]),e}(),g=function(e){function t(){var e;c(this,t);for(var n=arguments.length,r=Array(n),i=0;i<n;i++)r[i]=arguments[i];var o=f(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return o._name="Prostokąt",o}return l(t,e),t}(d),p=function(e){function t(){var e;c(this,t);for(var n=arguments.length,r=Array(n),i=0;i<n;i++)r[i]=arguments[i];var o=f(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return o._name="Kwadrat",o}return l(t,e),t}(g),y=function(e){function t(){var e;c(this,t);for(var n=arguments.length,r=Array(n),i=0;i<n;i++)r[i]=arguments[i];var o=f(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return o._name="Trójkąt",o}return l(t,e),h(t,[{key:"getArea",value:function(){var e=this._sideLengths[0];return+(e*e*Math.sqrt(3)/4).toFixed(2)}}]),t}(d);new g(20,40),new p(20),new y(20)}).call(this,e("e/U+97"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/fake_7b9ce5f6.js","/")},{buffer:2,"e/U+97":4}]},{},[5]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVzNi5qcyJdLCJuYW1lcyI6WyJlIiwidCIsIm4iLCJyIiwicyIsIm8iLCJ1IiwiYSIsInJlcXVpcmUiLCJpIiwiRXJyb3IiLCJmIiwiZXhwb3J0cyIsImNhbGwiLCJsZW5ndGgiLCIxIiwibW9kdWxlIiwicHJvY2VzcyIsImdsb2JhbCIsIkJ1ZmZlciIsIl9fYXJndW1lbnQwIiwiX19hcmd1bWVudDEiLCJfX2FyZ3VtZW50MiIsIl9fYXJndW1lbnQzIiwiX19maWxlbmFtZSIsIl9fZGlybmFtZSIsImxvb2t1cCIsImRlY29kZSIsImVsdCIsImNvZGUiLCJjaGFyQ29kZUF0IiwiUExVUyIsIlBMVVNfVVJMX1NBRkUiLCJTTEFTSCIsIlNMQVNIX1VSTF9TQUZFIiwiTlVNQkVSIiwiVVBQRVIiLCJMT1dFUiIsImI2NFRvQnl0ZUFycmF5IiwiYjY0IiwicHVzaCIsInYiLCJhcnIiLCJMIiwiaiIsImwiLCJ0bXAiLCJwbGFjZUhvbGRlcnMiLCJsZW4iLCJjaGFyQXQiLCJBcnIiLCJ1aW50OFRvQmFzZTY0IiwidWludDgiLCJlbmNvZGUiLCJudW0iLCJ0cmlwbGV0VG9CYXNlNjQiLCJ0ZW1wIiwiZXh0cmFCeXRlcyIsIm91dHB1dCIsIlVpbnQ4QXJyYXkiLCJBcnJheSIsInRvQnl0ZUFycmF5IiwiZnJvbUJ5dGVBcnJheSIsInRoaXMiLCJiYXNlNjRqcyIsInNlbGYiLCJ3aW5kb3ciLCJhcmd1bWVudHMiLCJidWZmZXIiLCJlL1UrOTciLCIyIiwic3ViamVjdCIsImVuY29kaW5nIiwibm9aZXJvIiwidHlwZSIsInN0cmluZ3RyaW0iLCJjb2VyY2UiLCJieXRlTGVuZ3RoIiwiYnVmIiwiX3VzZVR5cGVkQXJyYXlzIiwiX2F1Z21lbnQiLCJfaXNCdWZmZXIiLCJfc2V0IiwiaXNBcnJheWlzaCIsImlzQnVmZmVyIiwicmVhZFVJbnQ4Iiwid3JpdGUiLCJfaGV4V3JpdGUiLCJzdHJpbmciLCJvZmZzZXQiLCJOdW1iZXIiLCJyZW1haW5pbmciLCJzdHJMZW4iLCJhc3NlcnQiLCJieXRlIiwicGFyc2VJbnQiLCJzdWJzdHIiLCJpc05hTiIsIl9jaGFyc1dyaXR0ZW4iLCJfdXRmOFdyaXRlIiwiY2hhcnNXcml0dGVuIiwiYmxpdEJ1ZmZlciIsInV0ZjhUb0J5dGVzIiwiX2FzY2lpV3JpdGUiLCJhc2NpaVRvQnl0ZXMiLCJfYmluYXJ5V3JpdGUiLCJfYmFzZTY0V3JpdGUiLCJiYXNlNjRUb0J5dGVzIiwiX3V0ZjE2bGVXcml0ZSIsInV0ZjE2bGVUb0J5dGVzIiwiX2Jhc2U2NFNsaWNlIiwic3RhcnQiLCJlbmQiLCJiYXNlNjQiLCJzbGljZSIsIl91dGY4U2xpY2UiLCJyZXMiLCJNYXRoIiwibWluIiwiZGVjb2RlVXRmOENoYXIiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJ0b1N0cmluZyIsIl9hc2NpaVNsaWNlIiwicmV0IiwiX2JpbmFyeVNsaWNlIiwiX2hleFNsaWNlIiwib3V0IiwidG9IZXgiLCJfdXRmMTZsZVNsaWNlIiwiYnl0ZXMiLCJfcmVhZFVJbnQxNiIsImxpdHRsZUVuZGlhbiIsIm5vQXNzZXJ0IiwidW5kZWZpbmVkIiwidmFsIiwiX3JlYWRVSW50MzIiLCJfcmVhZEludDE2IiwibmVnIiwiX3JlYWRJbnQzMiIsIl9yZWFkRmxvYXQiLCJpZWVlNzU0IiwicmVhZCIsIl9yZWFkRG91YmxlIiwiX3dyaXRlVUludDE2IiwidmFsdWUiLCJ2ZXJpZnVpbnQiLCJfd3JpdGVVSW50MzIiLCJfd3JpdGVJbnQxNiIsInZlcmlmc2ludCIsIl93cml0ZUludDMyIiwiX3dyaXRlRmxvYXQiLCJ2ZXJpZklFRUU3NTQiLCJfd3JpdGVEb3VibGUiLCJzdHIiLCJ0cmltIiwicmVwbGFjZSIsImNsYW1wIiwiaW5kZXgiLCJkZWZhdWx0VmFsdWUiLCJjZWlsIiwiaXNBcnJheSIsIk9iamVjdCIsInByb3RvdHlwZSIsImJ5dGVBcnJheSIsImIiLCJoIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwic3BsaXQiLCJjIiwiaGkiLCJsbyIsInNyYyIsImRzdCIsImRlY29kZVVSSUNvbXBvbmVudCIsImVyciIsIm1heCIsImZsb29yIiwidGVzdCIsIm1lc3NhZ2UiLCJTbG93QnVmZmVyIiwiSU5TUEVDVF9NQVhfQllURVMiLCJwb29sU2l6ZSIsIkFycmF5QnVmZmVyIiwiZm9vIiwic3ViYXJyYXkiLCJpc0VuY29kaW5nIiwidG9Mb3dlckNhc2UiLCJjb25jYXQiLCJsaXN0IiwidG90YWxMZW5ndGgiLCJwb3MiLCJpdGVtIiwiY29weSIsImlzRmluaXRlIiwic3dhcCIsInRvSlNPTiIsImRhdGEiLCJfYXJyIiwidGFyZ2V0IiwidGFyZ2V0X3N0YXJ0Iiwic291cmNlIiwic2xpY2VMZW4iLCJuZXdCdWYiLCJnZXQiLCJjb25zb2xlIiwibG9nIiwic2V0Iiwid3JpdGVVSW50OCIsInJlYWRVSW50MTZMRSIsInJlYWRVSW50MTZCRSIsInJlYWRVSW50MzJMRSIsInJlYWRVSW50MzJCRSIsInJlYWRJbnQ4IiwicmVhZEludDE2TEUiLCJyZWFkSW50MTZCRSIsInJlYWRJbnQzMkxFIiwicmVhZEludDMyQkUiLCJyZWFkRmxvYXRMRSIsInJlYWRGbG9hdEJFIiwicmVhZERvdWJsZUxFIiwicmVhZERvdWJsZUJFIiwid3JpdGVVSW50MTZMRSIsIndyaXRlVUludDE2QkUiLCJ3cml0ZVVJbnQzMkxFIiwid3JpdGVVSW50MzJCRSIsIndyaXRlSW50OCIsIndyaXRlSW50MTZMRSIsIndyaXRlSW50MTZCRSIsIndyaXRlSW50MzJMRSIsIndyaXRlSW50MzJCRSIsIndyaXRlRmxvYXRMRSIsIndyaXRlRmxvYXRCRSIsIndyaXRlRG91YmxlTEUiLCJ3cml0ZURvdWJsZUJFIiwiZmlsbCIsImluc3BlY3QiLCJqb2luIiwidG9BcnJheUJ1ZmZlciIsIkJQIiwiX2dldCIsInRvTG9jYWxlU3RyaW5nIiwiYmFzZTY0LWpzIiwiMyIsImlzTEUiLCJtTGVuIiwibkJ5dGVzIiwibSIsImVMZW4iLCJlTWF4IiwiZUJpYXMiLCJuQml0cyIsImQiLCJOYU4iLCJJbmZpbml0eSIsInBvdyIsInJ0IiwiYWJzIiwiTE4yIiwiNCIsIm5vb3AiLCJuZXh0VGljayIsImNhblNldEltbWVkaWF0ZSIsInNldEltbWVkaWF0ZSIsImNhblBvc3QiLCJwb3N0TWVzc2FnZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJxdWV1ZSIsImV2Iiwic3RvcFByb3BhZ2F0aW9uIiwiZm4iLCJzaGlmdCIsInNldFRpbWVvdXQiLCJ0aXRsZSIsImJyb3dzZXIiLCJlbnYiLCJhcmd2Iiwib24iLCJhZGRMaXN0ZW5lciIsIm9uY2UiLCJvZmYiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsImVtaXQiLCJiaW5kaW5nIiwibmFtZSIsImN3ZCIsImNoZGlyIiwiZGlyIiwiNSIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiUmVmZXJlbmNlRXJyb3IiLCJfaW5oZXJpdHMiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJUeXBlRXJyb3IiLCJjcmVhdGUiLCJjb25zdHJ1Y3RvciIsImVudW1lcmFibGUiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIl9jcmVhdGVDbGFzcyIsImRlZmluZVByb3BlcnRpZXMiLCJwcm9wcyIsImRlc2NyaXB0b3IiLCJkZWZpbmVQcm9wZXJ0eSIsImtleSIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIlNoYXBlIiwiX25hbWUiLCJfbGVuIiwic2lkZUxlbmd0aHMiLCJfa2V5IiwiX3NpZGVMZW5ndGhzIiwiZmlyc3ROYW1lIiwibGFzdE5hbWUiLCJyZWR1Y2UiLCJwcmV2VmFsIiwiUmVjdGFuZ2xlIiwiX1NoYXBlIiwiX3JlZiIsIl9sZW4yIiwiX2tleTIiLCJfdGhpcyIsImdldFByb3RvdHlwZU9mIiwiYXBwbHkiLCJTcXVhcmUiLCJfUmVjdGFuZ2xlIiwiX3JlZjIiLCJfbGVuMyIsIl9rZXkzIiwiX3RoaXMyIiwiVHJpYW5nbGUiLCJfU2hhcGUyIiwiX3JlZjMiLCJfbGVu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QUFBLFNBQUFDLEdBR0EsUUFBQUQsS0FDQSxHQUFBRSxFQUVBckMsR0FBQWhQLEtBQUFtUixFQUVBLEtBQUEsR0FBQUcsR0FBQWxSLFVBQUFyRCxPQUFBK1MsRUFBQWpRLE1BQUF5UixHQUFBQyxFQUFBLEVBQUFBLEVBQUFELEVBQUFDLElBQ0F6QixFQUFBeUIsR0FBQW5SLFVBQUFtUixFQUdBLElBQUFDLEdBQUFyRCxFQUFBbk8sTUFBQXFSLEVBQUFGLEVBQUFwQyxXQUFBNUksT0FBQXdLLGVBQUFRLElBQUFyVSxLQUFBOFQsTUFBQVMsR0FBQXJSLE1BQUE2SCxPQUFBaUksSUFHQSxPQURBMEIsR0FBQTVCLE1BQUEsVUFDQTRCLEVBWUEsTUExQkFuRCxHQUFBOEMsRUFBQUMsR0FpQkFqQyxFQUFBZ0MsSUFDQTNCLElBQUEsVUFDQXRLLE1BQUEsV0FDQSxHQUFBMUksR0FBQXdELEtBQUFnUSxhQUFBLEVBRUEsU0FBQXhULEVBQUFBLEVBQUE4RyxLQUFBbU8sS0FBQSxHQUFBLEdBQUFDLFFBQUEsT0FJQVAsR0FDQXhCLEVBRUEsSUFBQVUsR0FBQSxHQUFBLElBQ0EsR0FBQVEsR0FBQSxJQUNBLEdBQUFNLEdBQUEsTUFDQXJVLEtBQUFrRCxLQUFBdkQsRUFBQSxVQUFBLG1CQUFBeUQsTUFBQUEsS0FBQSxtQkFBQUMsUUFBQUEsVUFBQTFELEVBQUEsVUFBQVcsT0FBQWdELFVBQUEsR0FBQUEsVUFBQSxHQUFBQSxVQUFBLEdBQUFBLFVBQUEsR0FBQSxvQkFBQSxPQUNBQyxPQUFBLEVBQUFDLFNBQUEsU0FBQSIsImZpbGUiOiJlczYubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpfXZhciBmPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChmLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGYsZi5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkoezE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCxCdWZmZXIsX19hcmd1bWVudDAsX19hcmd1bWVudDEsX19hcmd1bWVudDIsX19hcmd1bWVudDMsX19maWxlbmFtZSxfX2Rpcm5hbWUpe1xudmFyIGxvb2t1cCA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJztcblxuOyhmdW5jdGlvbiAoZXhwb3J0cykge1xuXHQndXNlIHN0cmljdCc7XG5cbiAgdmFyIEFyciA9ICh0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcpXG4gICAgPyBVaW50OEFycmF5XG4gICAgOiBBcnJheVxuXG5cdHZhciBQTFVTICAgPSAnKycuY2hhckNvZGVBdCgwKVxuXHR2YXIgU0xBU0ggID0gJy8nLmNoYXJDb2RlQXQoMClcblx0dmFyIE5VTUJFUiA9ICcwJy5jaGFyQ29kZUF0KDApXG5cdHZhciBMT1dFUiAgPSAnYScuY2hhckNvZGVBdCgwKVxuXHR2YXIgVVBQRVIgID0gJ0EnLmNoYXJDb2RlQXQoMClcblx0dmFyIFBMVVNfVVJMX1NBRkUgPSAnLScuY2hhckNvZGVBdCgwKVxuXHR2YXIgU0xBU0hfVVJMX1NBRkUgPSAnXycuY2hhckNvZGVBdCgwKVxuXG5cdGZ1bmN0aW9uIGRlY29kZSAoZWx0KSB7XG5cdFx0dmFyIGNvZGUgPSBlbHQuY2hhckNvZGVBdCgwKVxuXHRcdGlmIChjb2RlID09PSBQTFVTIHx8XG5cdFx0ICAgIGNvZGUgPT09IFBMVVNfVVJMX1NBRkUpXG5cdFx0XHRyZXR1cm4gNjIgLy8gJysnXG5cdFx0aWYgKGNvZGUgPT09IFNMQVNIIHx8XG5cdFx0ICAgIGNvZGUgPT09IFNMQVNIX1VSTF9TQUZFKVxuXHRcdFx0cmV0dXJuIDYzIC8vICcvJ1xuXHRcdGlmIChjb2RlIDwgTlVNQkVSKVxuXHRcdFx0cmV0dXJuIC0xIC8vbm8gbWF0Y2hcblx0XHRpZiAoY29kZSA8IE5VTUJFUiArIDEwKVxuXHRcdFx0cmV0dXJuIGNvZGUgLSBOVU1CRVIgKyAyNiArIDI2XG5cdFx0aWYgKGNvZGUgPCBVUFBFUiArIDI2KVxuXHRcdFx0cmV0dXJuIGNvZGUgLSBVUFBFUlxuXHRcdGlmIChjb2RlIDwgTE9XRVIgKyAyNilcblx0XHRcdHJldHVybiBjb2RlIC0gTE9XRVIgKyAyNlxuXHR9XG5cblx0ZnVuY3Rpb24gYjY0VG9CeXRlQXJyYXkgKGI2NCkge1xuXHRcdHZhciBpLCBqLCBsLCB0bXAsIHBsYWNlSG9sZGVycywgYXJyXG5cblx0XHRpZiAoYjY0Lmxlbmd0aCAlIDQgPiAwKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc3RyaW5nLiBMZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDQnKVxuXHRcdH1cblxuXHRcdC8vIHRoZSBudW1iZXIgb2YgZXF1YWwgc2lnbnMgKHBsYWNlIGhvbGRlcnMpXG5cdFx0Ly8gaWYgdGhlcmUgYXJlIHR3byBwbGFjZWhvbGRlcnMsIHRoYW4gdGhlIHR3byBjaGFyYWN0ZXJzIGJlZm9yZSBpdFxuXHRcdC8vIHJlcHJlc2VudCBvbmUgYnl0ZVxuXHRcdC8vIGlmIHRoZXJlIGlzIG9ubHkgb25lLCB0aGVuIHRoZSB0aHJlZSBjaGFyYWN0ZXJzIGJlZm9yZSBpdCByZXByZXNlbnQgMiBieXRlc1xuXHRcdC8vIHRoaXMgaXMganVzdCBhIGNoZWFwIGhhY2sgdG8gbm90IGRvIGluZGV4T2YgdHdpY2Vcblx0XHR2YXIgbGVuID0gYjY0Lmxlbmd0aFxuXHRcdHBsYWNlSG9sZGVycyA9ICc9JyA9PT0gYjY0LmNoYXJBdChsZW4gLSAyKSA/IDIgOiAnPScgPT09IGI2NC5jaGFyQXQobGVuIC0gMSkgPyAxIDogMFxuXG5cdFx0Ly8gYmFzZTY0IGlzIDQvMyArIHVwIHRvIHR3byBjaGFyYWN0ZXJzIG9mIHRoZSBvcmlnaW5hbCBkYXRhXG5cdFx0YXJyID0gbmV3IEFycihiNjQubGVuZ3RoICogMyAvIDQgLSBwbGFjZUhvbGRlcnMpXG5cblx0XHQvLyBpZiB0aGVyZSBhcmUgcGxhY2Vob2xkZXJzLCBvbmx5IGdldCB1cCB0byB0aGUgbGFzdCBjb21wbGV0ZSA0IGNoYXJzXG5cdFx0bCA9IHBsYWNlSG9sZGVycyA+IDAgPyBiNjQubGVuZ3RoIC0gNCA6IGI2NC5sZW5ndGhcblxuXHRcdHZhciBMID0gMFxuXG5cdFx0ZnVuY3Rpb24gcHVzaCAodikge1xuXHRcdFx0YXJyW0wrK10gPSB2XG5cdFx0fVxuXG5cdFx0Zm9yIChpID0gMCwgaiA9IDA7IGkgPCBsOyBpICs9IDQsIGogKz0gMykge1xuXHRcdFx0dG1wID0gKGRlY29kZShiNjQuY2hhckF0KGkpKSA8PCAxOCkgfCAoZGVjb2RlKGI2NC5jaGFyQXQoaSArIDEpKSA8PCAxMikgfCAoZGVjb2RlKGI2NC5jaGFyQXQoaSArIDIpKSA8PCA2KSB8IGRlY29kZShiNjQuY2hhckF0KGkgKyAzKSlcblx0XHRcdHB1c2goKHRtcCAmIDB4RkYwMDAwKSA+PiAxNilcblx0XHRcdHB1c2goKHRtcCAmIDB4RkYwMCkgPj4gOClcblx0XHRcdHB1c2godG1wICYgMHhGRilcblx0XHR9XG5cblx0XHRpZiAocGxhY2VIb2xkZXJzID09PSAyKSB7XG5cdFx0XHR0bXAgPSAoZGVjb2RlKGI2NC5jaGFyQXQoaSkpIDw8IDIpIHwgKGRlY29kZShiNjQuY2hhckF0KGkgKyAxKSkgPj4gNClcblx0XHRcdHB1c2godG1wICYgMHhGRilcblx0XHR9IGVsc2UgaWYgKHBsYWNlSG9sZGVycyA9PT0gMSkge1xuXHRcdFx0dG1wID0gKGRlY29kZShiNjQuY2hhckF0KGkpKSA8PCAxMCkgfCAoZGVjb2RlKGI2NC5jaGFyQXQoaSArIDEpKSA8PCA0KSB8IChkZWNvZGUoYjY0LmNoYXJBdChpICsgMikpID4+IDIpXG5cdFx0XHRwdXNoKCh0bXAgPj4gOCkgJiAweEZGKVxuXHRcdFx0cHVzaCh0bXAgJiAweEZGKVxuXHRcdH1cblxuXHRcdHJldHVybiBhcnJcblx0fVxuXG5cdGZ1bmN0aW9uIHVpbnQ4VG9CYXNlNjQgKHVpbnQ4KSB7XG5cdFx0dmFyIGksXG5cdFx0XHRleHRyYUJ5dGVzID0gdWludDgubGVuZ3RoICUgMywgLy8gaWYgd2UgaGF2ZSAxIGJ5dGUgbGVmdCwgcGFkIDIgYnl0ZXNcblx0XHRcdG91dHB1dCA9IFwiXCIsXG5cdFx0XHR0ZW1wLCBsZW5ndGhcblxuXHRcdGZ1bmN0aW9uIGVuY29kZSAobnVtKSB7XG5cdFx0XHRyZXR1cm4gbG9va3VwLmNoYXJBdChudW0pXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gdHJpcGxldFRvQmFzZTY0IChudW0pIHtcblx0XHRcdHJldHVybiBlbmNvZGUobnVtID4+IDE4ICYgMHgzRikgKyBlbmNvZGUobnVtID4+IDEyICYgMHgzRikgKyBlbmNvZGUobnVtID4+IDYgJiAweDNGKSArIGVuY29kZShudW0gJiAweDNGKVxuXHRcdH1cblxuXHRcdC8vIGdvIHRocm91Z2ggdGhlIGFycmF5IGV2ZXJ5IHRocmVlIGJ5dGVzLCB3ZSdsbCBkZWFsIHdpdGggdHJhaWxpbmcgc3R1ZmYgbGF0ZXJcblx0XHRmb3IgKGkgPSAwLCBsZW5ndGggPSB1aW50OC5sZW5ndGggLSBleHRyYUJ5dGVzOyBpIDwgbGVuZ3RoOyBpICs9IDMpIHtcblx0XHRcdHRlbXAgPSAodWludDhbaV0gPDwgMTYpICsgKHVpbnQ4W2kgKyAxXSA8PCA4KSArICh1aW50OFtpICsgMl0pXG5cdFx0XHRvdXRwdXQgKz0gdHJpcGxldFRvQmFzZTY0KHRlbXApXG5cdFx0fVxuXG5cdFx0Ly8gcGFkIHRoZSBlbmQgd2l0aCB6ZXJvcywgYnV0IG1ha2Ugc3VyZSB0byBub3QgZm9yZ2V0IHRoZSBleHRyYSBieXRlc1xuXHRcdHN3aXRjaCAoZXh0cmFCeXRlcykge1xuXHRcdFx0Y2FzZSAxOlxuXHRcdFx0XHR0ZW1wID0gdWludDhbdWludDgubGVuZ3RoIC0gMV1cblx0XHRcdFx0b3V0cHV0ICs9IGVuY29kZSh0ZW1wID4+IDIpXG5cdFx0XHRcdG91dHB1dCArPSBlbmNvZGUoKHRlbXAgPDwgNCkgJiAweDNGKVxuXHRcdFx0XHRvdXRwdXQgKz0gJz09J1xuXHRcdFx0XHRicmVha1xuXHRcdFx0Y2FzZSAyOlxuXHRcdFx0XHR0ZW1wID0gKHVpbnQ4W3VpbnQ4Lmxlbmd0aCAtIDJdIDw8IDgpICsgKHVpbnQ4W3VpbnQ4Lmxlbmd0aCAtIDFdKVxuXHRcdFx0XHRvdXRwdXQgKz0gZW5jb2RlKHRlbXAgPj4gMTApXG5cdFx0XHRcdG91dHB1dCArPSBlbmNvZGUoKHRlbXAgPj4gNCkgJiAweDNGKVxuXHRcdFx0XHRvdXRwdXQgKz0gZW5jb2RlKCh0ZW1wIDw8IDIpICYgMHgzRilcblx0XHRcdFx0b3V0cHV0ICs9ICc9J1xuXHRcdFx0XHRicmVha1xuXHRcdH1cblxuXHRcdHJldHVybiBvdXRwdXRcblx0fVxuXG5cdGV4cG9ydHMudG9CeXRlQXJyYXkgPSBiNjRUb0J5dGVBcnJheVxuXHRleHBvcnRzLmZyb21CeXRlQXJyYXkgPSB1aW50OFRvQmFzZTY0XG59KHR5cGVvZiBleHBvcnRzID09PSAndW5kZWZpbmVkJyA/ICh0aGlzLmJhc2U2NGpzID0ge30pIDogZXhwb3J0cykpXG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiZS9VKzk3XCIpLHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcixhcmd1bWVudHNbM10sYXJndW1lbnRzWzRdLGFyZ3VtZW50c1s1XSxhcmd1bWVudHNbNl0sXCIvLi5cXFxcLi5cXFxcbm9kZV9tb2R1bGVzXFxcXGJhc2U2NC1qc1xcXFxsaWJcXFxcYjY0LmpzXCIsXCIvLi5cXFxcLi5cXFxcbm9kZV9tb2R1bGVzXFxcXGJhc2U2NC1qc1xcXFxsaWJcIilcbn0se1wiYnVmZmVyXCI6MixcImUvVSs5N1wiOjR9XSwyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwsQnVmZmVyLF9fYXJndW1lbnQwLF9fYXJndW1lbnQxLF9fYXJndW1lbnQyLF9fYXJndW1lbnQzLF9fZmlsZW5hbWUsX19kaXJuYW1lKXtcbi8qIVxuICogVGhlIGJ1ZmZlciBtb2R1bGUgZnJvbSBub2RlLmpzLCBmb3IgdGhlIGJyb3dzZXIuXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGZlcm9zc0BmZXJvc3Mub3JnPiA8aHR0cDovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cblxudmFyIGJhc2U2NCA9IHJlcXVpcmUoJ2Jhc2U2NC1qcycpXG52YXIgaWVlZTc1NCA9IHJlcXVpcmUoJ2llZWU3NTQnKVxuXG5leHBvcnRzLkJ1ZmZlciA9IEJ1ZmZlclxuZXhwb3J0cy5TbG93QnVmZmVyID0gQnVmZmVyXG5leHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTID0gNTBcbkJ1ZmZlci5wb29sU2l6ZSA9IDgxOTJcblxuLyoqXG4gKiBJZiBgQnVmZmVyLl91c2VUeXBlZEFycmF5c2A6XG4gKiAgID09PSB0cnVlICAgIFVzZSBVaW50OEFycmF5IGltcGxlbWVudGF0aW9uIChmYXN0ZXN0KVxuICogICA9PT0gZmFsc2UgICBVc2UgT2JqZWN0IGltcGxlbWVudGF0aW9uIChjb21wYXRpYmxlIGRvd24gdG8gSUU2KVxuICovXG5CdWZmZXIuX3VzZVR5cGVkQXJyYXlzID0gKGZ1bmN0aW9uICgpIHtcbiAgLy8gRGV0ZWN0IGlmIGJyb3dzZXIgc3VwcG9ydHMgVHlwZWQgQXJyYXlzLiBTdXBwb3J0ZWQgYnJvd3NlcnMgYXJlIElFIDEwKywgRmlyZWZveCA0KyxcbiAgLy8gQ2hyb21lIDcrLCBTYWZhcmkgNS4xKywgT3BlcmEgMTEuNissIGlPUyA0LjIrLiBJZiB0aGUgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IGFkZGluZ1xuICAvLyBwcm9wZXJ0aWVzIHRvIGBVaW50OEFycmF5YCBpbnN0YW5jZXMsIHRoZW4gdGhhdCdzIHRoZSBzYW1lIGFzIG5vIGBVaW50OEFycmF5YCBzdXBwb3J0XG4gIC8vIGJlY2F1c2Ugd2UgbmVlZCB0byBiZSBhYmxlIHRvIGFkZCBhbGwgdGhlIG5vZGUgQnVmZmVyIEFQSSBtZXRob2RzLiBUaGlzIGlzIGFuIGlzc3VlXG4gIC8vIGluIEZpcmVmb3ggNC0yOS4gTm93IGZpeGVkOiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02OTU0MzhcbiAgdHJ5IHtcbiAgICB2YXIgYnVmID0gbmV3IEFycmF5QnVmZmVyKDApXG4gICAgdmFyIGFyciA9IG5ldyBVaW50OEFycmF5KGJ1ZilcbiAgICBhcnIuZm9vID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gNDIgfVxuICAgIHJldHVybiA0MiA9PT0gYXJyLmZvbygpICYmXG4gICAgICAgIHR5cGVvZiBhcnIuc3ViYXJyYXkgPT09ICdmdW5jdGlvbicgLy8gQ2hyb21lIDktMTAgbGFjayBgc3ViYXJyYXlgXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufSkoKVxuXG4vKipcbiAqIENsYXNzOiBCdWZmZXJcbiAqID09PT09PT09PT09PT1cbiAqXG4gKiBUaGUgQnVmZmVyIGNvbnN0cnVjdG9yIHJldHVybnMgaW5zdGFuY2VzIG9mIGBVaW50OEFycmF5YCB0aGF0IGFyZSBhdWdtZW50ZWRcbiAqIHdpdGggZnVuY3Rpb24gcHJvcGVydGllcyBmb3IgYWxsIHRoZSBub2RlIGBCdWZmZXJgIEFQSSBmdW5jdGlvbnMuIFdlIHVzZVxuICogYFVpbnQ4QXJyYXlgIHNvIHRoYXQgc3F1YXJlIGJyYWNrZXQgbm90YXRpb24gd29ya3MgYXMgZXhwZWN0ZWQgLS0gaXQgcmV0dXJuc1xuICogYSBzaW5nbGUgb2N0ZXQuXG4gKlxuICogQnkgYXVnbWVudGluZyB0aGUgaW5zdGFuY2VzLCB3ZSBjYW4gYXZvaWQgbW9kaWZ5aW5nIHRoZSBgVWludDhBcnJheWBcbiAqIHByb3RvdHlwZS5cbiAqL1xuZnVuY3Rpb24gQnVmZmVyIChzdWJqZWN0LCBlbmNvZGluZywgbm9aZXJvKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBCdWZmZXIpKVxuICAgIHJldHVybiBuZXcgQnVmZmVyKHN1YmplY3QsIGVuY29kaW5nLCBub1plcm8pXG5cbiAgdmFyIHR5cGUgPSB0eXBlb2Ygc3ViamVjdFxuXG4gIC8vIFdvcmthcm91bmQ6IG5vZGUncyBiYXNlNjQgaW1wbGVtZW50YXRpb24gYWxsb3dzIGZvciBub24tcGFkZGVkIHN0cmluZ3NcbiAgLy8gd2hpbGUgYmFzZTY0LWpzIGRvZXMgbm90LlxuICBpZiAoZW5jb2RpbmcgPT09ICdiYXNlNjQnICYmIHR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgc3ViamVjdCA9IHN0cmluZ3RyaW0oc3ViamVjdClcbiAgICB3aGlsZSAoc3ViamVjdC5sZW5ndGggJSA0ICE9PSAwKSB7XG4gICAgICBzdWJqZWN0ID0gc3ViamVjdCArICc9J1xuICAgIH1cbiAgfVxuXG4gIC8vIEZpbmQgdGhlIGxlbmd0aFxuICB2YXIgbGVuZ3RoXG4gIGlmICh0eXBlID09PSAnbnVtYmVyJylcbiAgICBsZW5ndGggPSBjb2VyY2Uoc3ViamVjdClcbiAgZWxzZSBpZiAodHlwZSA9PT0gJ3N0cmluZycpXG4gICAgbGVuZ3RoID0gQnVmZmVyLmJ5dGVMZW5ndGgoc3ViamVjdCwgZW5jb2RpbmcpXG4gIGVsc2UgaWYgKHR5cGUgPT09ICdvYmplY3QnKVxuICAgIGxlbmd0aCA9IGNvZXJjZShzdWJqZWN0Lmxlbmd0aCkgLy8gYXNzdW1lIHRoYXQgb2JqZWN0IGlzIGFycmF5LWxpa2VcbiAgZWxzZVxuICAgIHRocm93IG5ldyBFcnJvcignRmlyc3QgYXJndW1lbnQgbmVlZHMgdG8gYmUgYSBudW1iZXIsIGFycmF5IG9yIHN0cmluZy4nKVxuXG4gIHZhciBidWZcbiAgaWYgKEJ1ZmZlci5fdXNlVHlwZWRBcnJheXMpIHtcbiAgICAvLyBQcmVmZXJyZWQ6IFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgYnVmID0gQnVmZmVyLl9hdWdtZW50KG5ldyBVaW50OEFycmF5KGxlbmd0aCkpXG4gIH0gZWxzZSB7XG4gICAgLy8gRmFsbGJhY2s6IFJldHVybiBUSElTIGluc3RhbmNlIG9mIEJ1ZmZlciAoY3JlYXRlZCBieSBgbmV3YClcbiAgICBidWYgPSB0aGlzXG4gICAgYnVmLmxlbmd0aCA9IGxlbmd0aFxuICAgIGJ1Zi5faXNCdWZmZXIgPSB0cnVlXG4gIH1cblxuICB2YXIgaVxuICBpZiAoQnVmZmVyLl91c2VUeXBlZEFycmF5cyAmJiB0eXBlb2Ygc3ViamVjdC5ieXRlTGVuZ3RoID09PSAnbnVtYmVyJykge1xuICAgIC8vIFNwZWVkIG9wdGltaXphdGlvbiAtLSB1c2Ugc2V0IGlmIHdlJ3JlIGNvcHlpbmcgZnJvbSBhIHR5cGVkIGFycmF5XG4gICAgYnVmLl9zZXQoc3ViamVjdClcbiAgfSBlbHNlIGlmIChpc0FycmF5aXNoKHN1YmplY3QpKSB7XG4gICAgLy8gVHJlYXQgYXJyYXktaXNoIG9iamVjdHMgYXMgYSBieXRlIGFycmF5XG4gICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoQnVmZmVyLmlzQnVmZmVyKHN1YmplY3QpKVxuICAgICAgICBidWZbaV0gPSBzdWJqZWN0LnJlYWRVSW50OChpKVxuICAgICAgZWxzZVxuICAgICAgICBidWZbaV0gPSBzdWJqZWN0W2ldXG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgYnVmLndyaXRlKHN1YmplY3QsIDAsIGVuY29kaW5nKVxuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdudW1iZXInICYmICFCdWZmZXIuX3VzZVR5cGVkQXJyYXlzICYmICFub1plcm8pIHtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGJ1ZltpXSA9IDBcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYnVmXG59XG5cbi8vIFNUQVRJQyBNRVRIT0RTXG4vLyA9PT09PT09PT09PT09PVxuXG5CdWZmZXIuaXNFbmNvZGluZyA9IGZ1bmN0aW9uIChlbmNvZGluZykge1xuICBzd2l0Y2ggKFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKSkge1xuICAgIGNhc2UgJ2hleCc6XG4gICAgY2FzZSAndXRmOCc6XG4gICAgY2FzZSAndXRmLTgnOlxuICAgIGNhc2UgJ2FzY2lpJzpcbiAgICBjYXNlICdiaW5hcnknOlxuICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgY2FzZSAncmF3JzpcbiAgICBjYXNlICd1Y3MyJzpcbiAgICBjYXNlICd1Y3MtMic6XG4gICAgY2FzZSAndXRmMTZsZSc6XG4gICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgcmV0dXJuIHRydWVcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuQnVmZmVyLmlzQnVmZmVyID0gZnVuY3Rpb24gKGIpIHtcbiAgcmV0dXJuICEhKGIgIT09IG51bGwgJiYgYiAhPT0gdW5kZWZpbmVkICYmIGIuX2lzQnVmZmVyKVxufVxuXG5CdWZmZXIuYnl0ZUxlbmd0aCA9IGZ1bmN0aW9uIChzdHIsIGVuY29kaW5nKSB7XG4gIHZhciByZXRcbiAgc3RyID0gc3RyICsgJydcbiAgc3dpdGNoIChlbmNvZGluZyB8fCAndXRmOCcpIHtcbiAgICBjYXNlICdoZXgnOlxuICAgICAgcmV0ID0gc3RyLmxlbmd0aCAvIDJcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAndXRmOCc6XG4gICAgY2FzZSAndXRmLTgnOlxuICAgICAgcmV0ID0gdXRmOFRvQnl0ZXMoc3RyKS5sZW5ndGhcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnYXNjaWknOlxuICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgY2FzZSAncmF3JzpcbiAgICAgIHJldCA9IHN0ci5sZW5ndGhcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgIHJldCA9IGJhc2U2NFRvQnl0ZXMoc3RyKS5sZW5ndGhcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAndWNzMic6XG4gICAgY2FzZSAndWNzLTInOlxuICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgIHJldCA9IHN0ci5sZW5ndGggKiAyXG4gICAgICBicmVha1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gZW5jb2RpbmcnKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuQnVmZmVyLmNvbmNhdCA9IGZ1bmN0aW9uIChsaXN0LCB0b3RhbExlbmd0aCkge1xuICBhc3NlcnQoaXNBcnJheShsaXN0KSwgJ1VzYWdlOiBCdWZmZXIuY29uY2F0KGxpc3QsIFt0b3RhbExlbmd0aF0pXFxuJyArXG4gICAgICAnbGlzdCBzaG91bGQgYmUgYW4gQXJyYXkuJylcblxuICBpZiAobGlzdC5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gbmV3IEJ1ZmZlcigwKVxuICB9IGVsc2UgaWYgKGxpc3QubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIGxpc3RbMF1cbiAgfVxuXG4gIHZhciBpXG4gIGlmICh0eXBlb2YgdG90YWxMZW5ndGggIT09ICdudW1iZXInKSB7XG4gICAgdG90YWxMZW5ndGggPSAwXG4gICAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRvdGFsTGVuZ3RoICs9IGxpc3RbaV0ubGVuZ3RoXG4gICAgfVxuICB9XG5cbiAgdmFyIGJ1ZiA9IG5ldyBCdWZmZXIodG90YWxMZW5ndGgpXG4gIHZhciBwb3MgPSAwXG4gIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldXG4gICAgaXRlbS5jb3B5KGJ1ZiwgcG9zKVxuICAgIHBvcyArPSBpdGVtLmxlbmd0aFxuICB9XG4gIHJldHVybiBidWZcbn1cblxuLy8gQlVGRkVSIElOU1RBTkNFIE1FVEhPRFNcbi8vID09PT09PT09PT09PT09PT09PT09PT09XG5cbmZ1bmN0aW9uIF9oZXhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIG9mZnNldCA9IE51bWJlcihvZmZzZXQpIHx8IDBcbiAgdmFyIHJlbWFpbmluZyA9IGJ1Zi5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPSBOdW1iZXIobGVuZ3RoKVxuICAgIGlmIChsZW5ndGggPiByZW1haW5pbmcpIHtcbiAgICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICAgIH1cbiAgfVxuXG4gIC8vIG11c3QgYmUgYW4gZXZlbiBudW1iZXIgb2YgZGlnaXRzXG4gIHZhciBzdHJMZW4gPSBzdHJpbmcubGVuZ3RoXG4gIGFzc2VydChzdHJMZW4gJSAyID09PSAwLCAnSW52YWxpZCBoZXggc3RyaW5nJylcblxuICBpZiAobGVuZ3RoID4gc3RyTGVuIC8gMikge1xuICAgIGxlbmd0aCA9IHN0ckxlbiAvIDJcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGJ5dGUgPSBwYXJzZUludChzdHJpbmcuc3Vic3RyKGkgKiAyLCAyKSwgMTYpXG4gICAgYXNzZXJ0KCFpc05hTihieXRlKSwgJ0ludmFsaWQgaGV4IHN0cmluZycpXG4gICAgYnVmW29mZnNldCArIGldID0gYnl0ZVxuICB9XG4gIEJ1ZmZlci5fY2hhcnNXcml0dGVuID0gaSAqIDJcbiAgcmV0dXJuIGlcbn1cblxuZnVuY3Rpb24gX3V0ZjhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHZhciBjaGFyc1dyaXR0ZW4gPSBCdWZmZXIuX2NoYXJzV3JpdHRlbiA9XG4gICAgYmxpdEJ1ZmZlcih1dGY4VG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxuICByZXR1cm4gY2hhcnNXcml0dGVuXG59XG5cbmZ1bmN0aW9uIF9hc2NpaVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgdmFyIGNoYXJzV3JpdHRlbiA9IEJ1ZmZlci5fY2hhcnNXcml0dGVuID1cbiAgICBibGl0QnVmZmVyKGFzY2lpVG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxuICByZXR1cm4gY2hhcnNXcml0dGVuXG59XG5cbmZ1bmN0aW9uIF9iaW5hcnlXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBfYXNjaWlXcml0ZShidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIF9iYXNlNjRXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHZhciBjaGFyc1dyaXR0ZW4gPSBCdWZmZXIuX2NoYXJzV3JpdHRlbiA9XG4gICAgYmxpdEJ1ZmZlcihiYXNlNjRUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG4gIHJldHVybiBjaGFyc1dyaXR0ZW5cbn1cblxuZnVuY3Rpb24gX3V0ZjE2bGVXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHZhciBjaGFyc1dyaXR0ZW4gPSBCdWZmZXIuX2NoYXJzV3JpdHRlbiA9XG4gICAgYmxpdEJ1ZmZlcih1dGYxNmxlVG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxuICByZXR1cm4gY2hhcnNXcml0dGVuXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAoc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCwgZW5jb2RpbmcpIHtcbiAgLy8gU3VwcG9ydCBib3RoIChzdHJpbmcsIG9mZnNldCwgbGVuZ3RoLCBlbmNvZGluZylcbiAgLy8gYW5kIHRoZSBsZWdhY3kgKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldCwgbGVuZ3RoKVxuICBpZiAoaXNGaW5pdGUob2Zmc2V0KSkge1xuICAgIGlmICghaXNGaW5pdGUobGVuZ3RoKSkge1xuICAgICAgZW5jb2RpbmcgPSBsZW5ndGhcbiAgICAgIGxlbmd0aCA9IHVuZGVmaW5lZFxuICAgIH1cbiAgfSBlbHNlIHsgIC8vIGxlZ2FjeVxuICAgIHZhciBzd2FwID0gZW5jb2RpbmdcbiAgICBlbmNvZGluZyA9IG9mZnNldFxuICAgIG9mZnNldCA9IGxlbmd0aFxuICAgIGxlbmd0aCA9IHN3YXBcbiAgfVxuXG4gIG9mZnNldCA9IE51bWJlcihvZmZzZXQpIHx8IDBcbiAgdmFyIHJlbWFpbmluZyA9IHRoaXMubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmICghbGVuZ3RoKSB7XG4gICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gIH0gZWxzZSB7XG4gICAgbGVuZ3RoID0gTnVtYmVyKGxlbmd0aClcbiAgICBpZiAobGVuZ3RoID4gcmVtYWluaW5nKSB7XG4gICAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgICB9XG4gIH1cbiAgZW5jb2RpbmcgPSBTdHJpbmcoZW5jb2RpbmcgfHwgJ3V0ZjgnKS50b0xvd2VyQ2FzZSgpXG5cbiAgdmFyIHJldFxuICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgY2FzZSAnaGV4JzpcbiAgICAgIHJldCA9IF9oZXhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuICAgICAgYnJlYWtcbiAgICBjYXNlICd1dGY4JzpcbiAgICBjYXNlICd1dGYtOCc6XG4gICAgICByZXQgPSBfdXRmOFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG4gICAgICBicmVha1xuICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgIHJldCA9IF9hc2NpaVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG4gICAgICBicmVha1xuICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICByZXQgPSBfYmluYXJ5V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgIHJldCA9IF9iYXNlNjRXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuICAgICAgYnJlYWtcbiAgICBjYXNlICd1Y3MyJzpcbiAgICBjYXNlICd1Y3MtMic6XG4gICAgY2FzZSAndXRmMTZsZSc6XG4gICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgcmV0ID0gX3V0ZjE2bGVXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuICAgICAgYnJlYWtcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIGVuY29kaW5nJylcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoZW5jb2RpbmcsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG5cbiAgZW5jb2RpbmcgPSBTdHJpbmcoZW5jb2RpbmcgfHwgJ3V0ZjgnKS50b0xvd2VyQ2FzZSgpXG4gIHN0YXJ0ID0gTnVtYmVyKHN0YXJ0KSB8fCAwXG4gIGVuZCA9IChlbmQgIT09IHVuZGVmaW5lZClcbiAgICA/IE51bWJlcihlbmQpXG4gICAgOiBlbmQgPSBzZWxmLmxlbmd0aFxuXG4gIC8vIEZhc3RwYXRoIGVtcHR5IHN0cmluZ3NcbiAgaWYgKGVuZCA9PT0gc3RhcnQpXG4gICAgcmV0dXJuICcnXG5cbiAgdmFyIHJldFxuICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgY2FzZSAnaGV4JzpcbiAgICAgIHJldCA9IF9oZXhTbGljZShzZWxmLCBzdGFydCwgZW5kKVxuICAgICAgYnJlYWtcbiAgICBjYXNlICd1dGY4JzpcbiAgICBjYXNlICd1dGYtOCc6XG4gICAgICByZXQgPSBfdXRmOFNsaWNlKHNlbGYsIHN0YXJ0LCBlbmQpXG4gICAgICBicmVha1xuICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgIHJldCA9IF9hc2NpaVNsaWNlKHNlbGYsIHN0YXJ0LCBlbmQpXG4gICAgICBicmVha1xuICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICByZXQgPSBfYmluYXJ5U2xpY2Uoc2VsZiwgc3RhcnQsIGVuZClcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgIHJldCA9IF9iYXNlNjRTbGljZShzZWxmLCBzdGFydCwgZW5kKVxuICAgICAgYnJlYWtcbiAgICBjYXNlICd1Y3MyJzpcbiAgICBjYXNlICd1Y3MtMic6XG4gICAgY2FzZSAndXRmMTZsZSc6XG4gICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgcmV0ID0gX3V0ZjE2bGVTbGljZShzZWxmLCBzdGFydCwgZW5kKVxuICAgICAgYnJlYWtcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIGVuY29kaW5nJylcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdCdWZmZXInLFxuICAgIGRhdGE6IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMuX2FyciB8fCB0aGlzLCAwKVxuICB9XG59XG5cbi8vIGNvcHkodGFyZ2V0QnVmZmVyLCB0YXJnZXRTdGFydD0wLCBzb3VyY2VTdGFydD0wLCBzb3VyY2VFbmQ9YnVmZmVyLmxlbmd0aClcbkJ1ZmZlci5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uICh0YXJnZXQsIHRhcmdldF9zdGFydCwgc3RhcnQsIGVuZCkge1xuICB2YXIgc291cmNlID0gdGhpc1xuXG4gIGlmICghc3RhcnQpIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCAmJiBlbmQgIT09IDApIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICghdGFyZ2V0X3N0YXJ0KSB0YXJnZXRfc3RhcnQgPSAwXG5cbiAgLy8gQ29weSAwIGJ5dGVzOyB3ZSdyZSBkb25lXG4gIGlmIChlbmQgPT09IHN0YXJ0KSByZXR1cm5cbiAgaWYgKHRhcmdldC5sZW5ndGggPT09IDAgfHwgc291cmNlLmxlbmd0aCA9PT0gMCkgcmV0dXJuXG5cbiAgLy8gRmF0YWwgZXJyb3IgY29uZGl0aW9uc1xuICBhc3NlcnQoZW5kID49IHN0YXJ0LCAnc291cmNlRW5kIDwgc291cmNlU3RhcnQnKVxuICBhc3NlcnQodGFyZ2V0X3N0YXJ0ID49IDAgJiYgdGFyZ2V0X3N0YXJ0IDwgdGFyZ2V0Lmxlbmd0aCxcbiAgICAgICd0YXJnZXRTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgYXNzZXJ0KHN0YXJ0ID49IDAgJiYgc3RhcnQgPCBzb3VyY2UubGVuZ3RoLCAnc291cmNlU3RhcnQgb3V0IG9mIGJvdW5kcycpXG4gIGFzc2VydChlbmQgPj0gMCAmJiBlbmQgPD0gc291cmNlLmxlbmd0aCwgJ3NvdXJjZUVuZCBvdXQgb2YgYm91bmRzJylcblxuICAvLyBBcmUgd2Ugb29iP1xuICBpZiAoZW5kID4gdGhpcy5sZW5ndGgpXG4gICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgaWYgKHRhcmdldC5sZW5ndGggLSB0YXJnZXRfc3RhcnQgPCBlbmQgLSBzdGFydClcbiAgICBlbmQgPSB0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0X3N0YXJ0ICsgc3RhcnRcblxuICB2YXIgbGVuID0gZW5kIC0gc3RhcnRcblxuICBpZiAobGVuIDwgMTAwIHx8ICFCdWZmZXIuX3VzZVR5cGVkQXJyYXlzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKylcbiAgICAgIHRhcmdldFtpICsgdGFyZ2V0X3N0YXJ0XSA9IHRoaXNbaSArIHN0YXJ0XVxuICB9IGVsc2Uge1xuICAgIHRhcmdldC5fc2V0KHRoaXMuc3ViYXJyYXkoc3RhcnQsIHN0YXJ0ICsgbGVuKSwgdGFyZ2V0X3N0YXJ0KVxuICB9XG59XG5cbmZ1bmN0aW9uIF9iYXNlNjRTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGlmIChzdGFydCA9PT0gMCAmJiBlbmQgPT09IGJ1Zi5sZW5ndGgpIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYuc2xpY2Uoc3RhcnQsIGVuZCkpXG4gIH1cbn1cblxuZnVuY3Rpb24gX3V0ZjhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciByZXMgPSAnJ1xuICB2YXIgdG1wID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSsrKSB7XG4gICAgaWYgKGJ1ZltpXSA8PSAweDdGKSB7XG4gICAgICByZXMgKz0gZGVjb2RlVXRmOENoYXIodG1wKSArIFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldKVxuICAgICAgdG1wID0gJydcbiAgICB9IGVsc2Uge1xuICAgICAgdG1wICs9ICclJyArIGJ1ZltpXS50b1N0cmluZygxNilcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzICsgZGVjb2RlVXRmOENoYXIodG1wKVxufVxuXG5mdW5jdGlvbiBfYXNjaWlTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspXG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldKVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIF9iaW5hcnlTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHJldHVybiBfYXNjaWlTbGljZShidWYsIHN0YXJ0LCBlbmQpXG59XG5cbmZ1bmN0aW9uIF9oZXhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsZW4gPSBidWYubGVuZ3RoXG5cbiAgaWYgKCFzdGFydCB8fCBzdGFydCA8IDApIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCB8fCBlbmQgPCAwIHx8IGVuZCA+IGxlbikgZW5kID0gbGVuXG5cbiAgdmFyIG91dCA9ICcnXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSsrKSB7XG4gICAgb3V0ICs9IHRvSGV4KGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gb3V0XG59XG5cbmZ1bmN0aW9uIF91dGYxNmxlU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgYnl0ZXMgPSBidWYuc2xpY2Uoc3RhcnQsIGVuZClcbiAgdmFyIHJlcyA9ICcnXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShieXRlc1tpXSArIGJ5dGVzW2krMV0gKiAyNTYpXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24gKHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIHN0YXJ0ID0gY2xhbXAoc3RhcnQsIGxlbiwgMClcbiAgZW5kID0gY2xhbXAoZW5kLCBsZW4sIGxlbilcblxuICBpZiAoQnVmZmVyLl91c2VUeXBlZEFycmF5cykge1xuICAgIHJldHVybiBCdWZmZXIuX2F1Z21lbnQodGhpcy5zdWJhcnJheShzdGFydCwgZW5kKSlcbiAgfSBlbHNlIHtcbiAgICB2YXIgc2xpY2VMZW4gPSBlbmQgLSBzdGFydFxuICAgIHZhciBuZXdCdWYgPSBuZXcgQnVmZmVyKHNsaWNlTGVuLCB1bmRlZmluZWQsIHRydWUpXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGljZUxlbjsgaSsrKSB7XG4gICAgICBuZXdCdWZbaV0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gICAgcmV0dXJuIG5ld0J1ZlxuICB9XG59XG5cbi8vIGBnZXRgIHdpbGwgYmUgcmVtb3ZlZCBpbiBOb2RlIDAuMTMrXG5CdWZmZXIucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChvZmZzZXQpIHtcbiAgY29uc29sZS5sb2coJy5nZXQoKSBpcyBkZXByZWNhdGVkLiBBY2Nlc3MgdXNpbmcgYXJyYXkgaW5kZXhlcyBpbnN0ZWFkLicpXG4gIHJldHVybiB0aGlzLnJlYWRVSW50OChvZmZzZXQpXG59XG5cbi8vIGBzZXRgIHdpbGwgYmUgcmVtb3ZlZCBpbiBOb2RlIDAuMTMrXG5CdWZmZXIucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uICh2LCBvZmZzZXQpIHtcbiAgY29uc29sZS5sb2coJy5zZXQoKSBpcyBkZXByZWNhdGVkLiBBY2Nlc3MgdXNpbmcgYXJyYXkgaW5kZXhlcyBpbnN0ZWFkLicpXG4gIHJldHVybiB0aGlzLndyaXRlVUludDgodiwgb2Zmc2V0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50OCA9IGZ1bmN0aW9uIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBhc3NlcnQob2Zmc2V0ICE9PSB1bmRlZmluZWQgJiYgb2Zmc2V0ICE9PSBudWxsLCAnbWlzc2luZyBvZmZzZXQnKVxuICAgIGFzc2VydChvZmZzZXQgPCB0aGlzLmxlbmd0aCwgJ1RyeWluZyB0byByZWFkIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbiAgfVxuXG4gIGlmIChvZmZzZXQgPj0gdGhpcy5sZW5ndGgpXG4gICAgcmV0dXJuXG5cbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XVxufVxuXG5mdW5jdGlvbiBfcmVhZFVJbnQxNiAoYnVmLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGFzc2VydCh0eXBlb2YgbGl0dGxlRW5kaWFuID09PSAnYm9vbGVhbicsICdtaXNzaW5nIG9yIGludmFsaWQgZW5kaWFuJylcbiAgICBhc3NlcnQob2Zmc2V0ICE9PSB1bmRlZmluZWQgJiYgb2Zmc2V0ICE9PSBudWxsLCAnbWlzc2luZyBvZmZzZXQnKVxuICAgIGFzc2VydChvZmZzZXQgKyAxIDwgYnVmLmxlbmd0aCwgJ1RyeWluZyB0byByZWFkIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbiAgfVxuXG4gIHZhciBsZW4gPSBidWYubGVuZ3RoXG4gIGlmIChvZmZzZXQgPj0gbGVuKVxuICAgIHJldHVyblxuXG4gIHZhciB2YWxcbiAgaWYgKGxpdHRsZUVuZGlhbikge1xuICAgIHZhbCA9IGJ1ZltvZmZzZXRdXG4gICAgaWYgKG9mZnNldCArIDEgPCBsZW4pXG4gICAgICB2YWwgfD0gYnVmW29mZnNldCArIDFdIDw8IDhcbiAgfSBlbHNlIHtcbiAgICB2YWwgPSBidWZbb2Zmc2V0XSA8PCA4XG4gICAgaWYgKG9mZnNldCArIDEgPCBsZW4pXG4gICAgICB2YWwgfD0gYnVmW29mZnNldCArIDFdXG4gIH1cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZMRSA9IGZ1bmN0aW9uIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiBfcmVhZFVJbnQxNih0aGlzLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZCRSA9IGZ1bmN0aW9uIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiBfcmVhZFVJbnQxNih0aGlzLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuZnVuY3Rpb24gX3JlYWRVSW50MzIgKGJ1Ziwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBhc3NlcnQodHlwZW9mIGxpdHRsZUVuZGlhbiA9PT0gJ2Jvb2xlYW4nLCAnbWlzc2luZyBvciBpbnZhbGlkIGVuZGlhbicpXG4gICAgYXNzZXJ0KG9mZnNldCAhPT0gdW5kZWZpbmVkICYmIG9mZnNldCAhPT0gbnVsbCwgJ21pc3Npbmcgb2Zmc2V0JylcbiAgICBhc3NlcnQob2Zmc2V0ICsgMyA8IGJ1Zi5sZW5ndGgsICdUcnlpbmcgdG8gcmVhZCBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG4gIH1cblxuICB2YXIgbGVuID0gYnVmLmxlbmd0aFxuICBpZiAob2Zmc2V0ID49IGxlbilcbiAgICByZXR1cm5cblxuICB2YXIgdmFsXG4gIGlmIChsaXR0bGVFbmRpYW4pIHtcbiAgICBpZiAob2Zmc2V0ICsgMiA8IGxlbilcbiAgICAgIHZhbCA9IGJ1ZltvZmZzZXQgKyAyXSA8PCAxNlxuICAgIGlmIChvZmZzZXQgKyAxIDwgbGVuKVxuICAgICAgdmFsIHw9IGJ1ZltvZmZzZXQgKyAxXSA8PCA4XG4gICAgdmFsIHw9IGJ1ZltvZmZzZXRdXG4gICAgaWYgKG9mZnNldCArIDMgPCBsZW4pXG4gICAgICB2YWwgPSB2YWwgKyAoYnVmW29mZnNldCArIDNdIDw8IDI0ID4+PiAwKVxuICB9IGVsc2Uge1xuICAgIGlmIChvZmZzZXQgKyAxIDwgbGVuKVxuICAgICAgdmFsID0gYnVmW29mZnNldCArIDFdIDw8IDE2XG4gICAgaWYgKG9mZnNldCArIDIgPCBsZW4pXG4gICAgICB2YWwgfD0gYnVmW29mZnNldCArIDJdIDw8IDhcbiAgICBpZiAob2Zmc2V0ICsgMyA8IGxlbilcbiAgICAgIHZhbCB8PSBidWZbb2Zmc2V0ICsgM11cbiAgICB2YWwgPSB2YWwgKyAoYnVmW29mZnNldF0gPDwgMjQgPj4+IDApXG4gIH1cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJMRSA9IGZ1bmN0aW9uIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiBfcmVhZFVJbnQzMih0aGlzLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJCRSA9IGZ1bmN0aW9uIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiBfcmVhZFVJbnQzMih0aGlzLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50OCA9IGZ1bmN0aW9uIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBhc3NlcnQob2Zmc2V0ICE9PSB1bmRlZmluZWQgJiYgb2Zmc2V0ICE9PSBudWxsLFxuICAgICAgICAnbWlzc2luZyBvZmZzZXQnKVxuICAgIGFzc2VydChvZmZzZXQgPCB0aGlzLmxlbmd0aCwgJ1RyeWluZyB0byByZWFkIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbiAgfVxuXG4gIGlmIChvZmZzZXQgPj0gdGhpcy5sZW5ndGgpXG4gICAgcmV0dXJuXG5cbiAgdmFyIG5lZyA9IHRoaXNbb2Zmc2V0XSAmIDB4ODBcbiAgaWYgKG5lZylcbiAgICByZXR1cm4gKDB4ZmYgLSB0aGlzW29mZnNldF0gKyAxKSAqIC0xXG4gIGVsc2VcbiAgICByZXR1cm4gdGhpc1tvZmZzZXRdXG59XG5cbmZ1bmN0aW9uIF9yZWFkSW50MTYgKGJ1Ziwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBhc3NlcnQodHlwZW9mIGxpdHRsZUVuZGlhbiA9PT0gJ2Jvb2xlYW4nLCAnbWlzc2luZyBvciBpbnZhbGlkIGVuZGlhbicpXG4gICAgYXNzZXJ0KG9mZnNldCAhPT0gdW5kZWZpbmVkICYmIG9mZnNldCAhPT0gbnVsbCwgJ21pc3Npbmcgb2Zmc2V0JylcbiAgICBhc3NlcnQob2Zmc2V0ICsgMSA8IGJ1Zi5sZW5ndGgsICdUcnlpbmcgdG8gcmVhZCBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG4gIH1cblxuICB2YXIgbGVuID0gYnVmLmxlbmd0aFxuICBpZiAob2Zmc2V0ID49IGxlbilcbiAgICByZXR1cm5cblxuICB2YXIgdmFsID0gX3JlYWRVSW50MTYoYnVmLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgdHJ1ZSlcbiAgdmFyIG5lZyA9IHZhbCAmIDB4ODAwMFxuICBpZiAobmVnKVxuICAgIHJldHVybiAoMHhmZmZmIC0gdmFsICsgMSkgKiAtMVxuICBlbHNlXG4gICAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkxFID0gZnVuY3Rpb24gKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIF9yZWFkSW50MTYodGhpcywgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZCRSA9IGZ1bmN0aW9uIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiBfcmVhZEludDE2KHRoaXMsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG5mdW5jdGlvbiBfcmVhZEludDMyIChidWYsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBsaXR0bGVFbmRpYW4gPT09ICdib29sZWFuJywgJ21pc3Npbmcgb3IgaW52YWxpZCBlbmRpYW4nKVxuICAgIGFzc2VydChvZmZzZXQgIT09IHVuZGVmaW5lZCAmJiBvZmZzZXQgIT09IG51bGwsICdtaXNzaW5nIG9mZnNldCcpXG4gICAgYXNzZXJ0KG9mZnNldCArIDMgPCBidWYubGVuZ3RoLCAnVHJ5aW5nIHRvIHJlYWQgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKVxuICB9XG5cbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGhcbiAgaWYgKG9mZnNldCA+PSBsZW4pXG4gICAgcmV0dXJuXG5cbiAgdmFyIHZhbCA9IF9yZWFkVUludDMyKGJ1Ziwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIHRydWUpXG4gIHZhciBuZWcgPSB2YWwgJiAweDgwMDAwMDAwXG4gIGlmIChuZWcpXG4gICAgcmV0dXJuICgweGZmZmZmZmZmIC0gdmFsICsgMSkgKiAtMVxuICBlbHNlXG4gICAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkxFID0gZnVuY3Rpb24gKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIF9yZWFkSW50MzIodGhpcywgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJCRSA9IGZ1bmN0aW9uIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiBfcmVhZEludDMyKHRoaXMsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG5mdW5jdGlvbiBfcmVhZEZsb2F0IChidWYsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBsaXR0bGVFbmRpYW4gPT09ICdib29sZWFuJywgJ21pc3Npbmcgb3IgaW52YWxpZCBlbmRpYW4nKVxuICAgIGFzc2VydChvZmZzZXQgKyAzIDwgYnVmLmxlbmd0aCwgJ1RyeWluZyB0byByZWFkIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbiAgfVxuXG4gIHJldHVybiBpZWVlNzU0LnJlYWQoYnVmLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0TEUgPSBmdW5jdGlvbiAob2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gX3JlYWRGbG9hdCh0aGlzLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdEJFID0gZnVuY3Rpb24gKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIF9yZWFkRmxvYXQodGhpcywgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbmZ1bmN0aW9uIF9yZWFkRG91YmxlIChidWYsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBsaXR0bGVFbmRpYW4gPT09ICdib29sZWFuJywgJ21pc3Npbmcgb3IgaW52YWxpZCBlbmRpYW4nKVxuICAgIGFzc2VydChvZmZzZXQgKyA3IDwgYnVmLmxlbmd0aCwgJ1RyeWluZyB0byByZWFkIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbiAgfVxuXG4gIHJldHVybiBpZWVlNzU0LnJlYWQoYnVmLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgNTIsIDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUxFID0gZnVuY3Rpb24gKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIF9yZWFkRG91YmxlKHRoaXMsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUJFID0gZnVuY3Rpb24gKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIF9yZWFkRG91YmxlKHRoaXMsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDggPSBmdW5jdGlvbiAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGFzc2VydCh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlICE9PSBudWxsLCAnbWlzc2luZyB2YWx1ZScpXG4gICAgYXNzZXJ0KG9mZnNldCAhPT0gdW5kZWZpbmVkICYmIG9mZnNldCAhPT0gbnVsbCwgJ21pc3Npbmcgb2Zmc2V0JylcbiAgICBhc3NlcnQob2Zmc2V0IDwgdGhpcy5sZW5ndGgsICd0cnlpbmcgdG8gd3JpdGUgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKVxuICAgIHZlcmlmdWludCh2YWx1ZSwgMHhmZilcbiAgfVxuXG4gIGlmIChvZmZzZXQgPj0gdGhpcy5sZW5ndGgpIHJldHVyblxuXG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlXG59XG5cbmZ1bmN0aW9uIF93cml0ZVVJbnQxNiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBhc3NlcnQodmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZSAhPT0gbnVsbCwgJ21pc3NpbmcgdmFsdWUnKVxuICAgIGFzc2VydCh0eXBlb2YgbGl0dGxlRW5kaWFuID09PSAnYm9vbGVhbicsICdtaXNzaW5nIG9yIGludmFsaWQgZW5kaWFuJylcbiAgICBhc3NlcnQob2Zmc2V0ICE9PSB1bmRlZmluZWQgJiYgb2Zmc2V0ICE9PSBudWxsLCAnbWlzc2luZyBvZmZzZXQnKVxuICAgIGFzc2VydChvZmZzZXQgKyAxIDwgYnVmLmxlbmd0aCwgJ3RyeWluZyB0byB3cml0ZSBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG4gICAgdmVyaWZ1aW50KHZhbHVlLCAweGZmZmYpXG4gIH1cblxuICB2YXIgbGVuID0gYnVmLmxlbmd0aFxuICBpZiAob2Zmc2V0ID49IGxlbilcbiAgICByZXR1cm5cblxuICBmb3IgKHZhciBpID0gMCwgaiA9IE1hdGgubWluKGxlbiAtIG9mZnNldCwgMik7IGkgPCBqOyBpKyspIHtcbiAgICBidWZbb2Zmc2V0ICsgaV0gPVxuICAgICAgICAodmFsdWUgJiAoMHhmZiA8PCAoOCAqIChsaXR0bGVFbmRpYW4gPyBpIDogMSAtIGkpKSkpID4+PlxuICAgICAgICAgICAgKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkgKiA4XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkxFID0gZnVuY3Rpb24gKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIF93cml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkJFID0gZnVuY3Rpb24gKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIF93cml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbmZ1bmN0aW9uIF93cml0ZVVJbnQzMiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBhc3NlcnQodmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZSAhPT0gbnVsbCwgJ21pc3NpbmcgdmFsdWUnKVxuICAgIGFzc2VydCh0eXBlb2YgbGl0dGxlRW5kaWFuID09PSAnYm9vbGVhbicsICdtaXNzaW5nIG9yIGludmFsaWQgZW5kaWFuJylcbiAgICBhc3NlcnQob2Zmc2V0ICE9PSB1bmRlZmluZWQgJiYgb2Zmc2V0ICE9PSBudWxsLCAnbWlzc2luZyBvZmZzZXQnKVxuICAgIGFzc2VydChvZmZzZXQgKyAzIDwgYnVmLmxlbmd0aCwgJ3RyeWluZyB0byB3cml0ZSBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG4gICAgdmVyaWZ1aW50KHZhbHVlLCAweGZmZmZmZmZmKVxuICB9XG5cbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGhcbiAgaWYgKG9mZnNldCA+PSBsZW4pXG4gICAgcmV0dXJuXG5cbiAgZm9yICh2YXIgaSA9IDAsIGogPSBNYXRoLm1pbihsZW4gLSBvZmZzZXQsIDQpOyBpIDwgajsgaSsrKSB7XG4gICAgYnVmW29mZnNldCArIGldID1cbiAgICAgICAgKHZhbHVlID4+PiAobGl0dGxlRW5kaWFuID8gaSA6IDMgLSBpKSAqIDgpICYgMHhmZlxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJMRSA9IGZ1bmN0aW9uICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICBfd3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJCRSA9IGZ1bmN0aW9uICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICBfd3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50OCA9IGZ1bmN0aW9uICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgYXNzZXJ0KHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IG51bGwsICdtaXNzaW5nIHZhbHVlJylcbiAgICBhc3NlcnQob2Zmc2V0ICE9PSB1bmRlZmluZWQgJiYgb2Zmc2V0ICE9PSBudWxsLCAnbWlzc2luZyBvZmZzZXQnKVxuICAgIGFzc2VydChvZmZzZXQgPCB0aGlzLmxlbmd0aCwgJ1RyeWluZyB0byB3cml0ZSBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG4gICAgdmVyaWZzaW50KHZhbHVlLCAweDdmLCAtMHg4MClcbiAgfVxuXG4gIGlmIChvZmZzZXQgPj0gdGhpcy5sZW5ndGgpXG4gICAgcmV0dXJuXG5cbiAgaWYgKHZhbHVlID49IDApXG4gICAgdGhpcy53cml0ZVVJbnQ4KHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KVxuICBlbHNlXG4gICAgdGhpcy53cml0ZVVJbnQ4KDB4ZmYgKyB2YWx1ZSArIDEsIG9mZnNldCwgbm9Bc3NlcnQpXG59XG5cbmZ1bmN0aW9uIF93cml0ZUludDE2IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGFzc2VydCh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlICE9PSBudWxsLCAnbWlzc2luZyB2YWx1ZScpXG4gICAgYXNzZXJ0KHR5cGVvZiBsaXR0bGVFbmRpYW4gPT09ICdib29sZWFuJywgJ21pc3Npbmcgb3IgaW52YWxpZCBlbmRpYW4nKVxuICAgIGFzc2VydChvZmZzZXQgIT09IHVuZGVmaW5lZCAmJiBvZmZzZXQgIT09IG51bGwsICdtaXNzaW5nIG9mZnNldCcpXG4gICAgYXNzZXJ0KG9mZnNldCArIDEgPCBidWYubGVuZ3RoLCAnVHJ5aW5nIHRvIHdyaXRlIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbiAgICB2ZXJpZnNpbnQodmFsdWUsIDB4N2ZmZiwgLTB4ODAwMClcbiAgfVxuXG4gIHZhciBsZW4gPSBidWYubGVuZ3RoXG4gIGlmIChvZmZzZXQgPj0gbGVuKVxuICAgIHJldHVyblxuXG4gIGlmICh2YWx1ZSA+PSAwKVxuICAgIF93cml0ZVVJbnQxNihidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpXG4gIGVsc2VcbiAgICBfd3JpdGVVSW50MTYoYnVmLCAweGZmZmYgKyB2YWx1ZSArIDEsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2TEUgPSBmdW5jdGlvbiAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgX3dyaXRlSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkJFID0gZnVuY3Rpb24gKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIF93cml0ZUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuZnVuY3Rpb24gX3dyaXRlSW50MzIgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgYXNzZXJ0KHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IG51bGwsICdtaXNzaW5nIHZhbHVlJylcbiAgICBhc3NlcnQodHlwZW9mIGxpdHRsZUVuZGlhbiA9PT0gJ2Jvb2xlYW4nLCAnbWlzc2luZyBvciBpbnZhbGlkIGVuZGlhbicpXG4gICAgYXNzZXJ0KG9mZnNldCAhPT0gdW5kZWZpbmVkICYmIG9mZnNldCAhPT0gbnVsbCwgJ21pc3Npbmcgb2Zmc2V0JylcbiAgICBhc3NlcnQob2Zmc2V0ICsgMyA8IGJ1Zi5sZW5ndGgsICdUcnlpbmcgdG8gd3JpdGUgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKVxuICAgIHZlcmlmc2ludCh2YWx1ZSwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIH1cblxuICB2YXIgbGVuID0gYnVmLmxlbmd0aFxuICBpZiAob2Zmc2V0ID49IGxlbilcbiAgICByZXR1cm5cblxuICBpZiAodmFsdWUgPj0gMClcbiAgICBfd3JpdGVVSW50MzIoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KVxuICBlbHNlXG4gICAgX3dyaXRlVUludDMyKGJ1ZiwgMHhmZmZmZmZmZiArIHZhbHVlICsgMSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJMRSA9IGZ1bmN0aW9uICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICBfd3JpdGVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyQkUgPSBmdW5jdGlvbiAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgX3dyaXRlSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG5mdW5jdGlvbiBfd3JpdGVGbG9hdCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBhc3NlcnQodmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZSAhPT0gbnVsbCwgJ21pc3NpbmcgdmFsdWUnKVxuICAgIGFzc2VydCh0eXBlb2YgbGl0dGxlRW5kaWFuID09PSAnYm9vbGVhbicsICdtaXNzaW5nIG9yIGludmFsaWQgZW5kaWFuJylcbiAgICBhc3NlcnQob2Zmc2V0ICE9PSB1bmRlZmluZWQgJiYgb2Zmc2V0ICE9PSBudWxsLCAnbWlzc2luZyBvZmZzZXQnKVxuICAgIGFzc2VydChvZmZzZXQgKyAzIDwgYnVmLmxlbmd0aCwgJ1RyeWluZyB0byB3cml0ZSBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG4gICAgdmVyaWZJRUVFNzU0KHZhbHVlLCAzLjQwMjgyMzQ2NjM4NTI4ODZlKzM4LCAtMy40MDI4MjM0NjYzODUyODg2ZSszOClcbiAgfVxuXG4gIHZhciBsZW4gPSBidWYubGVuZ3RoXG4gIGlmIChvZmZzZXQgPj0gbGVuKVxuICAgIHJldHVyblxuXG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRMRSA9IGZ1bmN0aW9uICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICBfd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0QkUgPSBmdW5jdGlvbiAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgX3dyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG5mdW5jdGlvbiBfd3JpdGVEb3VibGUgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgYXNzZXJ0KHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IG51bGwsICdtaXNzaW5nIHZhbHVlJylcbiAgICBhc3NlcnQodHlwZW9mIGxpdHRsZUVuZGlhbiA9PT0gJ2Jvb2xlYW4nLCAnbWlzc2luZyBvciBpbnZhbGlkIGVuZGlhbicpXG4gICAgYXNzZXJ0KG9mZnNldCAhPT0gdW5kZWZpbmVkICYmIG9mZnNldCAhPT0gbnVsbCwgJ21pc3Npbmcgb2Zmc2V0JylcbiAgICBhc3NlcnQob2Zmc2V0ICsgNyA8IGJ1Zi5sZW5ndGgsXG4gICAgICAgICdUcnlpbmcgdG8gd3JpdGUgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKVxuICAgIHZlcmlmSUVFRTc1NCh2YWx1ZSwgMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgsIC0xLjc5NzY5MzEzNDg2MjMxNTdFKzMwOClcbiAgfVxuXG4gIHZhciBsZW4gPSBidWYubGVuZ3RoXG4gIGlmIChvZmZzZXQgPj0gbGVuKVxuICAgIHJldHVyblxuXG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDUyLCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlTEUgPSBmdW5jdGlvbiAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgX3dyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlQkUgPSBmdW5jdGlvbiAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgX3dyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuLy8gZmlsbCh2YWx1ZSwgc3RhcnQ9MCwgZW5kPWJ1ZmZlci5sZW5ndGgpXG5CdWZmZXIucHJvdG90eXBlLmZpbGwgPSBmdW5jdGlvbiAodmFsdWUsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKCF2YWx1ZSkgdmFsdWUgPSAwXG4gIGlmICghc3RhcnQpIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCkgZW5kID0gdGhpcy5sZW5ndGhcblxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHZhbHVlID0gdmFsdWUuY2hhckNvZGVBdCgwKVxuICB9XG5cbiAgYXNzZXJ0KHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgIWlzTmFOKHZhbHVlKSwgJ3ZhbHVlIGlzIG5vdCBhIG51bWJlcicpXG4gIGFzc2VydChlbmQgPj0gc3RhcnQsICdlbmQgPCBzdGFydCcpXG5cbiAgLy8gRmlsbCAwIGJ5dGVzOyB3ZSdyZSBkb25lXG4gIGlmIChlbmQgPT09IHN0YXJ0KSByZXR1cm5cbiAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm5cblxuICBhc3NlcnQoc3RhcnQgPj0gMCAmJiBzdGFydCA8IHRoaXMubGVuZ3RoLCAnc3RhcnQgb3V0IG9mIGJvdW5kcycpXG4gIGFzc2VydChlbmQgPj0gMCAmJiBlbmQgPD0gdGhpcy5sZW5ndGgsICdlbmQgb3V0IG9mIGJvdW5kcycpXG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspIHtcbiAgICB0aGlzW2ldID0gdmFsdWVcbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBvdXQgPSBbXVxuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIG91dFtpXSA9IHRvSGV4KHRoaXNbaV0pXG4gICAgaWYgKGkgPT09IGV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVMpIHtcbiAgICAgIG91dFtpICsgMV0gPSAnLi4uJ1xuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cbiAgcmV0dXJuICc8QnVmZmVyICcgKyBvdXQuam9pbignICcpICsgJz4nXG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBgQXJyYXlCdWZmZXJgIHdpdGggdGhlICpjb3BpZWQqIG1lbW9yeSBvZiB0aGUgYnVmZmVyIGluc3RhbmNlLlxuICogQWRkZWQgaW4gTm9kZSAwLjEyLiBPbmx5IGF2YWlsYWJsZSBpbiBicm93c2VycyB0aGF0IHN1cHBvcnQgQXJyYXlCdWZmZXIuXG4gKi9cbkJ1ZmZlci5wcm90b3R5cGUudG9BcnJheUJ1ZmZlciA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJykge1xuICAgIGlmIChCdWZmZXIuX3VzZVR5cGVkQXJyYXlzKSB7XG4gICAgICByZXR1cm4gKG5ldyBCdWZmZXIodGhpcykpLmJ1ZmZlclxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYnVmID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5sZW5ndGgpXG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gYnVmLmxlbmd0aDsgaSA8IGxlbjsgaSArPSAxKVxuICAgICAgICBidWZbaV0gPSB0aGlzW2ldXG4gICAgICByZXR1cm4gYnVmLmJ1ZmZlclxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0J1ZmZlci50b0FycmF5QnVmZmVyIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBicm93c2VyJylcbiAgfVxufVxuXG4vLyBIRUxQRVIgRlVOQ1RJT05TXG4vLyA9PT09PT09PT09PT09PT09XG5cbmZ1bmN0aW9uIHN0cmluZ3RyaW0gKHN0cikge1xuICBpZiAoc3RyLnRyaW0pIHJldHVybiBzdHIudHJpbSgpXG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgJycpXG59XG5cbnZhciBCUCA9IEJ1ZmZlci5wcm90b3R5cGVcblxuLyoqXG4gKiBBdWdtZW50IGEgVWludDhBcnJheSAqaW5zdGFuY2UqIChub3QgdGhlIFVpbnQ4QXJyYXkgY2xhc3MhKSB3aXRoIEJ1ZmZlciBtZXRob2RzXG4gKi9cbkJ1ZmZlci5fYXVnbWVudCA9IGZ1bmN0aW9uIChhcnIpIHtcbiAgYXJyLl9pc0J1ZmZlciA9IHRydWVcblxuICAvLyBzYXZlIHJlZmVyZW5jZSB0byBvcmlnaW5hbCBVaW50OEFycmF5IGdldC9zZXQgbWV0aG9kcyBiZWZvcmUgb3ZlcndyaXRpbmdcbiAgYXJyLl9nZXQgPSBhcnIuZ2V0XG4gIGFyci5fc2V0ID0gYXJyLnNldFxuXG4gIC8vIGRlcHJlY2F0ZWQsIHdpbGwgYmUgcmVtb3ZlZCBpbiBub2RlIDAuMTMrXG4gIGFyci5nZXQgPSBCUC5nZXRcbiAgYXJyLnNldCA9IEJQLnNldFxuXG4gIGFyci53cml0ZSA9IEJQLndyaXRlXG4gIGFyci50b1N0cmluZyA9IEJQLnRvU3RyaW5nXG4gIGFyci50b0xvY2FsZVN0cmluZyA9IEJQLnRvU3RyaW5nXG4gIGFyci50b0pTT04gPSBCUC50b0pTT05cbiAgYXJyLmNvcHkgPSBCUC5jb3B5XG4gIGFyci5zbGljZSA9IEJQLnNsaWNlXG4gIGFyci5yZWFkVUludDggPSBCUC5yZWFkVUludDhcbiAgYXJyLnJlYWRVSW50MTZMRSA9IEJQLnJlYWRVSW50MTZMRVxuICBhcnIucmVhZFVJbnQxNkJFID0gQlAucmVhZFVJbnQxNkJFXG4gIGFyci5yZWFkVUludDMyTEUgPSBCUC5yZWFkVUludDMyTEVcbiAgYXJyLnJlYWRVSW50MzJCRSA9IEJQLnJlYWRVSW50MzJCRVxuICBhcnIucmVhZEludDggPSBCUC5yZWFkSW50OFxuICBhcnIucmVhZEludDE2TEUgPSBCUC5yZWFkSW50MTZMRVxuICBhcnIucmVhZEludDE2QkUgPSBCUC5yZWFkSW50MTZCRVxuICBhcnIucmVhZEludDMyTEUgPSBCUC5yZWFkSW50MzJMRVxuICBhcnIucmVhZEludDMyQkUgPSBCUC5yZWFkSW50MzJCRVxuICBhcnIucmVhZEZsb2F0TEUgPSBCUC5yZWFkRmxvYXRMRVxuICBhcnIucmVhZEZsb2F0QkUgPSBCUC5yZWFkRmxvYXRCRVxuICBhcnIucmVhZERvdWJsZUxFID0gQlAucmVhZERvdWJsZUxFXG4gIGFyci5yZWFkRG91YmxlQkUgPSBCUC5yZWFkRG91YmxlQkVcbiAgYXJyLndyaXRlVUludDggPSBCUC53cml0ZVVJbnQ4XG4gIGFyci53cml0ZVVJbnQxNkxFID0gQlAud3JpdGVVSW50MTZMRVxuICBhcnIud3JpdGVVSW50MTZCRSA9IEJQLndyaXRlVUludDE2QkVcbiAgYXJyLndyaXRlVUludDMyTEUgPSBCUC53cml0ZVVJbnQzMkxFXG4gIGFyci53cml0ZVVJbnQzMkJFID0gQlAud3JpdGVVSW50MzJCRVxuICBhcnIud3JpdGVJbnQ4ID0gQlAud3JpdGVJbnQ4XG4gIGFyci53cml0ZUludDE2TEUgPSBCUC53cml0ZUludDE2TEVcbiAgYXJyLndyaXRlSW50MTZCRSA9IEJQLndyaXRlSW50MTZCRVxuICBhcnIud3JpdGVJbnQzMkxFID0gQlAud3JpdGVJbnQzMkxFXG4gIGFyci53cml0ZUludDMyQkUgPSBCUC53cml0ZUludDMyQkVcbiAgYXJyLndyaXRlRmxvYXRMRSA9IEJQLndyaXRlRmxvYXRMRVxuICBhcnIud3JpdGVGbG9hdEJFID0gQlAud3JpdGVGbG9hdEJFXG4gIGFyci53cml0ZURvdWJsZUxFID0gQlAud3JpdGVEb3VibGVMRVxuICBhcnIud3JpdGVEb3VibGVCRSA9IEJQLndyaXRlRG91YmxlQkVcbiAgYXJyLmZpbGwgPSBCUC5maWxsXG4gIGFyci5pbnNwZWN0ID0gQlAuaW5zcGVjdFxuICBhcnIudG9BcnJheUJ1ZmZlciA9IEJQLnRvQXJyYXlCdWZmZXJcblxuICByZXR1cm4gYXJyXG59XG5cbi8vIHNsaWNlKHN0YXJ0LCBlbmQpXG5mdW5jdGlvbiBjbGFtcCAoaW5kZXgsIGxlbiwgZGVmYXVsdFZhbHVlKSB7XG4gIGlmICh0eXBlb2YgaW5kZXggIT09ICdudW1iZXInKSByZXR1cm4gZGVmYXVsdFZhbHVlXG4gIGluZGV4ID0gfn5pbmRleDsgIC8vIENvZXJjZSB0byBpbnRlZ2VyLlxuICBpZiAoaW5kZXggPj0gbGVuKSByZXR1cm4gbGVuXG4gIGlmIChpbmRleCA+PSAwKSByZXR1cm4gaW5kZXhcbiAgaW5kZXggKz0gbGVuXG4gIGlmIChpbmRleCA+PSAwKSByZXR1cm4gaW5kZXhcbiAgcmV0dXJuIDBcbn1cblxuZnVuY3Rpb24gY29lcmNlIChsZW5ndGgpIHtcbiAgLy8gQ29lcmNlIGxlbmd0aCB0byBhIG51bWJlciAocG9zc2libHkgTmFOKSwgcm91bmQgdXBcbiAgLy8gaW4gY2FzZSBpdCdzIGZyYWN0aW9uYWwgKGUuZy4gMTIzLjQ1NikgdGhlbiBkbyBhXG4gIC8vIGRvdWJsZSBuZWdhdGUgdG8gY29lcmNlIGEgTmFOIHRvIDAuIEVhc3ksIHJpZ2h0P1xuICBsZW5ndGggPSB+fk1hdGguY2VpbCgrbGVuZ3RoKVxuICByZXR1cm4gbGVuZ3RoIDwgMCA/IDAgOiBsZW5ndGhcbn1cblxuZnVuY3Rpb24gaXNBcnJheSAoc3ViamVjdCkge1xuICByZXR1cm4gKEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKHN1YmplY3QpIHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHN1YmplY3QpID09PSAnW29iamVjdCBBcnJheV0nXG4gIH0pKHN1YmplY3QpXG59XG5cbmZ1bmN0aW9uIGlzQXJyYXlpc2ggKHN1YmplY3QpIHtcbiAgcmV0dXJuIGlzQXJyYXkoc3ViamVjdCkgfHwgQnVmZmVyLmlzQnVmZmVyKHN1YmplY3QpIHx8XG4gICAgICBzdWJqZWN0ICYmIHR5cGVvZiBzdWJqZWN0ID09PSAnb2JqZWN0JyAmJlxuICAgICAgdHlwZW9mIHN1YmplY3QubGVuZ3RoID09PSAnbnVtYmVyJ1xufVxuXG5mdW5jdGlvbiB0b0hleCAobikge1xuICBpZiAobiA8IDE2KSByZXR1cm4gJzAnICsgbi50b1N0cmluZygxNilcbiAgcmV0dXJuIG4udG9TdHJpbmcoMTYpXG59XG5cbmZ1bmN0aW9uIHV0ZjhUb0J5dGVzIChzdHIpIHtcbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGIgPSBzdHIuY2hhckNvZGVBdChpKVxuICAgIGlmIChiIDw9IDB4N0YpXG4gICAgICBieXRlQXJyYXkucHVzaChzdHIuY2hhckNvZGVBdChpKSlcbiAgICBlbHNlIHtcbiAgICAgIHZhciBzdGFydCA9IGlcbiAgICAgIGlmIChiID49IDB4RDgwMCAmJiBiIDw9IDB4REZGRikgaSsrXG4gICAgICB2YXIgaCA9IGVuY29kZVVSSUNvbXBvbmVudChzdHIuc2xpY2Uoc3RhcnQsIGkrMSkpLnN1YnN0cigxKS5zcGxpdCgnJScpXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGgubGVuZ3RoOyBqKyspXG4gICAgICAgIGJ5dGVBcnJheS5wdXNoKHBhcnNlSW50KGhbal0sIDE2KSlcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiBhc2NpaVRvQnl0ZXMgKHN0cikge1xuICB2YXIgYnl0ZUFycmF5ID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICAvLyBOb2RlJ3MgY29kZSBzZWVtcyB0byBiZSBkb2luZyB0aGlzIGFuZCBub3QgJiAweDdGLi5cbiAgICBieXRlQXJyYXkucHVzaChzdHIuY2hhckNvZGVBdChpKSAmIDB4RkYpXG4gIH1cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiB1dGYxNmxlVG9CeXRlcyAoc3RyKSB7XG4gIHZhciBjLCBoaSwgbG9cbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgYyA9IHN0ci5jaGFyQ29kZUF0KGkpXG4gICAgaGkgPSBjID4+IDhcbiAgICBsbyA9IGMgJSAyNTZcbiAgICBieXRlQXJyYXkucHVzaChsbylcbiAgICBieXRlQXJyYXkucHVzaChoaSlcbiAgfVxuXG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gYmFzZTY0VG9CeXRlcyAoc3RyKSB7XG4gIHJldHVybiBiYXNlNjQudG9CeXRlQXJyYXkoc3RyKVxufVxuXG5mdW5jdGlvbiBibGl0QnVmZmVyIChzcmMsIGRzdCwgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgdmFyIHBvc1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKChpICsgb2Zmc2V0ID49IGRzdC5sZW5ndGgpIHx8IChpID49IHNyYy5sZW5ndGgpKVxuICAgICAgYnJlYWtcbiAgICBkc3RbaSArIG9mZnNldF0gPSBzcmNbaV1cbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiBkZWNvZGVVdGY4Q2hhciAoc3RyKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChzdHIpXG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKDB4RkZGRCkgLy8gVVRGIDggaW52YWxpZCBjaGFyXG4gIH1cbn1cblxuLypcbiAqIFdlIGhhdmUgdG8gbWFrZSBzdXJlIHRoYXQgdGhlIHZhbHVlIGlzIGEgdmFsaWQgaW50ZWdlci4gVGhpcyBtZWFucyB0aGF0IGl0XG4gKiBpcyBub24tbmVnYXRpdmUuIEl0IGhhcyBubyBmcmFjdGlvbmFsIGNvbXBvbmVudCBhbmQgdGhhdCBpdCBkb2VzIG5vdFxuICogZXhjZWVkIHRoZSBtYXhpbXVtIGFsbG93ZWQgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIHZlcmlmdWludCAodmFsdWUsIG1heCkge1xuICBhc3NlcnQodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJywgJ2Nhbm5vdCB3cml0ZSBhIG5vbi1udW1iZXIgYXMgYSBudW1iZXInKVxuICBhc3NlcnQodmFsdWUgPj0gMCwgJ3NwZWNpZmllZCBhIG5lZ2F0aXZlIHZhbHVlIGZvciB3cml0aW5nIGFuIHVuc2lnbmVkIHZhbHVlJylcbiAgYXNzZXJ0KHZhbHVlIDw9IG1heCwgJ3ZhbHVlIGlzIGxhcmdlciB0aGFuIG1heGltdW0gdmFsdWUgZm9yIHR5cGUnKVxuICBhc3NlcnQoTWF0aC5mbG9vcih2YWx1ZSkgPT09IHZhbHVlLCAndmFsdWUgaGFzIGEgZnJhY3Rpb25hbCBjb21wb25lbnQnKVxufVxuXG5mdW5jdGlvbiB2ZXJpZnNpbnQgKHZhbHVlLCBtYXgsIG1pbikge1xuICBhc3NlcnQodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJywgJ2Nhbm5vdCB3cml0ZSBhIG5vbi1udW1iZXIgYXMgYSBudW1iZXInKVxuICBhc3NlcnQodmFsdWUgPD0gbWF4LCAndmFsdWUgbGFyZ2VyIHRoYW4gbWF4aW11bSBhbGxvd2VkIHZhbHVlJylcbiAgYXNzZXJ0KHZhbHVlID49IG1pbiwgJ3ZhbHVlIHNtYWxsZXIgdGhhbiBtaW5pbXVtIGFsbG93ZWQgdmFsdWUnKVxuICBhc3NlcnQoTWF0aC5mbG9vcih2YWx1ZSkgPT09IHZhbHVlLCAndmFsdWUgaGFzIGEgZnJhY3Rpb25hbCBjb21wb25lbnQnKVxufVxuXG5mdW5jdGlvbiB2ZXJpZklFRUU3NTQgKHZhbHVlLCBtYXgsIG1pbikge1xuICBhc3NlcnQodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJywgJ2Nhbm5vdCB3cml0ZSBhIG5vbi1udW1iZXIgYXMgYSBudW1iZXInKVxuICBhc3NlcnQodmFsdWUgPD0gbWF4LCAndmFsdWUgbGFyZ2VyIHRoYW4gbWF4aW11bSBhbGxvd2VkIHZhbHVlJylcbiAgYXNzZXJ0KHZhbHVlID49IG1pbiwgJ3ZhbHVlIHNtYWxsZXIgdGhhbiBtaW5pbXVtIGFsbG93ZWQgdmFsdWUnKVxufVxuXG5mdW5jdGlvbiBhc3NlcnQgKHRlc3QsIG1lc3NhZ2UpIHtcbiAgaWYgKCF0ZXN0KSB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSB8fCAnRmFpbGVkIGFzc2VydGlvbicpXG59XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiZS9VKzk3XCIpLHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcixhcmd1bWVudHNbM10sYXJndW1lbnRzWzRdLGFyZ3VtZW50c1s1XSxhcmd1bWVudHNbNl0sXCIvLi5cXFxcLi5cXFxcbm9kZV9tb2R1bGVzXFxcXGJ1ZmZlclxcXFxpbmRleC5qc1wiLFwiLy4uXFxcXC4uXFxcXG5vZGVfbW9kdWxlc1xcXFxidWZmZXJcIilcbn0se1wiYmFzZTY0LWpzXCI6MSxcImJ1ZmZlclwiOjIsXCJlL1UrOTdcIjo0LFwiaWVlZTc1NFwiOjN9XSwzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwsQnVmZmVyLF9fYXJndW1lbnQwLF9fYXJndW1lbnQxLF9fYXJndW1lbnQyLF9fYXJndW1lbnQzLF9fZmlsZW5hbWUsX19kaXJuYW1lKXtcbmV4cG9ydHMucmVhZCA9IGZ1bmN0aW9uIChidWZmZXIsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtXG4gIHZhciBlTGVuID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgbkJpdHMgPSAtN1xuICB2YXIgaSA9IGlzTEUgPyAobkJ5dGVzIC0gMSkgOiAwXG4gIHZhciBkID0gaXNMRSA/IC0xIDogMVxuICB2YXIgcyA9IGJ1ZmZlcltvZmZzZXQgKyBpXVxuXG4gIGkgKz0gZFxuXG4gIGUgPSBzICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIHMgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IGVMZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgZSA9IGUgKiAyNTYgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBtID0gZSAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBlID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBtTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSBtICogMjU2ICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgaWYgKGUgPT09IDApIHtcbiAgICBlID0gMSAtIGVCaWFzXG4gIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xuICAgIHJldHVybiBtID8gTmFOIDogKChzID8gLTEgOiAxKSAqIEluZmluaXR5KVxuICB9IGVsc2Uge1xuICAgIG0gPSBtICsgTWF0aC5wb3coMiwgbUxlbilcbiAgICBlID0gZSAtIGVCaWFzXG4gIH1cbiAgcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBNYXRoLnBvdygyLCBlIC0gbUxlbilcbn1cblxuZXhwb3J0cy53cml0ZSA9IGZ1bmN0aW9uIChidWZmZXIsIHZhbHVlLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbSwgY1xuICB2YXIgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIHJ0ID0gKG1MZW4gPT09IDIzID8gTWF0aC5wb3coMiwgLTI0KSAtIE1hdGgucG93KDIsIC03NykgOiAwKVxuICB2YXIgaSA9IGlzTEUgPyAwIDogKG5CeXRlcyAtIDEpXG4gIHZhciBkID0gaXNMRSA/IDEgOiAtMVxuICB2YXIgcyA9IHZhbHVlIDwgMCB8fCAodmFsdWUgPT09IDAgJiYgMSAvIHZhbHVlIDwgMCkgPyAxIDogMFxuXG4gIHZhbHVlID0gTWF0aC5hYnModmFsdWUpXG5cbiAgaWYgKGlzTmFOKHZhbHVlKSB8fCB2YWx1ZSA9PT0gSW5maW5pdHkpIHtcbiAgICBtID0gaXNOYU4odmFsdWUpID8gMSA6IDBcbiAgICBlID0gZU1heFxuICB9IGVsc2Uge1xuICAgIGUgPSBNYXRoLmZsb29yKE1hdGgubG9nKHZhbHVlKSAvIE1hdGguTE4yKVxuICAgIGlmICh2YWx1ZSAqIChjID0gTWF0aC5wb3coMiwgLWUpKSA8IDEpIHtcbiAgICAgIGUtLVxuICAgICAgYyAqPSAyXG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgdmFsdWUgKz0gcnQgLyBjXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlICs9IHJ0ICogTWF0aC5wb3coMiwgMSAtIGVCaWFzKVxuICAgIH1cbiAgICBpZiAodmFsdWUgKiBjID49IDIpIHtcbiAgICAgIGUrK1xuICAgICAgYyAvPSAyXG4gICAgfVxuXG4gICAgaWYgKGUgKyBlQmlhcyA+PSBlTWF4KSB7XG4gICAgICBtID0gMFxuICAgICAgZSA9IGVNYXhcbiAgICB9IGVsc2UgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtID0gKHZhbHVlICogYyAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSBlICsgZUJpYXNcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogTWF0aC5wb3coMiwgZUJpYXMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gMFxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IG0gJiAweGZmLCBpICs9IGQsIG0gLz0gMjU2LCBtTGVuIC09IDgpIHt9XG5cbiAgZSA9IChlIDw8IG1MZW4pIHwgbVxuICBlTGVuICs9IG1MZW5cbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBlICYgMHhmZiwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KSB7fVxuXG4gIGJ1ZmZlcltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyOFxufVxuXG59KS5jYWxsKHRoaXMscmVxdWlyZShcImUvVSs5N1wiKSx0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30scmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIsYXJndW1lbnRzWzNdLGFyZ3VtZW50c1s0XSxhcmd1bWVudHNbNV0sYXJndW1lbnRzWzZdLFwiLy4uXFxcXC4uXFxcXG5vZGVfbW9kdWxlc1xcXFxpZWVlNzU0XFxcXGluZGV4LmpzXCIsXCIvLi5cXFxcLi5cXFxcbm9kZV9tb2R1bGVzXFxcXGllZWU3NTRcIilcbn0se1wiYnVmZmVyXCI6MixcImUvVSs5N1wiOjR9XSw0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwsQnVmZmVyLF9fYXJndW1lbnQwLF9fYXJndW1lbnQxLF9fYXJndW1lbnQyLF9fYXJndW1lbnQzLF9fZmlsZW5hbWUsX19kaXJuYW1lKXtcbi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxuXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbnByb2Nlc3MubmV4dFRpY2sgPSAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBjYW5TZXRJbW1lZGlhdGUgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJ1xuICAgICYmIHdpbmRvdy5zZXRJbW1lZGlhdGU7XG4gICAgdmFyIGNhblBvc3QgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJ1xuICAgICYmIHdpbmRvdy5wb3N0TWVzc2FnZSAmJiB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lclxuICAgIDtcblxuICAgIGlmIChjYW5TZXRJbW1lZGlhdGUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChmKSB7IHJldHVybiB3aW5kb3cuc2V0SW1tZWRpYXRlKGYpIH07XG4gICAgfVxuXG4gICAgaWYgKGNhblBvc3QpIHtcbiAgICAgICAgdmFyIHF1ZXVlID0gW107XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICB2YXIgc291cmNlID0gZXYuc291cmNlO1xuICAgICAgICAgICAgaWYgKChzb3VyY2UgPT09IHdpbmRvdyB8fCBzb3VyY2UgPT09IG51bGwpICYmIGV2LmRhdGEgPT09ICdwcm9jZXNzLXRpY2snKSB7XG4gICAgICAgICAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgaWYgKHF1ZXVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZuID0gcXVldWUuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgZm4oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHRydWUpO1xuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBuZXh0VGljayhmbikge1xuICAgICAgICAgICAgcXVldWUucHVzaChmbik7XG4gICAgICAgICAgICB3aW5kb3cucG9zdE1lc3NhZ2UoJ3Byb2Nlc3MtdGljaycsICcqJyk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5leHRUaWNrKGZuKSB7XG4gICAgICAgIHNldFRpbWVvdXQoZm4sIDApO1xuICAgIH07XG59KSgpO1xuXG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn1cblxuLy8gVE9ETyhzaHR5bG1hbilcbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZShcImUvVSs5N1wiKSx0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30scmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIsYXJndW1lbnRzWzNdLGFyZ3VtZW50c1s0XSxhcmd1bWVudHNbNV0sYXJndW1lbnRzWzZdLFwiLy4uXFxcXC4uXFxcXG5vZGVfbW9kdWxlc1xcXFxwcm9jZXNzXFxcXGJyb3dzZXIuanNcIixcIi8uLlxcXFwuLlxcXFxub2RlX21vZHVsZXNcXFxccHJvY2Vzc1wiKVxufSx7XCJidWZmZXJcIjoyLFwiZS9VKzk3XCI6NH1dLDU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCxCdWZmZXIsX19hcmd1bWVudDAsX19hcmd1bWVudDEsX19hcmd1bWVudDIsX19hcmd1bWVudDMsX19maWxlbmFtZSxfX2Rpcm5hbWUpe1xuXCJ1c2Ugc3RyaWN0XCI7XG4vKlxyXG4gICAgU2hhcGVcclxuICAgICAgICBSZWN0YW5nbGVcclxuICAgICAgICAgICAgU3F1YXJlXHJcbiAgICAgICAgVHJpYW5nbGVcclxuKi9cblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgU2hhcGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2hhcGUoKSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTaGFwZSk7XG5cbiAgICAgICAgdGhpcy5fbmFtZSA9ICcnO1xuXG4gICAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBzaWRlTGVuZ3RocyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICAgICAgc2lkZUxlbmd0aHNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9zaWRlTGVuZ3RocyA9IHNpZGVMZW5ndGhzO1xuICAgIH1cblxuICAgIC8vIG1ldGhvZHNcblxuXG4gICAgX2NyZWF0ZUNsYXNzKFNoYXBlLCBbe1xuICAgICAgICBrZXk6ICdzYXlIZWxsbycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzYXlIZWxsbygpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZpcnN0TmFtZSArICcgJyArIHRoaXMubGFzdE5hbWU7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2dldFBlcmltZXRlcicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRQZXJpbWV0ZXIoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc2lkZUxlbmd0aHMucmVkdWNlKGZ1bmN0aW9uIChwcmV2VmFsLCB2YWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJldlZhbCArIHZhbDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdnZXRBcmVhJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldEFyZWEoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc2lkZUxlbmd0aHNbMF0gKiB0aGlzLl9zaWRlTGVuZ3Roc1sxXTtcbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBTaGFwZTtcbn0oKTtcblxudmFyIFJlY3RhbmdsZSA9IGZ1bmN0aW9uIChfU2hhcGUpIHtcbiAgICBfaW5oZXJpdHMoUmVjdGFuZ2xlLCBfU2hhcGUpO1xuXG4gICAgZnVuY3Rpb24gUmVjdGFuZ2xlKCkge1xuICAgICAgICB2YXIgX3JlZjtcblxuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUmVjdGFuZ2xlKTtcblxuICAgICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIHNpZGVMZW5ndGhzID0gQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgICAgIHNpZGVMZW5ndGhzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX3JlZiA9IFJlY3RhbmdsZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFJlY3RhbmdsZSkpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChzaWRlTGVuZ3RocykpKTtcblxuICAgICAgICBfdGhpcy5fbmFtZSA9ICdQcm9zdG9rxIV0JztcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIHJldHVybiBSZWN0YW5nbGU7XG59KFNoYXBlKTtcblxudmFyIFNxdWFyZSA9IGZ1bmN0aW9uIChfUmVjdGFuZ2xlKSB7XG4gICAgX2luaGVyaXRzKFNxdWFyZSwgX1JlY3RhbmdsZSk7XG5cbiAgICBmdW5jdGlvbiBTcXVhcmUoKSB7XG4gICAgICAgIHZhciBfcmVmMjtcblxuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3F1YXJlKTtcblxuICAgICAgICBmb3IgKHZhciBfbGVuMyA9IGFyZ3VtZW50cy5sZW5ndGgsIHNpZGVMZW5ndGhzID0gQXJyYXkoX2xlbjMpLCBfa2V5MyA9IDA7IF9rZXkzIDwgX2xlbjM7IF9rZXkzKyspIHtcbiAgICAgICAgICAgIHNpZGVMZW5ndGhzW19rZXkzXSA9IGFyZ3VtZW50c1tfa2V5M107XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgX3RoaXMyID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9yZWYyID0gU3F1YXJlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoU3F1YXJlKSkuY2FsbC5hcHBseShfcmVmMiwgW3RoaXNdLmNvbmNhdChzaWRlTGVuZ3RocykpKTtcblxuICAgICAgICBfdGhpczIuX25hbWUgPSAnS3dhZHJhdCc7XG4gICAgICAgIHJldHVybiBfdGhpczI7XG4gICAgfVxuXG4gICAgcmV0dXJuIFNxdWFyZTtcbn0oUmVjdGFuZ2xlKTtcblxudmFyIFRyaWFuZ2xlID0gZnVuY3Rpb24gKF9TaGFwZTIpIHtcbiAgICBfaW5oZXJpdHMoVHJpYW5nbGUsIF9TaGFwZTIpO1xuXG4gICAgZnVuY3Rpb24gVHJpYW5nbGUoKSB7XG4gICAgICAgIHZhciBfcmVmMztcblxuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVHJpYW5nbGUpO1xuXG4gICAgICAgIGZvciAodmFyIF9sZW40ID0gYXJndW1lbnRzLmxlbmd0aCwgc2lkZUxlbmd0aHMgPSBBcnJheShfbGVuNCksIF9rZXk0ID0gMDsgX2tleTQgPCBfbGVuNDsgX2tleTQrKykge1xuICAgICAgICAgICAgc2lkZUxlbmd0aHNbX2tleTRdID0gYXJndW1lbnRzW19rZXk0XTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBfdGhpczMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX3JlZjMgPSBUcmlhbmdsZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFRyaWFuZ2xlKSkuY2FsbC5hcHBseShfcmVmMywgW3RoaXNdLmNvbmNhdChzaWRlTGVuZ3RocykpKTtcblxuICAgICAgICBfdGhpczMuX25hbWUgPSAnVHLDs2prxIV0JztcbiAgICAgICAgcmV0dXJuIF90aGlzMztcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoVHJpYW5nbGUsIFt7XG4gICAgICAgIGtleTogJ2dldEFyZWEnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0QXJlYSgpIHtcbiAgICAgICAgICAgIHZhciBhID0gdGhpcy5fc2lkZUxlbmd0aHNbMF07XG5cbiAgICAgICAgICAgIHJldHVybiArKGEgKiBhICogTWF0aC5zcXJ0KDMpIC8gNCkudG9GaXhlZCgyKTtcbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBUcmlhbmdsZTtcbn0oU2hhcGUpO1xuXG52YXIgcmVjMSA9IG5ldyBSZWN0YW5nbGUoMjAsIDQwKTtcbnZhciBzcXIxID0gbmV3IFNxdWFyZSgyMCk7XG52YXIgdHIxID0gbmV3IFRyaWFuZ2xlKDIwKTtcbn0pLmNhbGwodGhpcyxyZXF1aXJlKFwiZS9VKzk3XCIpLHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSxyZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcixhcmd1bWVudHNbM10sYXJndW1lbnRzWzRdLGFyZ3VtZW50c1s1XSxhcmd1bWVudHNbNl0sXCIvZmFrZV83YjljZTVmNi5qc1wiLFwiL1wiKVxufSx7XCJidWZmZXJcIjoyLFwiZS9VKzk3XCI6NH1dfSx7fSxbNV0pXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWtRNlhGeFRWRkpQVGxsY1hIWm9jMXhjVUhKdmFtVmpkSE5RY21sMlhGeEJjbWxqYUhSbGEzUjFjbUZOVmtOY1hFOVBVRnhjYm05a1pWOXRiMlIxYkdWelhGeGljbTkzYzJWeUxYQmhZMnRjWEY5d2NtVnNkV1JsTG1weklpd2lSRG92VTFSU1QwNVpMM1pvY3k5UWNtOXFaV04wYzFCeWFYWXZRWEpwWTJoMFpXdDBkWEpoVFZaREwwOVBVQzl1YjJSbFgyMXZaSFZzWlhNdlltRnpaVFkwTFdwekwyeHBZaTlpTmpRdWFuTWlMQ0pFT2k5VFZGSlBUbGt2ZG1oekwxQnliMnBsWTNSelVISnBkaTlCY21samFIUmxhM1IxY21GTlZrTXZUMDlRTDI1dlpHVmZiVzlrZFd4bGN5OWlkV1ptWlhJdmFXNWtaWGd1YW5NaUxDSkVPaTlUVkZKUFRsa3ZkbWh6TDFCeWIycGxZM1J6VUhKcGRpOUJjbWxqYUhSbGEzUjFjbUZOVmtNdlQwOVFMMjV2WkdWZmJXOWtkV3hsY3k5cFpXVmxOelUwTDJsdVpHVjRMbXB6SWl3aVJEb3ZVMVJTVDA1WkwzWm9jeTlRY205cVpXTjBjMUJ5YVhZdlFYSnBZMmgwWld0MGRYSmhUVlpETDA5UFVDOXViMlJsWDIxdlpIVnNaWE12Y0hKdlkyVnpjeTlpY205M2MyVnlMbXB6SWl3aVJEb3ZVMVJTVDA1WkwzWm9jeTlRY205cVpXTjBjMUJ5YVhZdlFYSnBZMmgwWld0MGRYSmhUVlpETDA5UFVDOXpjbU12YW5NdlptRnJaVjgzWWpsalpUVm1OaTVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFUdEJRMEZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlF6bElRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEzWnNRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTNSR1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEYWtWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRWlMQ0ptYVd4bElqb2laMlZ1WlhKaGRHVmtMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWlobWRXNWpkR2x2YmlCbEtIUXNiaXh5S1h0bWRXNWpkR2x2YmlCektHOHNkU2w3YVdZb0lXNWJiMTBwZTJsbUtDRjBXMjlkS1h0MllYSWdZVDEwZVhCbGIyWWdjbVZ4ZFdseVpUMDlYQ0ptZFc1amRHbHZibHdpSmlaeVpYRjFhWEpsTzJsbUtDRjFKaVpoS1hKbGRIVnliaUJoS0c4c0lUQXBPMmxtS0drcGNtVjBkWEp1SUdrb2J5d2hNQ2s3ZEdoeWIzY2dibVYzSUVWeWNtOXlLRndpUTJGdWJtOTBJR1pwYm1RZ2JXOWtkV3hsSUNkY0lpdHZLMXdpSjF3aUtYMTJZWElnWmoxdVcyOWRQWHRsZUhCdmNuUnpPbnQ5ZlR0MFcyOWRXekJkTG1OaGJHd29aaTVsZUhCdmNuUnpMR1oxYm1OMGFXOXVLR1VwZTNaaGNpQnVQWFJiYjExYk1WMWJaVjA3Y21WMGRYSnVJSE1vYmo5dU9tVXBmU3htTEdZdVpYaHdiM0owY3l4bExIUXNiaXh5S1gxeVpYUjFjbTRnYmx0dlhTNWxlSEJ2Y25SemZYWmhjaUJwUFhSNWNHVnZaaUJ5WlhGMWFYSmxQVDFjSW1aMWJtTjBhVzl1WENJbUpuSmxjWFZwY21VN1ptOXlLSFpoY2lCdlBUQTdienh5TG14bGJtZDBhRHR2S3lzcGN5aHlXMjlkS1R0eVpYUjFjbTRnYzMwcElpd2lLR1oxYm1OMGFXOXVJQ2h3Y205alpYTnpMR2RzYjJKaGJDeENkV1ptWlhJc1gxOWhjbWQxYldWdWREQXNYMTloY21kMWJXVnVkREVzWDE5aGNtZDFiV1Z1ZERJc1gxOWhjbWQxYldWdWRETXNYMTltYVd4bGJtRnRaU3hmWDJScGNtNWhiV1VwZTF4dWRtRnlJR3h2YjJ0MWNDQTlJQ2RCUWtORVJVWkhTRWxLUzB4TlRrOVFVVkpUVkZWV1YxaFpXbUZpWTJSbFptZG9hV3ByYkcxdWIzQnhjbk4wZFhaM2VIbDZNREV5TXpRMU5qYzRPU3N2Snp0Y2JseHVPeWhtZFc1amRHbHZiaUFvWlhod2IzSjBjeWtnZTF4dVhIUW5kWE5sSUhOMGNtbGpkQ2M3WEc1Y2JpQWdkbUZ5SUVGeWNpQTlJQ2gwZVhCbGIyWWdWV2x1ZERoQmNuSmhlU0FoUFQwZ0ozVnVaR1ZtYVc1bFpDY3BYRzRnSUNBZ1B5QlZhVzUwT0VGeWNtRjVYRzRnSUNBZ09pQkJjbkpoZVZ4dVhHNWNkSFpoY2lCUVRGVlRJQ0FnUFNBbkt5Y3VZMmhoY2tOdlpHVkJkQ2d3S1Z4dVhIUjJZWElnVTB4QlUwZ2dJRDBnSnk4bkxtTm9ZWEpEYjJSbFFYUW9NQ2xjYmx4MGRtRnlJRTVWVFVKRlVpQTlJQ2N3Snk1amFHRnlRMjlrWlVGMEtEQXBYRzVjZEhaaGNpQk1UMWRGVWlBZ1BTQW5ZU2N1WTJoaGNrTnZaR1ZCZENnd0tWeHVYSFIyWVhJZ1ZWQlFSVklnSUQwZ0owRW5MbU5vWVhKRGIyUmxRWFFvTUNsY2JseDBkbUZ5SUZCTVZWTmZWVkpNWDFOQlJrVWdQU0FuTFNjdVkyaGhja052WkdWQmRDZ3dLVnh1WEhSMllYSWdVMHhCVTBoZlZWSk1YMU5CUmtVZ1BTQW5YeWN1WTJoaGNrTnZaR1ZCZENnd0tWeHVYRzVjZEdaMWJtTjBhVzl1SUdSbFkyOWtaU0FvWld4MEtTQjdYRzVjZEZ4MGRtRnlJR052WkdVZ1BTQmxiSFF1WTJoaGNrTnZaR1ZCZENnd0tWeHVYSFJjZEdsbUlDaGpiMlJsSUQwOVBTQlFURlZUSUh4OFhHNWNkRngwSUNBZ0lHTnZaR1VnUFQwOUlGQk1WVk5mVlZKTVgxTkJSa1VwWEc1Y2RGeDBYSFJ5WlhSMWNtNGdOaklnTHk4Z0p5c25YRzVjZEZ4MGFXWWdLR052WkdVZ1BUMDlJRk5NUVZOSUlIeDhYRzVjZEZ4MElDQWdJR052WkdVZ1BUMDlJRk5NUVZOSVgxVlNURjlUUVVaRktWeHVYSFJjZEZ4MGNtVjBkWEp1SURZeklDOHZJQ2N2SjF4dVhIUmNkR2xtSUNoamIyUmxJRHdnVGxWTlFrVlNLVnh1WEhSY2RGeDBjbVYwZFhKdUlDMHhJQzh2Ym04Z2JXRjBZMmhjYmx4MFhIUnBaaUFvWTI5a1pTQThJRTVWVFVKRlVpQXJJREV3S1Z4dVhIUmNkRngwY21WMGRYSnVJR052WkdVZ0xTQk9WVTFDUlZJZ0t5QXlOaUFySURJMlhHNWNkRngwYVdZZ0tHTnZaR1VnUENCVlVGQkZVaUFySURJMktWeHVYSFJjZEZ4MGNtVjBkWEp1SUdOdlpHVWdMU0JWVUZCRlVseHVYSFJjZEdsbUlDaGpiMlJsSUR3Z1RFOVhSVklnS3lBeU5pbGNibHgwWEhSY2RISmxkSFZ5YmlCamIyUmxJQzBnVEU5WFJWSWdLeUF5Tmx4dVhIUjlYRzVjYmx4MFpuVnVZM1JwYjI0Z1lqWTBWRzlDZVhSbFFYSnlZWGtnS0dJMk5Da2dlMXh1WEhSY2RIWmhjaUJwTENCcUxDQnNMQ0IwYlhBc0lIQnNZV05sU0c5c1pHVnljeXdnWVhKeVhHNWNibHgwWEhScFppQW9ZalkwTG14bGJtZDBhQ0FsSURRZ1BpQXdLU0I3WEc1Y2RGeDBYSFIwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMGx1ZG1Gc2FXUWdjM1J5YVc1bkxpQk1aVzVuZEdnZ2JYVnpkQ0JpWlNCaElHMTFiSFJwY0d4bElHOW1JRFFuS1Z4dVhIUmNkSDFjYmx4dVhIUmNkQzh2SUhSb1pTQnVkVzFpWlhJZ2IyWWdaWEYxWVd3Z2MybG5ibk1nS0hCc1lXTmxJR2h2YkdSbGNuTXBYRzVjZEZ4MEx5OGdhV1lnZEdobGNtVWdZWEpsSUhSM2J5QndiR0ZqWldodmJHUmxjbk1zSUhSb1lXNGdkR2hsSUhSM2J5QmphR0Z5WVdOMFpYSnpJR0psWm05eVpTQnBkRnh1WEhSY2RDOHZJSEpsY0hKbGMyVnVkQ0J2Ym1VZ1lubDBaVnh1WEhSY2RDOHZJR2xtSUhSb1pYSmxJR2x6SUc5dWJIa2diMjVsTENCMGFHVnVJSFJvWlNCMGFISmxaU0JqYUdGeVlXTjBaWEp6SUdKbFptOXlaU0JwZENCeVpYQnlaWE5sYm5RZ01pQmllWFJsYzF4dVhIUmNkQzh2SUhSb2FYTWdhWE1nYW5WemRDQmhJR05vWldGd0lHaGhZMnNnZEc4Z2JtOTBJR1J2SUdsdVpHVjRUMllnZEhkcFkyVmNibHgwWEhSMllYSWdiR1Z1SUQwZ1lqWTBMbXhsYm1kMGFGeHVYSFJjZEhCc1lXTmxTRzlzWkdWeWN5QTlJQ2M5SnlBOVBUMGdZalkwTG1Ob1lYSkJkQ2hzWlc0Z0xTQXlLU0EvSURJZ09pQW5QU2NnUFQwOUlHSTJOQzVqYUdGeVFYUW9iR1Z1SUMwZ01Ta2dQeUF4SURvZ01GeHVYRzVjZEZ4MEx5OGdZbUZ6WlRZMElHbHpJRFF2TXlBcklIVndJSFJ2SUhSM2J5QmphR0Z5WVdOMFpYSnpJRzltSUhSb1pTQnZjbWxuYVc1aGJDQmtZWFJoWEc1Y2RGeDBZWEp5SUQwZ2JtVjNJRUZ5Y2loaU5qUXViR1Z1WjNSb0lDb2dNeUF2SURRZ0xTQndiR0ZqWlVodmJHUmxjbk1wWEc1Y2JseDBYSFF2THlCcFppQjBhR1Z5WlNCaGNtVWdjR3hoWTJWb2IyeGtaWEp6TENCdmJteDVJR2RsZENCMWNDQjBieUIwYUdVZ2JHRnpkQ0JqYjIxd2JHVjBaU0EwSUdOb1lYSnpYRzVjZEZ4MGJDQTlJSEJzWVdObFNHOXNaR1Z5Y3lBK0lEQWdQeUJpTmpRdWJHVnVaM1JvSUMwZ05DQTZJR0kyTkM1c1pXNW5kR2hjYmx4dVhIUmNkSFpoY2lCTUlEMGdNRnh1WEc1Y2RGeDBablZ1WTNScGIyNGdjSFZ6YUNBb2Rpa2dlMXh1WEhSY2RGeDBZWEp5VzB3cksxMGdQU0IyWEc1Y2RGeDBmVnh1WEc1Y2RGeDBabTl5SUNocElEMGdNQ3dnYWlBOUlEQTdJR2tnUENCc095QnBJQ3M5SURRc0lHb2dLejBnTXlrZ2UxeHVYSFJjZEZ4MGRHMXdJRDBnS0dSbFkyOWtaU2hpTmpRdVkyaGhja0YwS0drcEtTQThQQ0F4T0NrZ2ZDQW9aR1ZqYjJSbEtHSTJOQzVqYUdGeVFYUW9hU0FySURFcEtTQThQQ0F4TWlrZ2ZDQW9aR1ZqYjJSbEtHSTJOQzVqYUdGeVFYUW9hU0FySURJcEtTQThQQ0EyS1NCOElHUmxZMjlrWlNoaU5qUXVZMmhoY2tGMEtHa2dLeUF6S1NsY2JseDBYSFJjZEhCMWMyZ29LSFJ0Y0NBbUlEQjRSa1l3TURBd0tTQStQaUF4TmlsY2JseDBYSFJjZEhCMWMyZ29LSFJ0Y0NBbUlEQjRSa1l3TUNrZ1BqNGdPQ2xjYmx4MFhIUmNkSEIxYzJnb2RHMXdJQ1lnTUhoR1JpbGNibHgwWEhSOVhHNWNibHgwWEhScFppQW9jR3hoWTJWSWIyeGtaWEp6SUQwOVBTQXlLU0I3WEc1Y2RGeDBYSFIwYlhBZ1BTQW9aR1ZqYjJSbEtHSTJOQzVqYUdGeVFYUW9hU2twSUR3OElESXBJSHdnS0dSbFkyOWtaU2hpTmpRdVkyaGhja0YwS0drZ0t5QXhLU2tnUGo0Z05DbGNibHgwWEhSY2RIQjFjMmdvZEcxd0lDWWdNSGhHUmlsY2JseDBYSFI5SUdWc2MyVWdhV1lnS0hCc1lXTmxTRzlzWkdWeWN5QTlQVDBnTVNrZ2UxeHVYSFJjZEZ4MGRHMXdJRDBnS0dSbFkyOWtaU2hpTmpRdVkyaGhja0YwS0drcEtTQThQQ0F4TUNrZ2ZDQW9aR1ZqYjJSbEtHSTJOQzVqYUdGeVFYUW9hU0FySURFcEtTQThQQ0EwS1NCOElDaGtaV052WkdVb1lqWTBMbU5vWVhKQmRDaHBJQ3NnTWlrcElENCtJRElwWEc1Y2RGeDBYSFJ3ZFhOb0tDaDBiWEFnUGo0Z09Da2dKaUF3ZUVaR0tWeHVYSFJjZEZ4MGNIVnphQ2gwYlhBZ0ppQXdlRVpHS1Z4dVhIUmNkSDFjYmx4dVhIUmNkSEpsZEhWeWJpQmhjbkpjYmx4MGZWeHVYRzVjZEdaMWJtTjBhVzl1SUhWcGJuUTRWRzlDWVhObE5qUWdLSFZwYm5RNEtTQjdYRzVjZEZ4MGRtRnlJR2tzWEc1Y2RGeDBYSFJsZUhSeVlVSjVkR1Z6SUQwZ2RXbHVkRGd1YkdWdVozUm9JQ1VnTXl3Z0x5OGdhV1lnZDJVZ2FHRjJaU0F4SUdKNWRHVWdiR1ZtZEN3Z2NHRmtJRElnWW5sMFpYTmNibHgwWEhSY2RHOTFkSEIxZENBOUlGd2lYQ0lzWEc1Y2RGeDBYSFIwWlcxd0xDQnNaVzVuZEdoY2JseHVYSFJjZEdaMWJtTjBhVzl1SUdWdVkyOWtaU0FvYm5WdEtTQjdYRzVjZEZ4MFhIUnlaWFIxY200Z2JHOXZhM1Z3TG1Ob1lYSkJkQ2h1ZFcwcFhHNWNkRngwZlZ4dVhHNWNkRngwWm5WdVkzUnBiMjRnZEhKcGNHeGxkRlJ2UW1GelpUWTBJQ2h1ZFcwcElIdGNibHgwWEhSY2RISmxkSFZ5YmlCbGJtTnZaR1VvYm5WdElENCtJREU0SUNZZ01IZ3pSaWtnS3lCbGJtTnZaR1VvYm5WdElENCtJREV5SUNZZ01IZ3pSaWtnS3lCbGJtTnZaR1VvYm5WdElENCtJRFlnSmlBd2VETkdLU0FySUdWdVkyOWtaU2h1ZFcwZ0ppQXdlRE5HS1Z4dVhIUmNkSDFjYmx4dVhIUmNkQzh2SUdkdklIUm9jbTkxWjJnZ2RHaGxJR0Z5Y21GNUlHVjJaWEo1SUhSb2NtVmxJR0o1ZEdWekxDQjNaU2RzYkNCa1pXRnNJSGRwZEdnZ2RISmhhV3hwYm1jZ2MzUjFabVlnYkdGMFpYSmNibHgwWEhSbWIzSWdLR2tnUFNBd0xDQnNaVzVuZEdnZ1BTQjFhVzUwT0M1c1pXNW5kR2dnTFNCbGVIUnlZVUo1ZEdWek95QnBJRHdnYkdWdVozUm9PeUJwSUNzOUlETXBJSHRjYmx4MFhIUmNkSFJsYlhBZ1BTQW9kV2x1ZERoYmFWMGdQRHdnTVRZcElDc2dLSFZwYm5RNFcya2dLeUF4WFNBOFBDQTRLU0FySUNoMWFXNTBPRnRwSUNzZ01sMHBYRzVjZEZ4MFhIUnZkWFJ3ZFhRZ0t6MGdkSEpwY0d4bGRGUnZRbUZ6WlRZMEtIUmxiWEFwWEc1Y2RGeDBmVnh1WEc1Y2RGeDBMeThnY0dGa0lIUm9aU0JsYm1RZ2QybDBhQ0I2WlhKdmN5d2dZblYwSUcxaGEyVWdjM1Z5WlNCMGJ5QnViM1FnWm05eVoyVjBJSFJvWlNCbGVIUnlZU0JpZVhSbGMxeHVYSFJjZEhOM2FYUmphQ0FvWlhoMGNtRkNlWFJsY3lrZ2UxeHVYSFJjZEZ4MFkyRnpaU0F4T2x4dVhIUmNkRngwWEhSMFpXMXdJRDBnZFdsdWREaGJkV2x1ZERndWJHVnVaM1JvSUMwZ01WMWNibHgwWEhSY2RGeDBiM1YwY0hWMElDczlJR1Z1WTI5a1pTaDBaVzF3SUQ0K0lESXBYRzVjZEZ4MFhIUmNkRzkxZEhCMWRDQXJQU0JsYm1OdlpHVW9LSFJsYlhBZ1BEd2dOQ2tnSmlBd2VETkdLVnh1WEhSY2RGeDBYSFJ2ZFhSd2RYUWdLejBnSnowOUoxeHVYSFJjZEZ4MFhIUmljbVZoYTF4dVhIUmNkRngwWTJGelpTQXlPbHh1WEhSY2RGeDBYSFIwWlcxd0lEMGdLSFZwYm5RNFczVnBiblE0TG14bGJtZDBhQ0F0SURKZElEdzhJRGdwSUNzZ0tIVnBiblE0VzNWcGJuUTRMbXhsYm1kMGFDQXRJREZkS1Z4dVhIUmNkRngwWEhSdmRYUndkWFFnS3owZ1pXNWpiMlJsS0hSbGJYQWdQajRnTVRBcFhHNWNkRngwWEhSY2RHOTFkSEIxZENBclBTQmxibU52WkdVb0tIUmxiWEFnUGo0Z05Da2dKaUF3ZUROR0tWeHVYSFJjZEZ4MFhIUnZkWFJ3ZFhRZ0t6MGdaVzVqYjJSbEtDaDBaVzF3SUR3OElESXBJQ1lnTUhnelJpbGNibHgwWEhSY2RGeDBiM1YwY0hWMElDczlJQ2M5SjF4dVhIUmNkRngwWEhSaWNtVmhhMXh1WEhSY2RIMWNibHh1WEhSY2RISmxkSFZ5YmlCdmRYUndkWFJjYmx4MGZWeHVYRzVjZEdWNGNHOXlkSE11ZEc5Q2VYUmxRWEp5WVhrZ1BTQmlOalJVYjBKNWRHVkJjbkpoZVZ4dVhIUmxlSEJ2Y25SekxtWnliMjFDZVhSbFFYSnlZWGtnUFNCMWFXNTBPRlJ2UW1GelpUWTBYRzU5S0hSNWNHVnZaaUJsZUhCdmNuUnpJRDA5UFNBbmRXNWtaV1pwYm1Wa0p5QS9JQ2gwYUdsekxtSmhjMlUyTkdweklEMGdlMzBwSURvZ1pYaHdiM0owY3lrcFhHNWNibjBwTG1OaGJHd29kR2hwY3l4eVpYRjFhWEpsS0Z3aVpTOVZLemszWENJcExIUjVjR1Z2WmlCelpXeG1JQ0U5UFNCY0luVnVaR1ZtYVc1bFpGd2lJRDhnYzJWc1ppQTZJSFI1Y0dWdlppQjNhVzVrYjNjZ0lUMDlJRndpZFc1a1pXWnBibVZrWENJZ1B5QjNhVzVrYjNjZ09pQjdmU3h5WlhGMWFYSmxLRndpWW5WbVptVnlYQ0lwTGtKMVptWmxjaXhoY21kMWJXVnVkSE5iTTEwc1lYSm5kVzFsYm5Seld6UmRMR0Z5WjNWdFpXNTBjMXMxWFN4aGNtZDFiV1Z1ZEhOYk5sMHNYQ0l2TGk1Y1hGeGNMaTVjWEZ4Y2JtOWtaVjl0YjJSMWJHVnpYRnhjWEdKaGMyVTJOQzFxYzF4Y1hGeHNhV0pjWEZ4Y1lqWTBMbXB6WENJc1hDSXZMaTVjWEZ4Y0xpNWNYRnhjYm05a1pWOXRiMlIxYkdWelhGeGNYR0poYzJVMk5DMXFjMXhjWEZ4c2FXSmNJaWtpTENJb1puVnVZM1JwYjI0Z0tIQnliMk5sYzNNc1oyeHZZbUZzTEVKMVptWmxjaXhmWDJGeVozVnRaVzUwTUN4ZlgyRnlaM1Z0Wlc1ME1TeGZYMkZ5WjNWdFpXNTBNaXhmWDJGeVozVnRaVzUwTXl4ZlgyWnBiR1Z1WVcxbExGOWZaR2x5Ym1GdFpTbDdYRzR2S2lGY2JpQXFJRlJvWlNCaWRXWm1aWElnYlc5a2RXeGxJR1p5YjIwZ2JtOWtaUzVxY3l3Z1ptOXlJSFJvWlNCaWNtOTNjMlZ5TGx4dUlDcGNiaUFxSUVCaGRYUm9iM0lnSUNCR1pYSnZjM01nUVdKdmRXdG9ZV1JwYW1Wb0lEeG1aWEp2YzNOQVptVnliM056TG05eVp6NGdQR2gwZEhBNkx5OW1aWEp2YzNNdWIzSm5QbHh1SUNvZ1FHeHBZMlZ1YzJVZ0lFMUpWRnh1SUNvdlhHNWNiblpoY2lCaVlYTmxOalFnUFNCeVpYRjFhWEpsS0NkaVlYTmxOalF0YW5NbktWeHVkbUZ5SUdsbFpXVTNOVFFnUFNCeVpYRjFhWEpsS0NkcFpXVmxOelUwSnlsY2JseHVaWGh3YjNKMGN5NUNkV1ptWlhJZ1BTQkNkV1ptWlhKY2JtVjRjRzl5ZEhNdVUyeHZkMEoxWm1abGNpQTlJRUoxWm1abGNseHVaWGh3YjNKMGN5NUpUbE5RUlVOVVgwMUJXRjlDV1ZSRlV5QTlJRFV3WEc1Q2RXWm1aWEl1Y0c5dmJGTnBlbVVnUFNBNE1Ua3lYRzVjYmk4cUtseHVJQ29nU1dZZ1lFSjFabVpsY2k1ZmRYTmxWSGx3WldSQmNuSmhlWE5nT2x4dUlDb2dJQ0E5UFQwZ2RISjFaU0FnSUNCVmMyVWdWV2x1ZERoQmNuSmhlU0JwYlhCc1pXMWxiblJoZEdsdmJpQW9abUZ6ZEdWemRDbGNiaUFxSUNBZ1BUMDlJR1poYkhObElDQWdWWE5sSUU5aWFtVmpkQ0JwYlhCc1pXMWxiblJoZEdsdmJpQW9ZMjl0Y0dGMGFXSnNaU0JrYjNkdUlIUnZJRWxGTmlsY2JpQXFMMXh1UW5WbVptVnlMbDkxYzJWVWVYQmxaRUZ5Y21GNWN5QTlJQ2htZFc1amRHbHZiaUFvS1NCN1hHNGdJQzh2SUVSbGRHVmpkQ0JwWmlCaWNtOTNjMlZ5SUhOMWNIQnZjblJ6SUZSNWNHVmtJRUZ5Y21GNWN5NGdVM1Z3Y0c5eWRHVmtJR0p5YjNkelpYSnpJR0Z5WlNCSlJTQXhNQ3NzSUVacGNtVm1iM2dnTkNzc1hHNGdJQzh2SUVOb2NtOXRaU0EzS3l3Z1UyRm1ZWEpwSURVdU1Tc3NJRTl3WlhKaElERXhMallyTENCcFQxTWdOQzR5S3k0Z1NXWWdkR2hsSUdKeWIzZHpaWElnWkc5bGN5QnViM1FnYzNWd2NHOXlkQ0JoWkdScGJtZGNiaUFnTHk4Z2NISnZjR1Z5ZEdsbGN5QjBieUJnVldsdWREaEJjbkpoZVdBZ2FXNXpkR0Z1WTJWekxDQjBhR1Z1SUhSb1lYUW5jeUIwYUdVZ2MyRnRaU0JoY3lCdWJ5QmdWV2x1ZERoQmNuSmhlV0FnYzNWd2NHOXlkRnh1SUNBdkx5QmlaV05oZFhObElIZGxJRzVsWldRZ2RHOGdZbVVnWVdKc1pTQjBieUJoWkdRZ1lXeHNJSFJvWlNCdWIyUmxJRUoxWm1abGNpQkJVRWtnYldWMGFHOWtjeTRnVkdocGN5QnBjeUJoYmlCcGMzTjFaVnh1SUNBdkx5QnBiaUJHYVhKbFptOTRJRFF0TWprdUlFNXZkeUJtYVhobFpEb2dhSFIwY0hNNkx5OWlkV2Q2YVd4c1lTNXRiM3BwYkd4aExtOXlaeTl6YUc5M1gySjFaeTVqWjJrL2FXUTlOamsxTkRNNFhHNGdJSFJ5ZVNCN1hHNGdJQ0FnZG1GeUlHSjFaaUE5SUc1bGR5QkJjbkpoZVVKMVptWmxjaWd3S1Z4dUlDQWdJSFpoY2lCaGNuSWdQU0J1WlhjZ1ZXbHVkRGhCY25KaGVTaGlkV1lwWEc0Z0lDQWdZWEp5TG1admJ5QTlJR1oxYm1OMGFXOXVJQ2dwSUhzZ2NtVjBkWEp1SURReUlIMWNiaUFnSUNCeVpYUjFjbTRnTkRJZ1BUMDlJR0Z5Y2k1bWIyOG9LU0FtSmx4dUlDQWdJQ0FnSUNCMGVYQmxiMllnWVhKeUxuTjFZbUZ5Y21GNUlEMDlQU0FuWm5WdVkzUnBiMjRuSUM4dklFTm9jbTl0WlNBNUxURXdJR3hoWTJzZ1lITjFZbUZ5Y21GNVlGeHVJQ0I5SUdOaGRHTm9JQ2hsS1NCN1hHNGdJQ0FnY21WMGRYSnVJR1poYkhObFhHNGdJSDFjYm4wcEtDbGNibHh1THlvcVhHNGdLaUJEYkdGemN6b2dRblZtWm1WeVhHNGdLaUE5UFQwOVBUMDlQVDA5UFQwOVhHNGdLbHh1SUNvZ1ZHaGxJRUoxWm1abGNpQmpiMjV6ZEhKMVkzUnZjaUJ5WlhSMWNtNXpJR2x1YzNSaGJtTmxjeUJ2WmlCZ1ZXbHVkRGhCY25KaGVXQWdkR2hoZENCaGNtVWdZWFZuYldWdWRHVmtYRzRnS2lCM2FYUm9JR1oxYm1OMGFXOXVJSEJ5YjNCbGNuUnBaWE1nWm05eUlHRnNiQ0IwYUdVZ2JtOWtaU0JnUW5WbVptVnlZQ0JCVUVrZ1puVnVZM1JwYjI1ekxpQlhaU0IxYzJWY2JpQXFJR0JWYVc1ME9FRnljbUY1WUNCemJ5QjBhR0YwSUhOeGRXRnlaU0JpY21GamEyVjBJRzV2ZEdGMGFXOXVJSGR2Y210eklHRnpJR1Y0Y0dWamRHVmtJQzB0SUdsMElISmxkSFZ5Ym5OY2JpQXFJR0VnYzJsdVoyeGxJRzlqZEdWMExseHVJQ3BjYmlBcUlFSjVJR0YxWjIxbGJuUnBibWNnZEdobElHbHVjM1JoYm1ObGN5d2dkMlVnWTJGdUlHRjJiMmxrSUcxdlpHbG1lV2x1WnlCMGFHVWdZRlZwYm5RNFFYSnlZWGxnWEc0Z0tpQndjbTkwYjNSNWNHVXVYRzRnS2k5Y2JtWjFibU4wYVc5dUlFSjFabVpsY2lBb2MzVmlhbVZqZEN3Z1pXNWpiMlJwYm1jc0lHNXZXbVZ5YnlrZ2UxeHVJQ0JwWmlBb0lTaDBhR2x6SUdsdWMzUmhibU5sYjJZZ1FuVm1abVZ5S1NsY2JpQWdJQ0J5WlhSMWNtNGdibVYzSUVKMVptWmxjaWh6ZFdKcVpXTjBMQ0JsYm1OdlpHbHVaeXdnYm05YVpYSnZLVnh1WEc0Z0lIWmhjaUIwZVhCbElEMGdkSGx3Wlc5bUlITjFZbXBsWTNSY2JseHVJQ0F2THlCWGIzSnJZWEp2ZFc1a09pQnViMlJsSjNNZ1ltRnpaVFkwSUdsdGNHeGxiV1Z1ZEdGMGFXOXVJR0ZzYkc5M2N5Qm1iM0lnYm05dUxYQmhaR1JsWkNCemRISnBibWR6WEc0Z0lDOHZJSGRvYVd4bElHSmhjMlUyTkMxcWN5QmtiMlZ6SUc1dmRDNWNiaUFnYVdZZ0tHVnVZMjlrYVc1bklEMDlQU0FuWW1GelpUWTBKeUFtSmlCMGVYQmxJRDA5UFNBbmMzUnlhVzVuSnlrZ2UxeHVJQ0FnSUhOMVltcGxZM1FnUFNCemRISnBibWQwY21sdEtITjFZbXBsWTNRcFhHNGdJQ0FnZDJocGJHVWdLSE4xWW1wbFkzUXViR1Z1WjNSb0lDVWdOQ0FoUFQwZ01Da2dlMXh1SUNBZ0lDQWdjM1ZpYW1WamRDQTlJSE4xWW1wbFkzUWdLeUFuUFNkY2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNBdkx5QkdhVzVrSUhSb1pTQnNaVzVuZEdoY2JpQWdkbUZ5SUd4bGJtZDBhRnh1SUNCcFppQW9kSGx3WlNBOVBUMGdKMjUxYldKbGNpY3BYRzRnSUNBZ2JHVnVaM1JvSUQwZ1kyOWxjbU5sS0hOMVltcGxZM1FwWEc0Z0lHVnNjMlVnYVdZZ0tIUjVjR1VnUFQwOUlDZHpkSEpwYm1jbktWeHVJQ0FnSUd4bGJtZDBhQ0E5SUVKMVptWmxjaTVpZVhSbFRHVnVaM1JvS0hOMVltcGxZM1FzSUdWdVkyOWthVzVuS1Z4dUlDQmxiSE5sSUdsbUlDaDBlWEJsSUQwOVBTQW5iMkpxWldOMEp5bGNiaUFnSUNCc1pXNW5kR2dnUFNCamIyVnlZMlVvYzNWaWFtVmpkQzVzWlc1bmRHZ3BJQzh2SUdGemMzVnRaU0IwYUdGMElHOWlhbVZqZENCcGN5QmhjbkpoZVMxc2FXdGxYRzRnSUdWc2MyVmNiaUFnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjBacGNuTjBJR0Z5WjNWdFpXNTBJRzVsWldSeklIUnZJR0psSUdFZ2JuVnRZbVZ5TENCaGNuSmhlU0J2Y2lCemRISnBibWN1SnlsY2JseHVJQ0IyWVhJZ1luVm1YRzRnSUdsbUlDaENkV1ptWlhJdVgzVnpaVlI1Y0dWa1FYSnlZWGx6S1NCN1hHNGdJQ0FnTHk4Z1VISmxabVZ5Y21Wa09pQlNaWFIxY200Z1lXNGdZWFZuYldWdWRHVmtJR0JWYVc1ME9FRnljbUY1WUNCcGJuTjBZVzVqWlNCbWIzSWdZbVZ6ZENCd1pYSm1iM0p0WVc1alpWeHVJQ0FnSUdKMVppQTlJRUoxWm1abGNpNWZZWFZuYldWdWRDaHVaWGNnVldsdWREaEJjbkpoZVNoc1pXNW5kR2dwS1Z4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUM4dklFWmhiR3hpWVdOck9pQlNaWFIxY200Z1ZFaEpVeUJwYm5OMFlXNWpaU0J2WmlCQ2RXWm1aWElnS0dOeVpXRjBaV1FnWW5rZ1lHNWxkMkFwWEc0Z0lDQWdZblZtSUQwZ2RHaHBjMXh1SUNBZ0lHSjFaaTVzWlc1bmRHZ2dQU0JzWlc1bmRHaGNiaUFnSUNCaWRXWXVYMmx6UW5WbVptVnlJRDBnZEhKMVpWeHVJQ0I5WEc1Y2JpQWdkbUZ5SUdsY2JpQWdhV1lnS0VKMVptWmxjaTVmZFhObFZIbHdaV1JCY25KaGVYTWdKaVlnZEhsd1pXOW1JSE4xWW1wbFkzUXVZbmwwWlV4bGJtZDBhQ0E5UFQwZ0oyNTFiV0psY2ljcElIdGNiaUFnSUNBdkx5QlRjR1ZsWkNCdmNIUnBiV2w2WVhScGIyNGdMUzBnZFhObElITmxkQ0JwWmlCM1pTZHlaU0JqYjNCNWFXNW5JR1p5YjIwZ1lTQjBlWEJsWkNCaGNuSmhlVnh1SUNBZ0lHSjFaaTVmYzJWMEtITjFZbXBsWTNRcFhHNGdJSDBnWld4elpTQnBaaUFvYVhOQmNuSmhlV2x6YUNoemRXSnFaV04wS1NrZ2UxeHVJQ0FnSUM4dklGUnlaV0YwSUdGeWNtRjVMV2x6YUNCdlltcGxZM1J6SUdGeklHRWdZbmwwWlNCaGNuSmhlVnh1SUNBZ0lHWnZjaUFvYVNBOUlEQTdJR2tnUENCc1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDQWdhV1lnS0VKMVptWmxjaTVwYzBKMVptWmxjaWh6ZFdKcVpXTjBLU2xjYmlBZ0lDQWdJQ0FnWW5WbVcybGRJRDBnYzNWaWFtVmpkQzV5WldGa1ZVbHVkRGdvYVNsY2JpQWdJQ0FnSUdWc2MyVmNiaUFnSUNBZ0lDQWdZblZtVzJsZElEMGdjM1ZpYW1WamRGdHBYVnh1SUNBZ0lIMWNiaUFnZlNCbGJITmxJR2xtSUNoMGVYQmxJRDA5UFNBbmMzUnlhVzVuSnlrZ2UxeHVJQ0FnSUdKMVppNTNjbWwwWlNoemRXSnFaV04wTENBd0xDQmxibU52WkdsdVp5bGNiaUFnZlNCbGJITmxJR2xtSUNoMGVYQmxJRDA5UFNBbmJuVnRZbVZ5SnlBbUppQWhRblZtWm1WeUxsOTFjMlZVZVhCbFpFRnljbUY1Y3lBbUppQWhibTlhWlhKdktTQjdYRzRnSUNBZ1ptOXlJQ2hwSUQwZ01Ec2dhU0E4SUd4bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ0lDQmlkV1piYVYwZ1BTQXdYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdjbVYwZFhKdUlHSjFabHh1ZlZ4dVhHNHZMeUJUVkVGVVNVTWdUVVZVU0U5RVUxeHVMeThnUFQwOVBUMDlQVDA5UFQwOVBUMWNibHh1UW5WbVptVnlMbWx6Ulc1amIyUnBibWNnUFNCbWRXNWpkR2x2YmlBb1pXNWpiMlJwYm1jcElIdGNiaUFnYzNkcGRHTm9JQ2hUZEhKcGJtY29aVzVqYjJScGJtY3BMblJ2VEc5M1pYSkRZWE5sS0NrcElIdGNiaUFnSUNCallYTmxJQ2RvWlhnbk9seHVJQ0FnSUdOaGMyVWdKM1YwWmpnbk9seHVJQ0FnSUdOaGMyVWdKM1YwWmkwNEp6cGNiaUFnSUNCallYTmxJQ2RoYzJOcGFTYzZYRzRnSUNBZ1kyRnpaU0FuWW1sdVlYSjVKenBjYmlBZ0lDQmpZWE5sSUNkaVlYTmxOalFuT2x4dUlDQWdJR05oYzJVZ0ozSmhkeWM2WEc0Z0lDQWdZMkZ6WlNBbmRXTnpNaWM2WEc0Z0lDQWdZMkZ6WlNBbmRXTnpMVEluT2x4dUlDQWdJR05oYzJVZ0ozVjBaakUyYkdVbk9seHVJQ0FnSUdOaGMyVWdKM1YwWmkweE5teGxKenBjYmlBZ0lDQWdJSEpsZEhWeWJpQjBjblZsWEc0Z0lDQWdaR1ZtWVhWc2REcGNiaUFnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVnh1SUNCOVhHNTlYRzVjYmtKMVptWmxjaTVwYzBKMVptWmxjaUE5SUdaMWJtTjBhVzl1SUNoaUtTQjdYRzRnSUhKbGRIVnliaUFoSVNoaUlDRTlQU0J1ZFd4c0lDWW1JR0lnSVQwOUlIVnVaR1ZtYVc1bFpDQW1KaUJpTGw5cGMwSjFabVpsY2lsY2JuMWNibHh1UW5WbVptVnlMbUo1ZEdWTVpXNW5kR2dnUFNCbWRXNWpkR2x2YmlBb2MzUnlMQ0JsYm1OdlpHbHVaeWtnZTF4dUlDQjJZWElnY21WMFhHNGdJSE4wY2lBOUlITjBjaUFySUNjblhHNGdJSE4zYVhSamFDQW9aVzVqYjJScGJtY2dmSHdnSjNWMFpqZ25LU0I3WEc0Z0lDQWdZMkZ6WlNBbmFHVjRKenBjYmlBZ0lDQWdJSEpsZENBOUlITjBjaTVzWlc1bmRHZ2dMeUF5WEc0Z0lDQWdJQ0JpY21WaGExeHVJQ0FnSUdOaGMyVWdKM1YwWmpnbk9seHVJQ0FnSUdOaGMyVWdKM1YwWmkwNEp6cGNiaUFnSUNBZ0lISmxkQ0E5SUhWMFpqaFViMEo1ZEdWektITjBjaWt1YkdWdVozUm9YRzRnSUNBZ0lDQmljbVZoYTF4dUlDQWdJR05oYzJVZ0oyRnpZMmxwSnpwY2JpQWdJQ0JqWVhObElDZGlhVzVoY25rbk9seHVJQ0FnSUdOaGMyVWdKM0poZHljNlhHNGdJQ0FnSUNCeVpYUWdQU0J6ZEhJdWJHVnVaM1JvWEc0Z0lDQWdJQ0JpY21WaGExeHVJQ0FnSUdOaGMyVWdKMkpoYzJVMk5DYzZYRzRnSUNBZ0lDQnlaWFFnUFNCaVlYTmxOalJVYjBKNWRHVnpLSE4wY2lrdWJHVnVaM1JvWEc0Z0lDQWdJQ0JpY21WaGExeHVJQ0FnSUdOaGMyVWdKM1ZqY3pJbk9seHVJQ0FnSUdOaGMyVWdKM1ZqY3kweUp6cGNiaUFnSUNCallYTmxJQ2QxZEdZeE5teGxKenBjYmlBZ0lDQmpZWE5sSUNkMWRHWXRNVFpzWlNjNlhHNGdJQ0FnSUNCeVpYUWdQU0J6ZEhJdWJHVnVaM1JvSUNvZ01seHVJQ0FnSUNBZ1luSmxZV3RjYmlBZ0lDQmtaV1poZFd4ME9seHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkVmJtdHViM2R1SUdWdVkyOWthVzVuSnlsY2JpQWdmVnh1SUNCeVpYUjFjbTRnY21WMFhHNTlYRzVjYmtKMVptWmxjaTVqYjI1allYUWdQU0JtZFc1amRHbHZiaUFvYkdsemRDd2dkRzkwWVd4TVpXNW5kR2dwSUh0Y2JpQWdZWE56WlhKMEtHbHpRWEp5WVhrb2JHbHpkQ2tzSUNkVmMyRm5aVG9nUW5WbVptVnlMbU52Ym1OaGRDaHNhWE4wTENCYmRHOTBZV3hNWlc1bmRHaGRLVnhjYmljZ0sxeHVJQ0FnSUNBZ0oyeHBjM1FnYzJodmRXeGtJR0psSUdGdUlFRnljbUY1TGljcFhHNWNiaUFnYVdZZ0tHeHBjM1F1YkdWdVozUm9JRDA5UFNBd0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QkNkV1ptWlhJb01DbGNiaUFnZlNCbGJITmxJR2xtSUNoc2FYTjBMbXhsYm1kMGFDQTlQVDBnTVNrZ2UxeHVJQ0FnSUhKbGRIVnliaUJzYVhOMFd6QmRYRzRnSUgxY2JseHVJQ0IyWVhJZ2FWeHVJQ0JwWmlBb2RIbHdaVzltSUhSdmRHRnNUR1Z1WjNSb0lDRTlQU0FuYm5WdFltVnlKeWtnZTF4dUlDQWdJSFJ2ZEdGc1RHVnVaM1JvSUQwZ01GeHVJQ0FnSUdadmNpQW9hU0E5SURBN0lHa2dQQ0JzYVhOMExteGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0IwYjNSaGJFeGxibWQwYUNBclBTQnNhWE4wVzJsZExteGxibWQwYUZ4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUhaaGNpQmlkV1lnUFNCdVpYY2dRblZtWm1WeUtIUnZkR0ZzVEdWdVozUm9LVnh1SUNCMllYSWdjRzl6SUQwZ01GeHVJQ0JtYjNJZ0tHa2dQU0F3T3lCcElEd2diR2x6ZEM1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lIWmhjaUJwZEdWdElEMGdiR2x6ZEZ0cFhWeHVJQ0FnSUdsMFpXMHVZMjl3ZVNoaWRXWXNJSEJ2Y3lsY2JpQWdJQ0J3YjNNZ0t6MGdhWFJsYlM1c1pXNW5kR2hjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdZblZtWEc1OVhHNWNiaTh2SUVKVlJrWkZVaUJKVGxOVVFVNURSU0JOUlZSSVQwUlRYRzR2THlBOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVnh1WEc1bWRXNWpkR2x2YmlCZmFHVjRWM0pwZEdVZ0tHSjFaaXdnYzNSeWFXNW5MQ0J2Wm1aelpYUXNJR3hsYm1kMGFDa2dlMXh1SUNCdlptWnpaWFFnUFNCT2RXMWlaWElvYjJabWMyVjBLU0I4ZkNBd1hHNGdJSFpoY2lCeVpXMWhhVzVwYm1jZ1BTQmlkV1l1YkdWdVozUm9JQzBnYjJabWMyVjBYRzRnSUdsbUlDZ2hiR1Z1WjNSb0tTQjdYRzRnSUNBZ2JHVnVaM1JvSUQwZ2NtVnRZV2x1YVc1blhHNGdJSDBnWld4elpTQjdYRzRnSUNBZ2JHVnVaM1JvSUQwZ1RuVnRZbVZ5S0d4bGJtZDBhQ2xjYmlBZ0lDQnBaaUFvYkdWdVozUm9JRDRnY21WdFlXbHVhVzVuS1NCN1hHNGdJQ0FnSUNCc1pXNW5kR2dnUFNCeVpXMWhhVzVwYm1kY2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNBdkx5QnRkWE4wSUdKbElHRnVJR1YyWlc0Z2JuVnRZbVZ5SUc5bUlHUnBaMmwwYzF4dUlDQjJZWElnYzNSeVRHVnVJRDBnYzNSeWFXNW5MbXhsYm1kMGFGeHVJQ0JoYzNObGNuUW9jM1J5VEdWdUlDVWdNaUE5UFQwZ01Dd2dKMGx1ZG1Gc2FXUWdhR1Y0SUhOMGNtbHVaeWNwWEc1Y2JpQWdhV1lnS0d4bGJtZDBhQ0ErSUhOMGNreGxiaUF2SURJcElIdGNiaUFnSUNCc1pXNW5kR2dnUFNCemRISk1aVzRnTHlBeVhHNGdJSDFjYmlBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQnNaVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJSFpoY2lCaWVYUmxJRDBnY0dGeWMyVkpiblFvYzNSeWFXNW5Mbk4xWW5OMGNpaHBJQ29nTWl3Z01pa3NJREUyS1Z4dUlDQWdJR0Z6YzJWeWRDZ2hhWE5PWVU0b1lubDBaU2tzSUNkSmJuWmhiR2xrSUdobGVDQnpkSEpwYm1jbktWeHVJQ0FnSUdKMVpsdHZabVp6WlhRZ0t5QnBYU0E5SUdKNWRHVmNiaUFnZlZ4dUlDQkNkV1ptWlhJdVgyTm9ZWEp6VjNKcGRIUmxiaUE5SUdrZ0tpQXlYRzRnSUhKbGRIVnliaUJwWEc1OVhHNWNibVoxYm1OMGFXOXVJRjkxZEdZNFYzSnBkR1VnS0dKMVppd2djM1J5YVc1bkxDQnZabVp6WlhRc0lHeGxibWQwYUNrZ2UxeHVJQ0IyWVhJZ1kyaGhjbk5YY21sMGRHVnVJRDBnUW5WbVptVnlMbDlqYUdGeWMxZHlhWFIwWlc0Z1BWeHVJQ0FnSUdKc2FYUkNkV1ptWlhJb2RYUm1PRlJ2UW5sMFpYTW9jM1J5YVc1bktTd2dZblZtTENCdlptWnpaWFFzSUd4bGJtZDBhQ2xjYmlBZ2NtVjBkWEp1SUdOb1lYSnpWM0pwZEhSbGJseHVmVnh1WEc1bWRXNWpkR2x2YmlCZllYTmphV2xYY21sMFpTQW9ZblZtTENCemRISnBibWNzSUc5bVpuTmxkQ3dnYkdWdVozUm9LU0I3WEc0Z0lIWmhjaUJqYUdGeWMxZHlhWFIwWlc0Z1BTQkNkV1ptWlhJdVgyTm9ZWEp6VjNKcGRIUmxiaUE5WEc0Z0lDQWdZbXhwZEVKMVptWmxjaWhoYzJOcGFWUnZRbmwwWlhNb2MzUnlhVzVuS1N3Z1luVm1MQ0J2Wm1aelpYUXNJR3hsYm1kMGFDbGNiaUFnY21WMGRYSnVJR05vWVhKelYzSnBkSFJsYmx4dWZWeHVYRzVtZFc1amRHbHZiaUJmWW1sdVlYSjVWM0pwZEdVZ0tHSjFaaXdnYzNSeWFXNW5MQ0J2Wm1aelpYUXNJR3hsYm1kMGFDa2dlMXh1SUNCeVpYUjFjbTRnWDJGelkybHBWM0pwZEdVb1luVm1MQ0J6ZEhKcGJtY3NJRzltWm5ObGRDd2diR1Z1WjNSb0tWeHVmVnh1WEc1bWRXNWpkR2x2YmlCZlltRnpaVFkwVjNKcGRHVWdLR0oxWml3Z2MzUnlhVzVuTENCdlptWnpaWFFzSUd4bGJtZDBhQ2tnZTF4dUlDQjJZWElnWTJoaGNuTlhjbWwwZEdWdUlEMGdRblZtWm1WeUxsOWphR0Z5YzFkeWFYUjBaVzRnUFZ4dUlDQWdJR0pzYVhSQ2RXWm1aWElvWW1GelpUWTBWRzlDZVhSbGN5aHpkSEpwYm1jcExDQmlkV1lzSUc5bVpuTmxkQ3dnYkdWdVozUm9LVnh1SUNCeVpYUjFjbTRnWTJoaGNuTlhjbWwwZEdWdVhHNTlYRzVjYm1aMWJtTjBhVzl1SUY5MWRHWXhObXhsVjNKcGRHVWdLR0oxWml3Z2MzUnlhVzVuTENCdlptWnpaWFFzSUd4bGJtZDBhQ2tnZTF4dUlDQjJZWElnWTJoaGNuTlhjbWwwZEdWdUlEMGdRblZtWm1WeUxsOWphR0Z5YzFkeWFYUjBaVzRnUFZ4dUlDQWdJR0pzYVhSQ2RXWm1aWElvZFhSbU1UWnNaVlJ2UW5sMFpYTW9jM1J5YVc1bktTd2dZblZtTENCdlptWnpaWFFzSUd4bGJtZDBhQ2xjYmlBZ2NtVjBkWEp1SUdOb1lYSnpWM0pwZEhSbGJseHVmVnh1WEc1Q2RXWm1aWEl1Y0hKdmRHOTBlWEJsTG5keWFYUmxJRDBnWm5WdVkzUnBiMjRnS0hOMGNtbHVaeXdnYjJabWMyVjBMQ0JzWlc1bmRHZ3NJR1Z1WTI5a2FXNW5LU0I3WEc0Z0lDOHZJRk4xY0hCdmNuUWdZbTkwYUNBb2MzUnlhVzVuTENCdlptWnpaWFFzSUd4bGJtZDBhQ3dnWlc1amIyUnBibWNwWEc0Z0lDOHZJR0Z1WkNCMGFHVWdiR1ZuWVdONUlDaHpkSEpwYm1jc0lHVnVZMjlrYVc1bkxDQnZabVp6WlhRc0lHeGxibWQwYUNsY2JpQWdhV1lnS0dselJtbHVhWFJsS0c5bVpuTmxkQ2twSUh0Y2JpQWdJQ0JwWmlBb0lXbHpSbWx1YVhSbEtHeGxibWQwYUNrcElIdGNiaUFnSUNBZ0lHVnVZMjlrYVc1bklEMGdiR1Z1WjNSb1hHNGdJQ0FnSUNCc1pXNW5kR2dnUFNCMWJtUmxabWx1WldSY2JpQWdJQ0I5WEc0Z0lIMGdaV3h6WlNCN0lDQXZMeUJzWldkaFkzbGNiaUFnSUNCMllYSWdjM2RoY0NBOUlHVnVZMjlrYVc1blhHNGdJQ0FnWlc1amIyUnBibWNnUFNCdlptWnpaWFJjYmlBZ0lDQnZabVp6WlhRZ1BTQnNaVzVuZEdoY2JpQWdJQ0JzWlc1bmRHZ2dQU0J6ZDJGd1hHNGdJSDFjYmx4dUlDQnZabVp6WlhRZ1BTQk9kVzFpWlhJb2IyWm1jMlYwS1NCOGZDQXdYRzRnSUhaaGNpQnlaVzFoYVc1cGJtY2dQU0IwYUdsekxteGxibWQwYUNBdElHOW1abk5sZEZ4dUlDQnBaaUFvSVd4bGJtZDBhQ2tnZTF4dUlDQWdJR3hsYm1kMGFDQTlJSEpsYldGcGJtbHVaMXh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJR3hsYm1kMGFDQTlJRTUxYldKbGNpaHNaVzVuZEdncFhHNGdJQ0FnYVdZZ0tHeGxibWQwYUNBK0lISmxiV0ZwYm1sdVp5a2dlMXh1SUNBZ0lDQWdiR1Z1WjNSb0lEMGdjbVZ0WVdsdWFXNW5YRzRnSUNBZ2ZWeHVJQ0I5WEc0Z0lHVnVZMjlrYVc1bklEMGdVM1J5YVc1bktHVnVZMjlrYVc1bklIeDhJQ2QxZEdZNEp5a3VkRzlNYjNkbGNrTmhjMlVvS1Z4dVhHNGdJSFpoY2lCeVpYUmNiaUFnYzNkcGRHTm9JQ2hsYm1OdlpHbHVaeWtnZTF4dUlDQWdJR05oYzJVZ0oyaGxlQ2M2WEc0Z0lDQWdJQ0J5WlhRZ1BTQmZhR1Y0VjNKcGRHVW9kR2hwY3l3Z2MzUnlhVzVuTENCdlptWnpaWFFzSUd4bGJtZDBhQ2xjYmlBZ0lDQWdJR0p5WldGclhHNGdJQ0FnWTJGelpTQW5kWFJtT0NjNlhHNGdJQ0FnWTJGelpTQW5kWFJtTFRnbk9seHVJQ0FnSUNBZ2NtVjBJRDBnWDNWMFpqaFhjbWwwWlNoMGFHbHpMQ0J6ZEhKcGJtY3NJRzltWm5ObGRDd2diR1Z1WjNSb0tWeHVJQ0FnSUNBZ1luSmxZV3RjYmlBZ0lDQmpZWE5sSUNkaGMyTnBhU2M2WEc0Z0lDQWdJQ0J5WlhRZ1BTQmZZWE5qYVdsWGNtbDBaU2gwYUdsekxDQnpkSEpwYm1jc0lHOW1abk5sZEN3Z2JHVnVaM1JvS1Z4dUlDQWdJQ0FnWW5KbFlXdGNiaUFnSUNCallYTmxJQ2RpYVc1aGNua25PbHh1SUNBZ0lDQWdjbVYwSUQwZ1gySnBibUZ5ZVZkeWFYUmxLSFJvYVhNc0lITjBjbWx1Wnl3Z2IyWm1jMlYwTENCc1pXNW5kR2dwWEc0Z0lDQWdJQ0JpY21WaGExeHVJQ0FnSUdOaGMyVWdKMkpoYzJVMk5DYzZYRzRnSUNBZ0lDQnlaWFFnUFNCZlltRnpaVFkwVjNKcGRHVW9kR2hwY3l3Z2MzUnlhVzVuTENCdlptWnpaWFFzSUd4bGJtZDBhQ2xjYmlBZ0lDQWdJR0p5WldGclhHNGdJQ0FnWTJGelpTQW5kV056TWljNlhHNGdJQ0FnWTJGelpTQW5kV056TFRJbk9seHVJQ0FnSUdOaGMyVWdKM1YwWmpFMmJHVW5PbHh1SUNBZ0lHTmhjMlVnSjNWMFppMHhObXhsSnpwY2JpQWdJQ0FnSUhKbGRDQTlJRjkxZEdZeE5teGxWM0pwZEdVb2RHaHBjeXdnYzNSeWFXNW5MQ0J2Wm1aelpYUXNJR3hsYm1kMGFDbGNiaUFnSUNBZ0lHSnlaV0ZyWEc0Z0lDQWdaR1ZtWVhWc2REcGNiaUFnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnblZXNXJibTkzYmlCbGJtTnZaR2x1WnljcFhHNGdJSDFjYmlBZ2NtVjBkWEp1SUhKbGRGeHVmVnh1WEc1Q2RXWm1aWEl1Y0hKdmRHOTBlWEJsTG5SdlUzUnlhVzVuSUQwZ1puVnVZM1JwYjI0Z0tHVnVZMjlrYVc1bkxDQnpkR0Z5ZEN3Z1pXNWtLU0I3WEc0Z0lIWmhjaUJ6Wld4bUlEMGdkR2hwYzF4dVhHNGdJR1Z1WTI5a2FXNW5JRDBnVTNSeWFXNW5LR1Z1WTI5a2FXNW5JSHg4SUNkMWRHWTRKeWt1ZEc5TWIzZGxja05oYzJVb0tWeHVJQ0J6ZEdGeWRDQTlJRTUxYldKbGNpaHpkR0Z5ZENrZ2ZId2dNRnh1SUNCbGJtUWdQU0FvWlc1a0lDRTlQU0IxYm1SbFptbHVaV1FwWEc0Z0lDQWdQeUJPZFcxaVpYSW9aVzVrS1Z4dUlDQWdJRG9nWlc1a0lEMGdjMlZzWmk1c1pXNW5kR2hjYmx4dUlDQXZMeUJHWVhOMGNHRjBhQ0JsYlhCMGVTQnpkSEpwYm1kelhHNGdJR2xtSUNobGJtUWdQVDA5SUhOMFlYSjBLVnh1SUNBZ0lISmxkSFZ5YmlBbkoxeHVYRzRnSUhaaGNpQnlaWFJjYmlBZ2MzZHBkR05vSUNobGJtTnZaR2x1WnlrZ2UxeHVJQ0FnSUdOaGMyVWdKMmhsZUNjNlhHNGdJQ0FnSUNCeVpYUWdQU0JmYUdWNFUyeHBZMlVvYzJWc1ppd2djM1JoY25Rc0lHVnVaQ2xjYmlBZ0lDQWdJR0p5WldGclhHNGdJQ0FnWTJGelpTQW5kWFJtT0NjNlhHNGdJQ0FnWTJGelpTQW5kWFJtTFRnbk9seHVJQ0FnSUNBZ2NtVjBJRDBnWDNWMFpqaFRiR2xqWlNoelpXeG1MQ0J6ZEdGeWRDd2daVzVrS1Z4dUlDQWdJQ0FnWW5KbFlXdGNiaUFnSUNCallYTmxJQ2RoYzJOcGFTYzZYRzRnSUNBZ0lDQnlaWFFnUFNCZllYTmphV2xUYkdsalpTaHpaV3htTENCemRHRnlkQ3dnWlc1a0tWeHVJQ0FnSUNBZ1luSmxZV3RjYmlBZ0lDQmpZWE5sSUNkaWFXNWhjbmtuT2x4dUlDQWdJQ0FnY21WMElEMGdYMkpwYm1GeWVWTnNhV05sS0hObGJHWXNJSE4wWVhKMExDQmxibVFwWEc0Z0lDQWdJQ0JpY21WaGExeHVJQ0FnSUdOaGMyVWdKMkpoYzJVMk5DYzZYRzRnSUNBZ0lDQnlaWFFnUFNCZlltRnpaVFkwVTJ4cFkyVW9jMlZzWml3Z2MzUmhjblFzSUdWdVpDbGNiaUFnSUNBZ0lHSnlaV0ZyWEc0Z0lDQWdZMkZ6WlNBbmRXTnpNaWM2WEc0Z0lDQWdZMkZ6WlNBbmRXTnpMVEluT2x4dUlDQWdJR05oYzJVZ0ozVjBaakUyYkdVbk9seHVJQ0FnSUdOaGMyVWdKM1YwWmkweE5teGxKenBjYmlBZ0lDQWdJSEpsZENBOUlGOTFkR1l4Tm14bFUyeHBZMlVvYzJWc1ppd2djM1JoY25Rc0lHVnVaQ2xjYmlBZ0lDQWdJR0p5WldGclhHNGdJQ0FnWkdWbVlYVnNkRHBjYmlBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25WVzVyYm05M2JpQmxibU52WkdsdVp5Y3BYRzRnSUgxY2JpQWdjbVYwZFhKdUlISmxkRnh1ZlZ4dVhHNUNkV1ptWlhJdWNISnZkRzkwZVhCbExuUnZTbE5QVGlBOUlHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ2NtVjBkWEp1SUh0Y2JpQWdJQ0IwZVhCbE9pQW5RblZtWm1WeUp5eGNiaUFnSUNCa1lYUmhPaUJCY25KaGVTNXdjbTkwYjNSNWNHVXVjMnhwWTJVdVkyRnNiQ2gwYUdsekxsOWhjbklnZkh3Z2RHaHBjeXdnTUNsY2JpQWdmVnh1ZlZ4dVhHNHZMeUJqYjNCNUtIUmhjbWRsZEVKMVptWmxjaXdnZEdGeVoyVjBVM1JoY25ROU1Dd2djMjkxY21ObFUzUmhjblE5TUN3Z2MyOTFjbU5sUlc1a1BXSjFabVpsY2k1c1pXNW5kR2dwWEc1Q2RXWm1aWEl1Y0hKdmRHOTBlWEJsTG1OdmNIa2dQU0JtZFc1amRHbHZiaUFvZEdGeVoyVjBMQ0IwWVhKblpYUmZjM1JoY25Rc0lITjBZWEowTENCbGJtUXBJSHRjYmlBZ2RtRnlJSE52ZFhKalpTQTlJSFJvYVhOY2JseHVJQ0JwWmlBb0lYTjBZWEowS1NCemRHRnlkQ0E5SURCY2JpQWdhV1lnS0NGbGJtUWdKaVlnWlc1a0lDRTlQU0F3S1NCbGJtUWdQU0IwYUdsekxteGxibWQwYUZ4dUlDQnBaaUFvSVhSaGNtZGxkRjl6ZEdGeWRDa2dkR0Z5WjJWMFgzTjBZWEowSUQwZ01GeHVYRzRnSUM4dklFTnZjSGtnTUNCaWVYUmxjenNnZDJVbmNtVWdaRzl1WlZ4dUlDQnBaaUFvWlc1a0lEMDlQU0J6ZEdGeWRDa2djbVYwZFhKdVhHNGdJR2xtSUNoMFlYSm5aWFF1YkdWdVozUm9JRDA5UFNBd0lIeDhJSE52ZFhKalpTNXNaVzVuZEdnZ1BUMDlJREFwSUhKbGRIVnlibHh1WEc0Z0lDOHZJRVpoZEdGc0lHVnljbTl5SUdOdmJtUnBkR2x2Ym5OY2JpQWdZWE56WlhKMEtHVnVaQ0ErUFNCemRHRnlkQ3dnSjNOdmRYSmpaVVZ1WkNBOElITnZkWEpqWlZOMFlYSjBKeWxjYmlBZ1lYTnpaWEowS0hSaGNtZGxkRjl6ZEdGeWRDQStQU0F3SUNZbUlIUmhjbWRsZEY5emRHRnlkQ0E4SUhSaGNtZGxkQzVzWlc1bmRHZ3NYRzRnSUNBZ0lDQW5kR0Z5WjJWMFUzUmhjblFnYjNWMElHOW1JR0p2ZFc1a2N5Y3BYRzRnSUdGemMyVnlkQ2h6ZEdGeWRDQStQU0F3SUNZbUlITjBZWEowSUR3Z2MyOTFjbU5sTG14bGJtZDBhQ3dnSjNOdmRYSmpaVk4wWVhKMElHOTFkQ0J2WmlCaWIzVnVaSE1uS1Z4dUlDQmhjM05sY25Rb1pXNWtJRDQ5SURBZ0ppWWdaVzVrSUR3OUlITnZkWEpqWlM1c1pXNW5kR2dzSUNkemIzVnlZMlZGYm1RZ2IzVjBJRzltSUdKdmRXNWtjeWNwWEc1Y2JpQWdMeThnUVhKbElIZGxJRzl2WWo5Y2JpQWdhV1lnS0dWdVpDQStJSFJvYVhNdWJHVnVaM1JvS1Z4dUlDQWdJR1Z1WkNBOUlIUm9hWE11YkdWdVozUm9YRzRnSUdsbUlDaDBZWEpuWlhRdWJHVnVaM1JvSUMwZ2RHRnlaMlYwWDNOMFlYSjBJRHdnWlc1a0lDMGdjM1JoY25RcFhHNGdJQ0FnWlc1a0lEMGdkR0Z5WjJWMExteGxibWQwYUNBdElIUmhjbWRsZEY5emRHRnlkQ0FySUhOMFlYSjBYRzVjYmlBZ2RtRnlJR3hsYmlBOUlHVnVaQ0F0SUhOMFlYSjBYRzVjYmlBZ2FXWWdLR3hsYmlBOElERXdNQ0I4ZkNBaFFuVm1abVZ5TGw5MWMyVlVlWEJsWkVGeWNtRjVjeWtnZTF4dUlDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnYkdWdU95QnBLeXNwWEc0Z0lDQWdJQ0IwWVhKblpYUmJhU0FySUhSaGNtZGxkRjl6ZEdGeWRGMGdQU0IwYUdselcya2dLeUJ6ZEdGeWRGMWNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQjBZWEpuWlhRdVgzTmxkQ2gwYUdsekxuTjFZbUZ5Y21GNUtITjBZWEowTENCemRHRnlkQ0FySUd4bGJpa3NJSFJoY21kbGRGOXpkR0Z5ZENsY2JpQWdmVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmZZbUZ6WlRZMFUyeHBZMlVnS0dKMVppd2djM1JoY25Rc0lHVnVaQ2tnZTF4dUlDQnBaaUFvYzNSaGNuUWdQVDA5SURBZ0ppWWdaVzVrSUQwOVBTQmlkV1l1YkdWdVozUm9LU0I3WEc0Z0lDQWdjbVYwZFhKdUlHSmhjMlUyTkM1bWNtOXRRbmwwWlVGeWNtRjVLR0oxWmlsY2JpQWdmU0JsYkhObElIdGNiaUFnSUNCeVpYUjFjbTRnWW1GelpUWTBMbVp5YjIxQ2VYUmxRWEp5WVhrb1luVm1Mbk5zYVdObEtITjBZWEowTENCbGJtUXBLVnh1SUNCOVhHNTlYRzVjYm1aMWJtTjBhVzl1SUY5MWRHWTRVMnhwWTJVZ0tHSjFaaXdnYzNSaGNuUXNJR1Z1WkNrZ2UxeHVJQ0IyWVhJZ2NtVnpJRDBnSnlkY2JpQWdkbUZ5SUhSdGNDQTlJQ2NuWEc0Z0lHVnVaQ0E5SUUxaGRHZ3ViV2x1S0dKMVppNXNaVzVuZEdnc0lHVnVaQ2xjYmx4dUlDQm1iM0lnS0haaGNpQnBJRDBnYzNSaGNuUTdJR2tnUENCbGJtUTdJR2tyS3lrZ2UxeHVJQ0FnSUdsbUlDaGlkV1piYVYwZ1BEMGdNSGczUmlrZ2UxeHVJQ0FnSUNBZ2NtVnpJQ3M5SUdSbFkyOWtaVlYwWmpoRGFHRnlLSFJ0Y0NrZ0t5QlRkSEpwYm1jdVpuSnZiVU5vWVhKRGIyUmxLR0oxWmx0cFhTbGNiaUFnSUNBZ0lIUnRjQ0E5SUNjblhHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJSFJ0Y0NBclBTQW5KU2NnS3lCaWRXWmJhVjB1ZEc5VGRISnBibWNvTVRZcFhHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ2NtVjBkWEp1SUhKbGN5QXJJR1JsWTI5a1pWVjBaamhEYUdGeUtIUnRjQ2xjYm4xY2JseHVablZ1WTNScGIyNGdYMkZ6WTJscFUyeHBZMlVnS0dKMVppd2djM1JoY25Rc0lHVnVaQ2tnZTF4dUlDQjJZWElnY21WMElEMGdKeWRjYmlBZ1pXNWtJRDBnVFdGMGFDNXRhVzRvWW5WbUxteGxibWQwYUN3Z1pXNWtLVnh1WEc0Z0lHWnZjaUFvZG1GeUlHa2dQU0J6ZEdGeWREc2dhU0E4SUdWdVpEc2dhU3NyS1Z4dUlDQWdJSEpsZENBclBTQlRkSEpwYm1jdVpuSnZiVU5vWVhKRGIyUmxLR0oxWmx0cFhTbGNiaUFnY21WMGRYSnVJSEpsZEZ4dWZWeHVYRzVtZFc1amRHbHZiaUJmWW1sdVlYSjVVMnhwWTJVZ0tHSjFaaXdnYzNSaGNuUXNJR1Z1WkNrZ2UxeHVJQ0J5WlhSMWNtNGdYMkZ6WTJscFUyeHBZMlVvWW5WbUxDQnpkR0Z5ZEN3Z1pXNWtLVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmZhR1Y0VTJ4cFkyVWdLR0oxWml3Z2MzUmhjblFzSUdWdVpDa2dlMXh1SUNCMllYSWdiR1Z1SUQwZ1luVm1MbXhsYm1kMGFGeHVYRzRnSUdsbUlDZ2hjM1JoY25RZ2ZId2djM1JoY25RZ1BDQXdLU0J6ZEdGeWRDQTlJREJjYmlBZ2FXWWdLQ0ZsYm1RZ2ZId2daVzVrSUR3Z01DQjhmQ0JsYm1RZ1BpQnNaVzRwSUdWdVpDQTlJR3hsYmx4dVhHNGdJSFpoY2lCdmRYUWdQU0FuSjF4dUlDQm1iM0lnS0haaGNpQnBJRDBnYzNSaGNuUTdJR2tnUENCbGJtUTdJR2tyS3lrZ2UxeHVJQ0FnSUc5MWRDQXJQU0IwYjBobGVDaGlkV1piYVYwcFhHNGdJSDFjYmlBZ2NtVjBkWEp1SUc5MWRGeHVmVnh1WEc1bWRXNWpkR2x2YmlCZmRYUm1NVFpzWlZOc2FXTmxJQ2hpZFdZc0lITjBZWEowTENCbGJtUXBJSHRjYmlBZ2RtRnlJR0o1ZEdWeklEMGdZblZtTG5Oc2FXTmxLSE4wWVhKMExDQmxibVFwWEc0Z0lIWmhjaUJ5WlhNZ1BTQW5KMXh1SUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElHSjVkR1Z6TG14bGJtZDBhRHNnYVNBclBTQXlLU0I3WEc0Z0lDQWdjbVZ6SUNzOUlGTjBjbWx1Wnk1bWNtOXRRMmhoY2tOdlpHVW9ZbmwwWlhOYmFWMGdLeUJpZVhSbGMxdHBLekZkSUNvZ01qVTJLVnh1SUNCOVhHNGdJSEpsZEhWeWJpQnlaWE5jYm4xY2JseHVRblZtWm1WeUxuQnliM1J2ZEhsd1pTNXpiR2xqWlNBOUlHWjFibU4wYVc5dUlDaHpkR0Z5ZEN3Z1pXNWtLU0I3WEc0Z0lIWmhjaUJzWlc0Z1BTQjBhR2x6TG14bGJtZDBhRnh1SUNCemRHRnlkQ0E5SUdOc1lXMXdLSE4wWVhKMExDQnNaVzRzSURBcFhHNGdJR1Z1WkNBOUlHTnNZVzF3S0dWdVpDd2diR1Z1TENCc1pXNHBYRzVjYmlBZ2FXWWdLRUoxWm1abGNpNWZkWE5sVkhsd1pXUkJjbkpoZVhNcElIdGNiaUFnSUNCeVpYUjFjbTRnUW5WbVptVnlMbDloZFdkdFpXNTBLSFJvYVhNdWMzVmlZWEp5WVhrb2MzUmhjblFzSUdWdVpDa3BYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdkbUZ5SUhOc2FXTmxUR1Z1SUQwZ1pXNWtJQzBnYzNSaGNuUmNiaUFnSUNCMllYSWdibVYzUW5WbUlEMGdibVYzSUVKMVptWmxjaWh6YkdsalpVeGxiaXdnZFc1a1pXWnBibVZrTENCMGNuVmxLVnh1SUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0F3T3lCcElEd2djMnhwWTJWTVpXNDdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ2JtVjNRblZtVzJsZElEMGdkR2hwYzF0cElDc2djM1JoY25SZFhHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQnVaWGRDZFdaY2JpQWdmVnh1ZlZ4dVhHNHZMeUJnWjJWMFlDQjNhV3hzSUdKbElISmxiVzkyWldRZ2FXNGdUbTlrWlNBd0xqRXpLMXh1UW5WbVptVnlMbkJ5YjNSdmRIbHdaUzVuWlhRZ1BTQm1kVzVqZEdsdmJpQW9iMlptYzJWMEtTQjdYRzRnSUdOdmJuTnZiR1V1Ykc5bktDY3VaMlYwS0NrZ2FYTWdaR1Z3Y21WallYUmxaQzRnUVdOalpYTnpJSFZ6YVc1bklHRnljbUY1SUdsdVpHVjRaWE1nYVc1emRHVmhaQzRuS1Z4dUlDQnlaWFIxY200Z2RHaHBjeTV5WldGa1ZVbHVkRGdvYjJabWMyVjBLVnh1ZlZ4dVhHNHZMeUJnYzJWMFlDQjNhV3hzSUdKbElISmxiVzkyWldRZ2FXNGdUbTlrWlNBd0xqRXpLMXh1UW5WbVptVnlMbkJ5YjNSdmRIbHdaUzV6WlhRZ1BTQm1kVzVqZEdsdmJpQW9kaXdnYjJabWMyVjBLU0I3WEc0Z0lHTnZibk52YkdVdWJHOW5LQ2N1YzJWMEtDa2dhWE1nWkdWd2NtVmpZWFJsWkM0Z1FXTmpaWE56SUhWemFXNW5JR0Z5Y21GNUlHbHVaR1Y0WlhNZ2FXNXpkR1ZoWkM0bktWeHVJQ0J5WlhSMWNtNGdkR2hwY3k1M2NtbDBaVlZKYm5RNEtIWXNJRzltWm5ObGRDbGNibjFjYmx4dVFuVm1abVZ5TG5CeWIzUnZkSGx3WlM1eVpXRmtWVWx1ZERnZ1BTQm1kVzVqZEdsdmJpQW9iMlptYzJWMExDQnViMEZ6YzJWeWRDa2dlMXh1SUNCcFppQW9JVzV2UVhOelpYSjBLU0I3WEc0Z0lDQWdZWE56WlhKMEtHOW1abk5sZENBaFBUMGdkVzVrWldacGJtVmtJQ1ltSUc5bVpuTmxkQ0FoUFQwZ2JuVnNiQ3dnSjIxcGMzTnBibWNnYjJabWMyVjBKeWxjYmlBZ0lDQmhjM05sY25Rb2IyWm1jMlYwSUR3Z2RHaHBjeTVzWlc1bmRHZ3NJQ2RVY25scGJtY2dkRzhnY21WaFpDQmlaWGx2Ym1RZ1luVm1abVZ5SUd4bGJtZDBhQ2NwWEc0Z0lIMWNibHh1SUNCcFppQW9iMlptYzJWMElENDlJSFJvYVhNdWJHVnVaM1JvS1Z4dUlDQWdJSEpsZEhWeWJseHVYRzRnSUhKbGRIVnliaUIwYUdselcyOW1abk5sZEYxY2JuMWNibHh1Wm5WdVkzUnBiMjRnWDNKbFlXUlZTVzUwTVRZZ0tHSjFaaXdnYjJabWMyVjBMQ0JzYVhSMGJHVkZibVJwWVc0c0lHNXZRWE56WlhKMEtTQjdYRzRnSUdsbUlDZ2hibTlCYzNObGNuUXBJSHRjYmlBZ0lDQmhjM05sY25Rb2RIbHdaVzltSUd4cGRIUnNaVVZ1WkdsaGJpQTlQVDBnSjJKdmIyeGxZVzRuTENBbmJXbHpjMmx1WnlCdmNpQnBiblpoYkdsa0lHVnVaR2xoYmljcFhHNGdJQ0FnWVhOelpYSjBLRzltWm5ObGRDQWhQVDBnZFc1a1pXWnBibVZrSUNZbUlHOW1abk5sZENBaFBUMGdiblZzYkN3Z0oyMXBjM05wYm1jZ2IyWm1jMlYwSnlsY2JpQWdJQ0JoYzNObGNuUW9iMlptYzJWMElDc2dNU0E4SUdKMVppNXNaVzVuZEdnc0lDZFVjbmxwYm1jZ2RHOGdjbVZoWkNCaVpYbHZibVFnWW5WbVptVnlJR3hsYm1kMGFDY3BYRzRnSUgxY2JseHVJQ0IyWVhJZ2JHVnVJRDBnWW5WbUxteGxibWQwYUZ4dUlDQnBaaUFvYjJabWMyVjBJRDQ5SUd4bGJpbGNiaUFnSUNCeVpYUjFjbTVjYmx4dUlDQjJZWElnZG1Gc1hHNGdJR2xtSUNoc2FYUjBiR1ZGYm1ScFlXNHBJSHRjYmlBZ0lDQjJZV3dnUFNCaWRXWmJiMlptYzJWMFhWeHVJQ0FnSUdsbUlDaHZabVp6WlhRZ0t5QXhJRHdnYkdWdUtWeHVJQ0FnSUNBZ2RtRnNJSHc5SUdKMVpsdHZabVp6WlhRZ0t5QXhYU0E4UENBNFhHNGdJSDBnWld4elpTQjdYRzRnSUNBZ2RtRnNJRDBnWW5WbVcyOW1abk5sZEYwZ1BEd2dPRnh1SUNBZ0lHbG1JQ2h2Wm1aelpYUWdLeUF4SUR3Z2JHVnVLVnh1SUNBZ0lDQWdkbUZzSUh3OUlHSjFabHR2Wm1aelpYUWdLeUF4WFZ4dUlDQjlYRzRnSUhKbGRIVnliaUIyWVd4Y2JuMWNibHh1UW5WbVptVnlMbkJ5YjNSdmRIbHdaUzV5WldGa1ZVbHVkREUyVEVVZ1BTQm1kVzVqZEdsdmJpQW9iMlptYzJWMExDQnViMEZ6YzJWeWRDa2dlMXh1SUNCeVpYUjFjbTRnWDNKbFlXUlZTVzUwTVRZb2RHaHBjeXdnYjJabWMyVjBMQ0IwY25WbExDQnViMEZ6YzJWeWRDbGNibjFjYmx4dVFuVm1abVZ5TG5CeWIzUnZkSGx3WlM1eVpXRmtWVWx1ZERFMlFrVWdQU0JtZFc1amRHbHZiaUFvYjJabWMyVjBMQ0J1YjBGemMyVnlkQ2tnZTF4dUlDQnlaWFIxY200Z1gzSmxZV1JWU1c1ME1UWW9kR2hwY3l3Z2IyWm1jMlYwTENCbVlXeHpaU3dnYm05QmMzTmxjblFwWEc1OVhHNWNibVoxYm1OMGFXOXVJRjl5WldGa1ZVbHVkRE15SUNoaWRXWXNJRzltWm5ObGRDd2diR2wwZEd4bFJXNWthV0Z1TENCdWIwRnpjMlZ5ZENrZ2UxeHVJQ0JwWmlBb0lXNXZRWE56WlhKMEtTQjdYRzRnSUNBZ1lYTnpaWEowS0hSNWNHVnZaaUJzYVhSMGJHVkZibVJwWVc0Z1BUMDlJQ2RpYjI5c1pXRnVKeXdnSjIxcGMzTnBibWNnYjNJZ2FXNTJZV3hwWkNCbGJtUnBZVzRuS1Z4dUlDQWdJR0Z6YzJWeWRDaHZabVp6WlhRZ0lUMDlJSFZ1WkdWbWFXNWxaQ0FtSmlCdlptWnpaWFFnSVQwOUlHNTFiR3dzSUNkdGFYTnphVzVuSUc5bVpuTmxkQ2NwWEc0Z0lDQWdZWE56WlhKMEtHOW1abk5sZENBcklETWdQQ0JpZFdZdWJHVnVaM1JvTENBblZISjVhVzVuSUhSdklISmxZV1FnWW1WNWIyNWtJR0oxWm1abGNpQnNaVzVuZEdnbktWeHVJQ0I5WEc1Y2JpQWdkbUZ5SUd4bGJpQTlJR0oxWmk1c1pXNW5kR2hjYmlBZ2FXWWdLRzltWm5ObGRDQStQU0JzWlc0cFhHNGdJQ0FnY21WMGRYSnVYRzVjYmlBZ2RtRnlJSFpoYkZ4dUlDQnBaaUFvYkdsMGRHeGxSVzVrYVdGdUtTQjdYRzRnSUNBZ2FXWWdLRzltWm5ObGRDQXJJRElnUENCc1pXNHBYRzRnSUNBZ0lDQjJZV3dnUFNCaWRXWmJiMlptYzJWMElDc2dNbDBnUER3Z01UWmNiaUFnSUNCcFppQW9iMlptYzJWMElDc2dNU0E4SUd4bGJpbGNiaUFnSUNBZ0lIWmhiQ0I4UFNCaWRXWmJiMlptYzJWMElDc2dNVjBnUER3Z09GeHVJQ0FnSUhaaGJDQjhQU0JpZFdaYmIyWm1jMlYwWFZ4dUlDQWdJR2xtSUNodlptWnpaWFFnS3lBeklEd2diR1Z1S1Z4dUlDQWdJQ0FnZG1Gc0lEMGdkbUZzSUNzZ0tHSjFabHR2Wm1aelpYUWdLeUF6WFNBOFBDQXlOQ0ErUGo0Z01DbGNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQnBaaUFvYjJabWMyVjBJQ3NnTVNBOElHeGxiaWxjYmlBZ0lDQWdJSFpoYkNBOUlHSjFabHR2Wm1aelpYUWdLeUF4WFNBOFBDQXhObHh1SUNBZ0lHbG1JQ2h2Wm1aelpYUWdLeUF5SUR3Z2JHVnVLVnh1SUNBZ0lDQWdkbUZzSUh3OUlHSjFabHR2Wm1aelpYUWdLeUF5WFNBOFBDQTRYRzRnSUNBZ2FXWWdLRzltWm5ObGRDQXJJRE1nUENCc1pXNHBYRzRnSUNBZ0lDQjJZV3dnZkQwZ1luVm1XMjltWm5ObGRDQXJJRE5kWEc0Z0lDQWdkbUZzSUQwZ2RtRnNJQ3NnS0dKMVpsdHZabVp6WlhSZElEdzhJREkwSUQ0K1BpQXdLVnh1SUNCOVhHNGdJSEpsZEhWeWJpQjJZV3hjYm4xY2JseHVRblZtWm1WeUxuQnliM1J2ZEhsd1pTNXlaV0ZrVlVsdWRETXlURVVnUFNCbWRXNWpkR2x2YmlBb2IyWm1jMlYwTENCdWIwRnpjMlZ5ZENrZ2UxeHVJQ0J5WlhSMWNtNGdYM0psWVdSVlNXNTBNeklvZEdocGN5d2diMlptYzJWMExDQjBjblZsTENCdWIwRnpjMlZ5ZENsY2JuMWNibHh1UW5WbVptVnlMbkJ5YjNSdmRIbHdaUzV5WldGa1ZVbHVkRE15UWtVZ1BTQm1kVzVqZEdsdmJpQW9iMlptYzJWMExDQnViMEZ6YzJWeWRDa2dlMXh1SUNCeVpYUjFjbTRnWDNKbFlXUlZTVzUwTXpJb2RHaHBjeXdnYjJabWMyVjBMQ0JtWVd4elpTd2dibTlCYzNObGNuUXBYRzU5WEc1Y2JrSjFabVpsY2k1d2NtOTBiM1I1Y0dVdWNtVmhaRWx1ZERnZ1BTQm1kVzVqZEdsdmJpQW9iMlptYzJWMExDQnViMEZ6YzJWeWRDa2dlMXh1SUNCcFppQW9JVzV2UVhOelpYSjBLU0I3WEc0Z0lDQWdZWE56WlhKMEtHOW1abk5sZENBaFBUMGdkVzVrWldacGJtVmtJQ1ltSUc5bVpuTmxkQ0FoUFQwZ2JuVnNiQ3hjYmlBZ0lDQWdJQ0FnSjIxcGMzTnBibWNnYjJabWMyVjBKeWxjYmlBZ0lDQmhjM05sY25Rb2IyWm1jMlYwSUR3Z2RHaHBjeTVzWlc1bmRHZ3NJQ2RVY25scGJtY2dkRzhnY21WaFpDQmlaWGx2Ym1RZ1luVm1abVZ5SUd4bGJtZDBhQ2NwWEc0Z0lIMWNibHh1SUNCcFppQW9iMlptYzJWMElENDlJSFJvYVhNdWJHVnVaM1JvS1Z4dUlDQWdJSEpsZEhWeWJseHVYRzRnSUhaaGNpQnVaV2NnUFNCMGFHbHpXMjltWm5ObGRGMGdKaUF3ZURnd1hHNGdJR2xtSUNodVpXY3BYRzRnSUNBZ2NtVjBkWEp1SUNnd2VHWm1JQzBnZEdocGMxdHZabVp6WlhSZElDc2dNU2tnS2lBdE1WeHVJQ0JsYkhObFhHNGdJQ0FnY21WMGRYSnVJSFJvYVhOYmIyWm1jMlYwWFZ4dWZWeHVYRzVtZFc1amRHbHZiaUJmY21WaFpFbHVkREUySUNoaWRXWXNJRzltWm5ObGRDd2diR2wwZEd4bFJXNWthV0Z1TENCdWIwRnpjMlZ5ZENrZ2UxeHVJQ0JwWmlBb0lXNXZRWE56WlhKMEtTQjdYRzRnSUNBZ1lYTnpaWEowS0hSNWNHVnZaaUJzYVhSMGJHVkZibVJwWVc0Z1BUMDlJQ2RpYjI5c1pXRnVKeXdnSjIxcGMzTnBibWNnYjNJZ2FXNTJZV3hwWkNCbGJtUnBZVzRuS1Z4dUlDQWdJR0Z6YzJWeWRDaHZabVp6WlhRZ0lUMDlJSFZ1WkdWbWFXNWxaQ0FtSmlCdlptWnpaWFFnSVQwOUlHNTFiR3dzSUNkdGFYTnphVzVuSUc5bVpuTmxkQ2NwWEc0Z0lDQWdZWE56WlhKMEtHOW1abk5sZENBcklERWdQQ0JpZFdZdWJHVnVaM1JvTENBblZISjVhVzVuSUhSdklISmxZV1FnWW1WNWIyNWtJR0oxWm1abGNpQnNaVzVuZEdnbktWeHVJQ0I5WEc1Y2JpQWdkbUZ5SUd4bGJpQTlJR0oxWmk1c1pXNW5kR2hjYmlBZ2FXWWdLRzltWm5ObGRDQStQU0JzWlc0cFhHNGdJQ0FnY21WMGRYSnVYRzVjYmlBZ2RtRnlJSFpoYkNBOUlGOXlaV0ZrVlVsdWRERTJLR0oxWml3Z2IyWm1jMlYwTENCc2FYUjBiR1ZGYm1ScFlXNHNJSFJ5ZFdVcFhHNGdJSFpoY2lCdVpXY2dQU0IyWVd3Z0ppQXdlRGd3TURCY2JpQWdhV1lnS0c1bFp5bGNiaUFnSUNCeVpYUjFjbTRnS0RCNFptWm1aaUF0SUhaaGJDQXJJREVwSUNvZ0xURmNiaUFnWld4elpWeHVJQ0FnSUhKbGRIVnliaUIyWVd4Y2JuMWNibHh1UW5WbVptVnlMbkJ5YjNSdmRIbHdaUzV5WldGa1NXNTBNVFpNUlNBOUlHWjFibU4wYVc5dUlDaHZabVp6WlhRc0lHNXZRWE56WlhKMEtTQjdYRzRnSUhKbGRIVnliaUJmY21WaFpFbHVkREUyS0hSb2FYTXNJRzltWm5ObGRDd2dkSEoxWlN3Z2JtOUJjM05sY25RcFhHNTlYRzVjYmtKMVptWmxjaTV3Y205MGIzUjVjR1V1Y21WaFpFbHVkREUyUWtVZ1BTQm1kVzVqZEdsdmJpQW9iMlptYzJWMExDQnViMEZ6YzJWeWRDa2dlMXh1SUNCeVpYUjFjbTRnWDNKbFlXUkpiblF4TmloMGFHbHpMQ0J2Wm1aelpYUXNJR1poYkhObExDQnViMEZ6YzJWeWRDbGNibjFjYmx4dVpuVnVZM1JwYjI0Z1gzSmxZV1JKYm5Rek1pQW9ZblZtTENCdlptWnpaWFFzSUd4cGRIUnNaVVZ1WkdsaGJpd2dibTlCYzNObGNuUXBJSHRjYmlBZ2FXWWdLQ0Z1YjBGemMyVnlkQ2tnZTF4dUlDQWdJR0Z6YzJWeWRDaDBlWEJsYjJZZ2JHbDBkR3hsUlc1a2FXRnVJRDA5UFNBblltOXZiR1ZoYmljc0lDZHRhWE56YVc1bklHOXlJR2x1ZG1Gc2FXUWdaVzVrYVdGdUp5bGNiaUFnSUNCaGMzTmxjblFvYjJabWMyVjBJQ0U5UFNCMWJtUmxabWx1WldRZ0ppWWdiMlptYzJWMElDRTlQU0J1ZFd4c0xDQW5iV2x6YzJsdVp5QnZabVp6WlhRbktWeHVJQ0FnSUdGemMyVnlkQ2h2Wm1aelpYUWdLeUF6SUR3Z1luVm1MbXhsYm1kMGFDd2dKMVJ5ZVdsdVp5QjBieUJ5WldGa0lHSmxlVzl1WkNCaWRXWm1aWElnYkdWdVozUm9KeWxjYmlBZ2ZWeHVYRzRnSUhaaGNpQnNaVzRnUFNCaWRXWXViR1Z1WjNSb1hHNGdJR2xtSUNodlptWnpaWFFnUGowZ2JHVnVLVnh1SUNBZ0lISmxkSFZ5Ymx4dVhHNGdJSFpoY2lCMllXd2dQU0JmY21WaFpGVkpiblF6TWloaWRXWXNJRzltWm5ObGRDd2diR2wwZEd4bFJXNWthV0Z1TENCMGNuVmxLVnh1SUNCMllYSWdibVZuSUQwZ2RtRnNJQ1lnTUhnNE1EQXdNREF3TUZ4dUlDQnBaaUFvYm1WbktWeHVJQ0FnSUhKbGRIVnliaUFvTUhobVptWm1abVptWmlBdElIWmhiQ0FySURFcElDb2dMVEZjYmlBZ1pXeHpaVnh1SUNBZ0lISmxkSFZ5YmlCMllXeGNibjFjYmx4dVFuVm1abVZ5TG5CeWIzUnZkSGx3WlM1eVpXRmtTVzUwTXpKTVJTQTlJR1oxYm1OMGFXOXVJQ2h2Wm1aelpYUXNJRzV2UVhOelpYSjBLU0I3WEc0Z0lISmxkSFZ5YmlCZmNtVmhaRWx1ZERNeUtIUm9hWE1zSUc5bVpuTmxkQ3dnZEhKMVpTd2dibTlCYzNObGNuUXBYRzU5WEc1Y2JrSjFabVpsY2k1d2NtOTBiM1I1Y0dVdWNtVmhaRWx1ZERNeVFrVWdQU0JtZFc1amRHbHZiaUFvYjJabWMyVjBMQ0J1YjBGemMyVnlkQ2tnZTF4dUlDQnlaWFIxY200Z1gzSmxZV1JKYm5Rek1paDBhR2x6TENCdlptWnpaWFFzSUdaaGJITmxMQ0J1YjBGemMyVnlkQ2xjYm4xY2JseHVablZ1WTNScGIyNGdYM0psWVdSR2JHOWhkQ0FvWW5WbUxDQnZabVp6WlhRc0lHeHBkSFJzWlVWdVpHbGhiaXdnYm05QmMzTmxjblFwSUh0Y2JpQWdhV1lnS0NGdWIwRnpjMlZ5ZENrZ2UxeHVJQ0FnSUdGemMyVnlkQ2gwZVhCbGIyWWdiR2wwZEd4bFJXNWthV0Z1SUQwOVBTQW5ZbTl2YkdWaGJpY3NJQ2R0YVhOemFXNW5JRzl5SUdsdWRtRnNhV1FnWlc1a2FXRnVKeWxjYmlBZ0lDQmhjM05sY25Rb2IyWm1jMlYwSUNzZ015QThJR0oxWmk1c1pXNW5kR2dzSUNkVWNubHBibWNnZEc4Z2NtVmhaQ0JpWlhsdmJtUWdZblZtWm1WeUlHeGxibWQwYUNjcFhHNGdJSDFjYmx4dUlDQnlaWFIxY200Z2FXVmxaVGMxTkM1eVpXRmtLR0oxWml3Z2IyWm1jMlYwTENCc2FYUjBiR1ZGYm1ScFlXNHNJREl6TENBMEtWeHVmVnh1WEc1Q2RXWm1aWEl1Y0hKdmRHOTBlWEJsTG5KbFlXUkdiRzloZEV4RklEMGdablZ1WTNScGIyNGdLRzltWm5ObGRDd2dibTlCYzNObGNuUXBJSHRjYmlBZ2NtVjBkWEp1SUY5eVpXRmtSbXh2WVhRb2RHaHBjeXdnYjJabWMyVjBMQ0IwY25WbExDQnViMEZ6YzJWeWRDbGNibjFjYmx4dVFuVm1abVZ5TG5CeWIzUnZkSGx3WlM1eVpXRmtSbXh2WVhSQ1JTQTlJR1oxYm1OMGFXOXVJQ2h2Wm1aelpYUXNJRzV2UVhOelpYSjBLU0I3WEc0Z0lISmxkSFZ5YmlCZmNtVmhaRVpzYjJGMEtIUm9hWE1zSUc5bVpuTmxkQ3dnWm1Gc2MyVXNJRzV2UVhOelpYSjBLVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmZjbVZoWkVSdmRXSnNaU0FvWW5WbUxDQnZabVp6WlhRc0lHeHBkSFJzWlVWdVpHbGhiaXdnYm05QmMzTmxjblFwSUh0Y2JpQWdhV1lnS0NGdWIwRnpjMlZ5ZENrZ2UxeHVJQ0FnSUdGemMyVnlkQ2gwZVhCbGIyWWdiR2wwZEd4bFJXNWthV0Z1SUQwOVBTQW5ZbTl2YkdWaGJpY3NJQ2R0YVhOemFXNW5JRzl5SUdsdWRtRnNhV1FnWlc1a2FXRnVKeWxjYmlBZ0lDQmhjM05sY25Rb2IyWm1jMlYwSUNzZ055QThJR0oxWmk1c1pXNW5kR2dzSUNkVWNubHBibWNnZEc4Z2NtVmhaQ0JpWlhsdmJtUWdZblZtWm1WeUlHeGxibWQwYUNjcFhHNGdJSDFjYmx4dUlDQnlaWFIxY200Z2FXVmxaVGMxTkM1eVpXRmtLR0oxWml3Z2IyWm1jMlYwTENCc2FYUjBiR1ZGYm1ScFlXNHNJRFV5TENBNEtWeHVmVnh1WEc1Q2RXWm1aWEl1Y0hKdmRHOTBlWEJsTG5KbFlXUkViM1ZpYkdWTVJTQTlJR1oxYm1OMGFXOXVJQ2h2Wm1aelpYUXNJRzV2UVhOelpYSjBLU0I3WEc0Z0lISmxkSFZ5YmlCZmNtVmhaRVJ2ZFdKc1pTaDBhR2x6TENCdlptWnpaWFFzSUhSeWRXVXNJRzV2UVhOelpYSjBLVnh1ZlZ4dVhHNUNkV1ptWlhJdWNISnZkRzkwZVhCbExuSmxZV1JFYjNWaWJHVkNSU0E5SUdaMWJtTjBhVzl1SUNodlptWnpaWFFzSUc1dlFYTnpaWEowS1NCN1hHNGdJSEpsZEhWeWJpQmZjbVZoWkVSdmRXSnNaU2gwYUdsekxDQnZabVp6WlhRc0lHWmhiSE5sTENCdWIwRnpjMlZ5ZENsY2JuMWNibHh1UW5WbVptVnlMbkJ5YjNSdmRIbHdaUzUzY21sMFpWVkpiblE0SUQwZ1puVnVZM1JwYjI0Z0tIWmhiSFZsTENCdlptWnpaWFFzSUc1dlFYTnpaWEowS1NCN1hHNGdJR2xtSUNnaGJtOUJjM05sY25RcElIdGNiaUFnSUNCaGMzTmxjblFvZG1Gc2RXVWdJVDA5SUhWdVpHVm1hVzVsWkNBbUppQjJZV3gxWlNBaFBUMGdiblZzYkN3Z0oyMXBjM05wYm1jZ2RtRnNkV1VuS1Z4dUlDQWdJR0Z6YzJWeWRDaHZabVp6WlhRZ0lUMDlJSFZ1WkdWbWFXNWxaQ0FtSmlCdlptWnpaWFFnSVQwOUlHNTFiR3dzSUNkdGFYTnphVzVuSUc5bVpuTmxkQ2NwWEc0Z0lDQWdZWE56WlhKMEtHOW1abk5sZENBOElIUm9hWE11YkdWdVozUm9MQ0FuZEhKNWFXNW5JSFJ2SUhkeWFYUmxJR0psZVc5dVpDQmlkV1ptWlhJZ2JHVnVaM1JvSnlsY2JpQWdJQ0IyWlhKcFpuVnBiblFvZG1Gc2RXVXNJREI0Wm1ZcFhHNGdJSDFjYmx4dUlDQnBaaUFvYjJabWMyVjBJRDQ5SUhSb2FYTXViR1Z1WjNSb0tTQnlaWFIxY201Y2JseHVJQ0IwYUdselcyOW1abk5sZEYwZ1BTQjJZV3gxWlZ4dWZWeHVYRzVtZFc1amRHbHZiaUJmZDNKcGRHVlZTVzUwTVRZZ0tHSjFaaXdnZG1Gc2RXVXNJRzltWm5ObGRDd2diR2wwZEd4bFJXNWthV0Z1TENCdWIwRnpjMlZ5ZENrZ2UxeHVJQ0JwWmlBb0lXNXZRWE56WlhKMEtTQjdYRzRnSUNBZ1lYTnpaWEowS0haaGJIVmxJQ0U5UFNCMWJtUmxabWx1WldRZ0ppWWdkbUZzZFdVZ0lUMDlJRzUxYkd3c0lDZHRhWE56YVc1bklIWmhiSFZsSnlsY2JpQWdJQ0JoYzNObGNuUW9kSGx3Wlc5bUlHeHBkSFJzWlVWdVpHbGhiaUE5UFQwZ0oySnZiMnhsWVc0bkxDQW5iV2x6YzJsdVp5QnZjaUJwYm5aaGJHbGtJR1Z1WkdsaGJpY3BYRzRnSUNBZ1lYTnpaWEowS0c5bVpuTmxkQ0FoUFQwZ2RXNWtaV1pwYm1Wa0lDWW1JRzltWm5ObGRDQWhQVDBnYm5Wc2JDd2dKMjFwYzNOcGJtY2diMlptYzJWMEp5bGNiaUFnSUNCaGMzTmxjblFvYjJabWMyVjBJQ3NnTVNBOElHSjFaaTVzWlc1bmRHZ3NJQ2QwY25scGJtY2dkRzhnZDNKcGRHVWdZbVY1YjI1a0lHSjFabVpsY2lCc1pXNW5kR2duS1Z4dUlDQWdJSFpsY21sbWRXbHVkQ2gyWVd4MVpTd2dNSGhtWm1abUtWeHVJQ0I5WEc1Y2JpQWdkbUZ5SUd4bGJpQTlJR0oxWmk1c1pXNW5kR2hjYmlBZ2FXWWdLRzltWm5ObGRDQStQU0JzWlc0cFhHNGdJQ0FnY21WMGRYSnVYRzVjYmlBZ1ptOXlJQ2gyWVhJZ2FTQTlJREFzSUdvZ1BTQk5ZWFJvTG0xcGJpaHNaVzRnTFNCdlptWnpaWFFzSURJcE95QnBJRHdnYWpzZ2FTc3JLU0I3WEc0Z0lDQWdZblZtVzI5bVpuTmxkQ0FySUdsZElEMWNiaUFnSUNBZ0lDQWdLSFpoYkhWbElDWWdLREI0Wm1ZZ1BEd2dLRGdnS2lBb2JHbDBkR3hsUlc1a2FXRnVJRDhnYVNBNklERWdMU0JwS1NrcEtTQStQajVjYmlBZ0lDQWdJQ0FnSUNBZ0lDaHNhWFIwYkdWRmJtUnBZVzRnUHlCcElEb2dNU0F0SUdrcElDb2dPRnh1SUNCOVhHNTlYRzVjYmtKMVptWmxjaTV3Y205MGIzUjVjR1V1ZDNKcGRHVlZTVzUwTVRaTVJTQTlJR1oxYm1OMGFXOXVJQ2gyWVd4MVpTd2diMlptYzJWMExDQnViMEZ6YzJWeWRDa2dlMXh1SUNCZmQzSnBkR1ZWU1c1ME1UWW9kR2hwY3l3Z2RtRnNkV1VzSUc5bVpuTmxkQ3dnZEhKMVpTd2dibTlCYzNObGNuUXBYRzU5WEc1Y2JrSjFabVpsY2k1d2NtOTBiM1I1Y0dVdWQzSnBkR1ZWU1c1ME1UWkNSU0E5SUdaMWJtTjBhVzl1SUNoMllXeDFaU3dnYjJabWMyVjBMQ0J1YjBGemMyVnlkQ2tnZTF4dUlDQmZkM0pwZEdWVlNXNTBNVFlvZEdocGN5d2dkbUZzZFdVc0lHOW1abk5sZEN3Z1ptRnNjMlVzSUc1dlFYTnpaWEowS1Z4dWZWeHVYRzVtZFc1amRHbHZiaUJmZDNKcGRHVlZTVzUwTXpJZ0tHSjFaaXdnZG1Gc2RXVXNJRzltWm5ObGRDd2diR2wwZEd4bFJXNWthV0Z1TENCdWIwRnpjMlZ5ZENrZ2UxeHVJQ0JwWmlBb0lXNXZRWE56WlhKMEtTQjdYRzRnSUNBZ1lYTnpaWEowS0haaGJIVmxJQ0U5UFNCMWJtUmxabWx1WldRZ0ppWWdkbUZzZFdVZ0lUMDlJRzUxYkd3c0lDZHRhWE56YVc1bklIWmhiSFZsSnlsY2JpQWdJQ0JoYzNObGNuUW9kSGx3Wlc5bUlHeHBkSFJzWlVWdVpHbGhiaUE5UFQwZ0oySnZiMnhsWVc0bkxDQW5iV2x6YzJsdVp5QnZjaUJwYm5aaGJHbGtJR1Z1WkdsaGJpY3BYRzRnSUNBZ1lYTnpaWEowS0c5bVpuTmxkQ0FoUFQwZ2RXNWtaV1pwYm1Wa0lDWW1JRzltWm5ObGRDQWhQVDBnYm5Wc2JDd2dKMjFwYzNOcGJtY2diMlptYzJWMEp5bGNiaUFnSUNCaGMzTmxjblFvYjJabWMyVjBJQ3NnTXlBOElHSjFaaTVzWlc1bmRHZ3NJQ2QwY25scGJtY2dkRzhnZDNKcGRHVWdZbVY1YjI1a0lHSjFabVpsY2lCc1pXNW5kR2duS1Z4dUlDQWdJSFpsY21sbWRXbHVkQ2gyWVd4MVpTd2dNSGhtWm1abVptWm1aaWxjYmlBZ2ZWeHVYRzRnSUhaaGNpQnNaVzRnUFNCaWRXWXViR1Z1WjNSb1hHNGdJR2xtSUNodlptWnpaWFFnUGowZ2JHVnVLVnh1SUNBZ0lISmxkSFZ5Ymx4dVhHNGdJR1p2Y2lBb2RtRnlJR2tnUFNBd0xDQnFJRDBnVFdGMGFDNXRhVzRvYkdWdUlDMGdiMlptYzJWMExDQTBLVHNnYVNBOElHbzdJR2tyS3lrZ2UxeHVJQ0FnSUdKMVpsdHZabVp6WlhRZ0t5QnBYU0E5WEc0Z0lDQWdJQ0FnSUNoMllXeDFaU0ErUGo0Z0tHeHBkSFJzWlVWdVpHbGhiaUEvSUdrZ09pQXpJQzBnYVNrZ0tpQTRLU0FtSURCNFptWmNiaUFnZlZ4dWZWeHVYRzVDZFdabVpYSXVjSEp2ZEc5MGVYQmxMbmR5YVhSbFZVbHVkRE15VEVVZ1BTQm1kVzVqZEdsdmJpQW9kbUZzZFdVc0lHOW1abk5sZEN3Z2JtOUJjM05sY25RcElIdGNiaUFnWDNkeWFYUmxWVWx1ZERNeUtIUm9hWE1zSUhaaGJIVmxMQ0J2Wm1aelpYUXNJSFJ5ZFdVc0lHNXZRWE56WlhKMEtWeHVmVnh1WEc1Q2RXWm1aWEl1Y0hKdmRHOTBlWEJsTG5keWFYUmxWVWx1ZERNeVFrVWdQU0JtZFc1amRHbHZiaUFvZG1Gc2RXVXNJRzltWm5ObGRDd2dibTlCYzNObGNuUXBJSHRjYmlBZ1gzZHlhWFJsVlVsdWRETXlLSFJvYVhNc0lIWmhiSFZsTENCdlptWnpaWFFzSUdaaGJITmxMQ0J1YjBGemMyVnlkQ2xjYm4xY2JseHVRblZtWm1WeUxuQnliM1J2ZEhsd1pTNTNjbWwwWlVsdWREZ2dQU0JtZFc1amRHbHZiaUFvZG1Gc2RXVXNJRzltWm5ObGRDd2dibTlCYzNObGNuUXBJSHRjYmlBZ2FXWWdLQ0Z1YjBGemMyVnlkQ2tnZTF4dUlDQWdJR0Z6YzJWeWRDaDJZV3gxWlNBaFBUMGdkVzVrWldacGJtVmtJQ1ltSUhaaGJIVmxJQ0U5UFNCdWRXeHNMQ0FuYldsemMybHVaeUIyWVd4MVpTY3BYRzRnSUNBZ1lYTnpaWEowS0c5bVpuTmxkQ0FoUFQwZ2RXNWtaV1pwYm1Wa0lDWW1JRzltWm5ObGRDQWhQVDBnYm5Wc2JDd2dKMjFwYzNOcGJtY2diMlptYzJWMEp5bGNiaUFnSUNCaGMzTmxjblFvYjJabWMyVjBJRHdnZEdocGN5NXNaVzVuZEdnc0lDZFVjbmxwYm1jZ2RHOGdkM0pwZEdVZ1ltVjViMjVrSUdKMVptWmxjaUJzWlc1bmRHZ25LVnh1SUNBZ0lIWmxjbWxtYzJsdWRDaDJZV3gxWlN3Z01IZzNaaXdnTFRCNE9EQXBYRzRnSUgxY2JseHVJQ0JwWmlBb2IyWm1jMlYwSUQ0OUlIUm9hWE11YkdWdVozUm9LVnh1SUNBZ0lISmxkSFZ5Ymx4dVhHNGdJR2xtSUNoMllXeDFaU0ErUFNBd0tWeHVJQ0FnSUhSb2FYTXVkM0pwZEdWVlNXNTBPQ2gyWVd4MVpTd2diMlptYzJWMExDQnViMEZ6YzJWeWRDbGNiaUFnWld4elpWeHVJQ0FnSUhSb2FYTXVkM0pwZEdWVlNXNTBPQ2d3ZUdabUlDc2dkbUZzZFdVZ0t5QXhMQ0J2Wm1aelpYUXNJRzV2UVhOelpYSjBLVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmZkM0pwZEdWSmJuUXhOaUFvWW5WbUxDQjJZV3gxWlN3Z2IyWm1jMlYwTENCc2FYUjBiR1ZGYm1ScFlXNHNJRzV2UVhOelpYSjBLU0I3WEc0Z0lHbG1JQ2doYm05QmMzTmxjblFwSUh0Y2JpQWdJQ0JoYzNObGNuUW9kbUZzZFdVZ0lUMDlJSFZ1WkdWbWFXNWxaQ0FtSmlCMllXeDFaU0FoUFQwZ2JuVnNiQ3dnSjIxcGMzTnBibWNnZG1Gc2RXVW5LVnh1SUNBZ0lHRnpjMlZ5ZENoMGVYQmxiMllnYkdsMGRHeGxSVzVrYVdGdUlEMDlQU0FuWW05dmJHVmhiaWNzSUNkdGFYTnphVzVuSUc5eUlHbHVkbUZzYVdRZ1pXNWthV0Z1SnlsY2JpQWdJQ0JoYzNObGNuUW9iMlptYzJWMElDRTlQU0IxYm1SbFptbHVaV1FnSmlZZ2IyWm1jMlYwSUNFOVBTQnVkV3hzTENBbmJXbHpjMmx1WnlCdlptWnpaWFFuS1Z4dUlDQWdJR0Z6YzJWeWRDaHZabVp6WlhRZ0t5QXhJRHdnWW5WbUxteGxibWQwYUN3Z0oxUnllV2x1WnlCMGJ5QjNjbWwwWlNCaVpYbHZibVFnWW5WbVptVnlJR3hsYm1kMGFDY3BYRzRnSUNBZ2RtVnlhV1p6YVc1MEtIWmhiSFZsTENBd2VEZG1abVlzSUMwd2VEZ3dNREFwWEc0Z0lIMWNibHh1SUNCMllYSWdiR1Z1SUQwZ1luVm1MbXhsYm1kMGFGeHVJQ0JwWmlBb2IyWm1jMlYwSUQ0OUlHeGxiaWxjYmlBZ0lDQnlaWFIxY201Y2JseHVJQ0JwWmlBb2RtRnNkV1VnUGowZ01DbGNiaUFnSUNCZmQzSnBkR1ZWU1c1ME1UWW9ZblZtTENCMllXeDFaU3dnYjJabWMyVjBMQ0JzYVhSMGJHVkZibVJwWVc0c0lHNXZRWE56WlhKMEtWeHVJQ0JsYkhObFhHNGdJQ0FnWDNkeWFYUmxWVWx1ZERFMktHSjFaaXdnTUhobVptWm1JQ3NnZG1Gc2RXVWdLeUF4TENCdlptWnpaWFFzSUd4cGRIUnNaVVZ1WkdsaGJpd2dibTlCYzNObGNuUXBYRzU5WEc1Y2JrSjFabVpsY2k1d2NtOTBiM1I1Y0dVdWQzSnBkR1ZKYm5ReE5reEZJRDBnWm5WdVkzUnBiMjRnS0haaGJIVmxMQ0J2Wm1aelpYUXNJRzV2UVhOelpYSjBLU0I3WEc0Z0lGOTNjbWwwWlVsdWRERTJLSFJvYVhNc0lIWmhiSFZsTENCdlptWnpaWFFzSUhSeWRXVXNJRzV2UVhOelpYSjBLVnh1ZlZ4dVhHNUNkV1ptWlhJdWNISnZkRzkwZVhCbExuZHlhWFJsU1c1ME1UWkNSU0E5SUdaMWJtTjBhVzl1SUNoMllXeDFaU3dnYjJabWMyVjBMQ0J1YjBGemMyVnlkQ2tnZTF4dUlDQmZkM0pwZEdWSmJuUXhOaWgwYUdsekxDQjJZV3gxWlN3Z2IyWm1jMlYwTENCbVlXeHpaU3dnYm05QmMzTmxjblFwWEc1OVhHNWNibVoxYm1OMGFXOXVJRjkzY21sMFpVbHVkRE15SUNoaWRXWXNJSFpoYkhWbExDQnZabVp6WlhRc0lHeHBkSFJzWlVWdVpHbGhiaXdnYm05QmMzTmxjblFwSUh0Y2JpQWdhV1lnS0NGdWIwRnpjMlZ5ZENrZ2UxeHVJQ0FnSUdGemMyVnlkQ2gyWVd4MVpTQWhQVDBnZFc1a1pXWnBibVZrSUNZbUlIWmhiSFZsSUNFOVBTQnVkV3hzTENBbmJXbHpjMmx1WnlCMllXeDFaU2NwWEc0Z0lDQWdZWE56WlhKMEtIUjVjR1Z2WmlCc2FYUjBiR1ZGYm1ScFlXNGdQVDA5SUNkaWIyOXNaV0Z1Snl3Z0oyMXBjM05wYm1jZ2IzSWdhVzUyWVd4cFpDQmxibVJwWVc0bktWeHVJQ0FnSUdGemMyVnlkQ2h2Wm1aelpYUWdJVDA5SUhWdVpHVm1hVzVsWkNBbUppQnZabVp6WlhRZ0lUMDlJRzUxYkd3c0lDZHRhWE56YVc1bklHOW1abk5sZENjcFhHNGdJQ0FnWVhOelpYSjBLRzltWm5ObGRDQXJJRE1nUENCaWRXWXViR1Z1WjNSb0xDQW5WSEo1YVc1bklIUnZJSGR5YVhSbElHSmxlVzl1WkNCaWRXWm1aWElnYkdWdVozUm9KeWxjYmlBZ0lDQjJaWEpwWm5OcGJuUW9kbUZzZFdVc0lEQjROMlptWm1abVptWXNJQzB3ZURnd01EQXdNREF3S1Z4dUlDQjlYRzVjYmlBZ2RtRnlJR3hsYmlBOUlHSjFaaTVzWlc1bmRHaGNiaUFnYVdZZ0tHOW1abk5sZENBK1BTQnNaVzRwWEc0Z0lDQWdjbVYwZFhKdVhHNWNiaUFnYVdZZ0tIWmhiSFZsSUQ0OUlEQXBYRzRnSUNBZ1gzZHlhWFJsVlVsdWRETXlLR0oxWml3Z2RtRnNkV1VzSUc5bVpuTmxkQ3dnYkdsMGRHeGxSVzVrYVdGdUxDQnViMEZ6YzJWeWRDbGNiaUFnWld4elpWeHVJQ0FnSUY5M2NtbDBaVlZKYm5Rek1paGlkV1lzSURCNFptWm1abVptWm1ZZ0t5QjJZV3gxWlNBcklERXNJRzltWm5ObGRDd2diR2wwZEd4bFJXNWthV0Z1TENCdWIwRnpjMlZ5ZENsY2JuMWNibHh1UW5WbVptVnlMbkJ5YjNSdmRIbHdaUzUzY21sMFpVbHVkRE15VEVVZ1BTQm1kVzVqZEdsdmJpQW9kbUZzZFdVc0lHOW1abk5sZEN3Z2JtOUJjM05sY25RcElIdGNiaUFnWDNkeWFYUmxTVzUwTXpJb2RHaHBjeXdnZG1Gc2RXVXNJRzltWm5ObGRDd2dkSEoxWlN3Z2JtOUJjM05sY25RcFhHNTlYRzVjYmtKMVptWmxjaTV3Y205MGIzUjVjR1V1ZDNKcGRHVkpiblF6TWtKRklEMGdablZ1WTNScGIyNGdLSFpoYkhWbExDQnZabVp6WlhRc0lHNXZRWE56WlhKMEtTQjdYRzRnSUY5M2NtbDBaVWx1ZERNeUtIUm9hWE1zSUhaaGJIVmxMQ0J2Wm1aelpYUXNJR1poYkhObExDQnViMEZ6YzJWeWRDbGNibjFjYmx4dVpuVnVZM1JwYjI0Z1gzZHlhWFJsUm14dllYUWdLR0oxWml3Z2RtRnNkV1VzSUc5bVpuTmxkQ3dnYkdsMGRHeGxSVzVrYVdGdUxDQnViMEZ6YzJWeWRDa2dlMXh1SUNCcFppQW9JVzV2UVhOelpYSjBLU0I3WEc0Z0lDQWdZWE56WlhKMEtIWmhiSFZsSUNFOVBTQjFibVJsWm1sdVpXUWdKaVlnZG1Gc2RXVWdJVDA5SUc1MWJHd3NJQ2R0YVhOemFXNW5JSFpoYkhWbEp5bGNiaUFnSUNCaGMzTmxjblFvZEhsd1pXOW1JR3hwZEhSc1pVVnVaR2xoYmlBOVBUMGdKMkp2YjJ4bFlXNG5MQ0FuYldsemMybHVaeUJ2Y2lCcGJuWmhiR2xrSUdWdVpHbGhiaWNwWEc0Z0lDQWdZWE56WlhKMEtHOW1abk5sZENBaFBUMGdkVzVrWldacGJtVmtJQ1ltSUc5bVpuTmxkQ0FoUFQwZ2JuVnNiQ3dnSjIxcGMzTnBibWNnYjJabWMyVjBKeWxjYmlBZ0lDQmhjM05sY25Rb2IyWm1jMlYwSUNzZ015QThJR0oxWmk1c1pXNW5kR2dzSUNkVWNubHBibWNnZEc4Z2QzSnBkR1VnWW1WNWIyNWtJR0oxWm1abGNpQnNaVzVuZEdnbktWeHVJQ0FnSUhabGNtbG1TVVZGUlRjMU5DaDJZV3gxWlN3Z015NDBNREk0TWpNME5qWXpPRFV5T0RnMlpTc3pPQ3dnTFRNdU5EQXlPREl6TkRZMk16ZzFNamc0Tm1Vck16Z3BYRzRnSUgxY2JseHVJQ0IyWVhJZ2JHVnVJRDBnWW5WbUxteGxibWQwYUZ4dUlDQnBaaUFvYjJabWMyVjBJRDQ5SUd4bGJpbGNiaUFnSUNCeVpYUjFjbTVjYmx4dUlDQnBaV1ZsTnpVMExuZHlhWFJsS0dKMVppd2dkbUZzZFdVc0lHOW1abk5sZEN3Z2JHbDBkR3hsUlc1a2FXRnVMQ0F5TXl3Z05DbGNibjFjYmx4dVFuVm1abVZ5TG5CeWIzUnZkSGx3WlM1M2NtbDBaVVpzYjJGMFRFVWdQU0JtZFc1amRHbHZiaUFvZG1Gc2RXVXNJRzltWm5ObGRDd2dibTlCYzNObGNuUXBJSHRjYmlBZ1gzZHlhWFJsUm14dllYUW9kR2hwY3l3Z2RtRnNkV1VzSUc5bVpuTmxkQ3dnZEhKMVpTd2dibTlCYzNObGNuUXBYRzU5WEc1Y2JrSjFabVpsY2k1d2NtOTBiM1I1Y0dVdWQzSnBkR1ZHYkc5aGRFSkZJRDBnWm5WdVkzUnBiMjRnS0haaGJIVmxMQ0J2Wm1aelpYUXNJRzV2UVhOelpYSjBLU0I3WEc0Z0lGOTNjbWwwWlVac2IyRjBLSFJvYVhNc0lIWmhiSFZsTENCdlptWnpaWFFzSUdaaGJITmxMQ0J1YjBGemMyVnlkQ2xjYm4xY2JseHVablZ1WTNScGIyNGdYM2R5YVhSbFJHOTFZbXhsSUNoaWRXWXNJSFpoYkhWbExDQnZabVp6WlhRc0lHeHBkSFJzWlVWdVpHbGhiaXdnYm05QmMzTmxjblFwSUh0Y2JpQWdhV1lnS0NGdWIwRnpjMlZ5ZENrZ2UxeHVJQ0FnSUdGemMyVnlkQ2gyWVd4MVpTQWhQVDBnZFc1a1pXWnBibVZrSUNZbUlIWmhiSFZsSUNFOVBTQnVkV3hzTENBbmJXbHpjMmx1WnlCMllXeDFaU2NwWEc0Z0lDQWdZWE56WlhKMEtIUjVjR1Z2WmlCc2FYUjBiR1ZGYm1ScFlXNGdQVDA5SUNkaWIyOXNaV0Z1Snl3Z0oyMXBjM05wYm1jZ2IzSWdhVzUyWVd4cFpDQmxibVJwWVc0bktWeHVJQ0FnSUdGemMyVnlkQ2h2Wm1aelpYUWdJVDA5SUhWdVpHVm1hVzVsWkNBbUppQnZabVp6WlhRZ0lUMDlJRzUxYkd3c0lDZHRhWE56YVc1bklHOW1abk5sZENjcFhHNGdJQ0FnWVhOelpYSjBLRzltWm5ObGRDQXJJRGNnUENCaWRXWXViR1Z1WjNSb0xGeHVJQ0FnSUNBZ0lDQW5WSEo1YVc1bklIUnZJSGR5YVhSbElHSmxlVzl1WkNCaWRXWm1aWElnYkdWdVozUm9KeWxjYmlBZ0lDQjJaWEpwWmtsRlJVVTNOVFFvZG1Gc2RXVXNJREV1TnprM05qa3pNVE0wT0RZeU16RTFOMFVyTXpBNExDQXRNUzQzT1RjMk9UTXhNelE0TmpJek1UVTNSU3N6TURncFhHNGdJSDFjYmx4dUlDQjJZWElnYkdWdUlEMGdZblZtTG14bGJtZDBhRnh1SUNCcFppQW9iMlptYzJWMElENDlJR3hsYmlsY2JpQWdJQ0J5WlhSMWNtNWNibHh1SUNCcFpXVmxOelUwTG5keWFYUmxLR0oxWml3Z2RtRnNkV1VzSUc5bVpuTmxkQ3dnYkdsMGRHeGxSVzVrYVdGdUxDQTFNaXdnT0NsY2JuMWNibHh1UW5WbVptVnlMbkJ5YjNSdmRIbHdaUzUzY21sMFpVUnZkV0pzWlV4RklEMGdablZ1WTNScGIyNGdLSFpoYkhWbExDQnZabVp6WlhRc0lHNXZRWE56WlhKMEtTQjdYRzRnSUY5M2NtbDBaVVJ2ZFdKc1pTaDBhR2x6TENCMllXeDFaU3dnYjJabWMyVjBMQ0IwY25WbExDQnViMEZ6YzJWeWRDbGNibjFjYmx4dVFuVm1abVZ5TG5CeWIzUnZkSGx3WlM1M2NtbDBaVVJ2ZFdKc1pVSkZJRDBnWm5WdVkzUnBiMjRnS0haaGJIVmxMQ0J2Wm1aelpYUXNJRzV2UVhOelpYSjBLU0I3WEc0Z0lGOTNjbWwwWlVSdmRXSnNaU2gwYUdsekxDQjJZV3gxWlN3Z2IyWm1jMlYwTENCbVlXeHpaU3dnYm05QmMzTmxjblFwWEc1OVhHNWNiaTh2SUdacGJHd29kbUZzZFdVc0lITjBZWEowUFRBc0lHVnVaRDFpZFdabVpYSXViR1Z1WjNSb0tWeHVRblZtWm1WeUxuQnliM1J2ZEhsd1pTNW1hV3hzSUQwZ1puVnVZM1JwYjI0Z0tIWmhiSFZsTENCemRHRnlkQ3dnWlc1a0tTQjdYRzRnSUdsbUlDZ2hkbUZzZFdVcElIWmhiSFZsSUQwZ01GeHVJQ0JwWmlBb0lYTjBZWEowS1NCemRHRnlkQ0E5SURCY2JpQWdhV1lnS0NGbGJtUXBJR1Z1WkNBOUlIUm9hWE11YkdWdVozUm9YRzVjYmlBZ2FXWWdLSFI1Y0dWdlppQjJZV3gxWlNBOVBUMGdKM04wY21sdVp5Y3BJSHRjYmlBZ0lDQjJZV3gxWlNBOUlIWmhiSFZsTG1Ob1lYSkRiMlJsUVhRb01DbGNiaUFnZlZ4dVhHNGdJR0Z6YzJWeWRDaDBlWEJsYjJZZ2RtRnNkV1VnUFQwOUlDZHVkVzFpWlhJbklDWW1JQ0ZwYzA1aFRpaDJZV3gxWlNrc0lDZDJZV3gxWlNCcGN5QnViM1FnWVNCdWRXMWlaWEluS1Z4dUlDQmhjM05sY25Rb1pXNWtJRDQ5SUhOMFlYSjBMQ0FuWlc1a0lEd2djM1JoY25RbktWeHVYRzRnSUM4dklFWnBiR3dnTUNCaWVYUmxjenNnZDJVbmNtVWdaRzl1WlZ4dUlDQnBaaUFvWlc1a0lEMDlQU0J6ZEdGeWRDa2djbVYwZFhKdVhHNGdJR2xtSUNoMGFHbHpMbXhsYm1kMGFDQTlQVDBnTUNrZ2NtVjBkWEp1WEc1Y2JpQWdZWE56WlhKMEtITjBZWEowSUQ0OUlEQWdKaVlnYzNSaGNuUWdQQ0IwYUdsekxteGxibWQwYUN3Z0ozTjBZWEowSUc5MWRDQnZaaUJpYjNWdVpITW5LVnh1SUNCaGMzTmxjblFvWlc1a0lENDlJREFnSmlZZ1pXNWtJRHc5SUhSb2FYTXViR1Z1WjNSb0xDQW5aVzVrSUc5MWRDQnZaaUJpYjNWdVpITW5LVnh1WEc0Z0lHWnZjaUFvZG1GeUlHa2dQU0J6ZEdGeWREc2dhU0E4SUdWdVpEc2dhU3NyS1NCN1hHNGdJQ0FnZEdocGMxdHBYU0E5SUhaaGJIVmxYRzRnSUgxY2JuMWNibHh1UW5WbVptVnlMbkJ5YjNSdmRIbHdaUzVwYm5Od1pXTjBJRDBnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0IyWVhJZ2IzVjBJRDBnVzExY2JpQWdkbUZ5SUd4bGJpQTlJSFJvYVhNdWJHVnVaM1JvWEc0Z0lHWnZjaUFvZG1GeUlHa2dQU0F3T3lCcElEd2diR1Z1T3lCcEt5c3BJSHRjYmlBZ0lDQnZkWFJiYVYwZ1BTQjBiMGhsZUNoMGFHbHpXMmxkS1Z4dUlDQWdJR2xtSUNocElEMDlQU0JsZUhCdmNuUnpMa2xPVTFCRlExUmZUVUZZWDBKWlZFVlRLU0I3WEc0Z0lDQWdJQ0J2ZFhSYmFTQXJJREZkSUQwZ0p5NHVMaWRjYmlBZ0lDQWdJR0p5WldGclhHNGdJQ0FnZlZ4dUlDQjlYRzRnSUhKbGRIVnliaUFuUEVKMVptWmxjaUFuSUNzZ2IzVjBMbXB2YVc0b0p5QW5LU0FySUNjK0oxeHVmVnh1WEc0dktpcGNiaUFxSUVOeVpXRjBaWE1nWVNCdVpYY2dZRUZ5Y21GNVFuVm1abVZ5WUNCM2FYUm9JSFJvWlNBcVkyOXdhV1ZrS2lCdFpXMXZjbmtnYjJZZ2RHaGxJR0oxWm1abGNpQnBibk4wWVc1alpTNWNiaUFxSUVGa1pHVmtJR2x1SUU1dlpHVWdNQzR4TWk0Z1QyNXNlU0JoZG1GcGJHRmliR1VnYVc0Z1luSnZkM05sY25NZ2RHaGhkQ0J6ZFhCd2IzSjBJRUZ5Y21GNVFuVm1abVZ5TGx4dUlDb3ZYRzVDZFdabVpYSXVjSEp2ZEc5MGVYQmxMblJ2UVhKeVlYbENkV1ptWlhJZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lHbG1JQ2gwZVhCbGIyWWdWV2x1ZERoQmNuSmhlU0FoUFQwZ0ozVnVaR1ZtYVc1bFpDY3BJSHRjYmlBZ0lDQnBaaUFvUW5WbVptVnlMbDkxYzJWVWVYQmxaRUZ5Y21GNWN5a2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlDaHVaWGNnUW5WbVptVnlLSFJvYVhNcEtTNWlkV1ptWlhKY2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdkbUZ5SUdKMVppQTlJRzVsZHlCVmFXNTBPRUZ5Y21GNUtIUm9hWE11YkdWdVozUm9LVnh1SUNBZ0lDQWdabTl5SUNoMllYSWdhU0E5SURBc0lHeGxiaUE5SUdKMVppNXNaVzVuZEdnN0lHa2dQQ0JzWlc0N0lHa2dLejBnTVNsY2JpQWdJQ0FnSUNBZ1luVm1XMmxkSUQwZ2RHaHBjMXRwWFZ4dUlDQWdJQ0FnY21WMGRYSnVJR0oxWmk1aWRXWm1aWEpjYmlBZ0lDQjlYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZENkV1ptWlhJdWRHOUJjbkpoZVVKMVptWmxjaUJ1YjNRZ2MzVndjRzl5ZEdWa0lHbHVJSFJvYVhNZ1luSnZkM05sY2ljcFhHNGdJSDFjYm4xY2JseHVMeThnU0VWTVVFVlNJRVpWVGtOVVNVOU9VMXh1THk4Z1BUMDlQVDA5UFQwOVBUMDlQVDA5UFZ4dVhHNW1kVzVqZEdsdmJpQnpkSEpwYm1kMGNtbHRJQ2h6ZEhJcElIdGNiaUFnYVdZZ0tITjBjaTUwY21sdEtTQnlaWFIxY200Z2MzUnlMblJ5YVcwb0tWeHVJQ0J5WlhSMWNtNGdjM1J5TG5KbGNHeGhZMlVvTDE1Y1hITXJmRnhjY3lza0wyY3NJQ2NuS1Z4dWZWeHVYRzUyWVhJZ1FsQWdQU0JDZFdabVpYSXVjSEp2ZEc5MGVYQmxYRzVjYmk4cUtseHVJQ29nUVhWbmJXVnVkQ0JoSUZWcGJuUTRRWEp5WVhrZ0ttbHVjM1JoYm1ObEtpQW9ibTkwSUhSb1pTQlZhVzUwT0VGeWNtRjVJR05zWVhOeklTa2dkMmwwYUNCQ2RXWm1aWElnYldWMGFHOWtjMXh1SUNvdlhHNUNkV1ptWlhJdVgyRjFaMjFsYm5RZ1BTQm1kVzVqZEdsdmJpQW9ZWEp5S1NCN1hHNGdJR0Z5Y2k1ZmFYTkNkV1ptWlhJZ1BTQjBjblZsWEc1Y2JpQWdMeThnYzJGMlpTQnlaV1psY21WdVkyVWdkRzhnYjNKcFoybHVZV3dnVldsdWREaEJjbkpoZVNCblpYUXZjMlYwSUcxbGRHaHZaSE1nWW1WbWIzSmxJRzkyWlhKM2NtbDBhVzVuWEc0Z0lHRnljaTVmWjJWMElEMGdZWEp5TG1kbGRGeHVJQ0JoY25JdVgzTmxkQ0E5SUdGeWNpNXpaWFJjYmx4dUlDQXZMeUJrWlhCeVpXTmhkR1ZrTENCM2FXeHNJR0psSUhKbGJXOTJaV1FnYVc0Z2JtOWtaU0F3TGpFeksxeHVJQ0JoY25JdVoyVjBJRDBnUWxBdVoyVjBYRzRnSUdGeWNpNXpaWFFnUFNCQ1VDNXpaWFJjYmx4dUlDQmhjbkl1ZDNKcGRHVWdQU0JDVUM1M2NtbDBaVnh1SUNCaGNuSXVkRzlUZEhKcGJtY2dQU0JDVUM1MGIxTjBjbWx1WjF4dUlDQmhjbkl1ZEc5TWIyTmhiR1ZUZEhKcGJtY2dQU0JDVUM1MGIxTjBjbWx1WjF4dUlDQmhjbkl1ZEc5S1UwOU9JRDBnUWxBdWRHOUtVMDlPWEc0Z0lHRnljaTVqYjNCNUlEMGdRbEF1WTI5d2VWeHVJQ0JoY25JdWMyeHBZMlVnUFNCQ1VDNXpiR2xqWlZ4dUlDQmhjbkl1Y21WaFpGVkpiblE0SUQwZ1FsQXVjbVZoWkZWSmJuUTRYRzRnSUdGeWNpNXlaV0ZrVlVsdWRERTJURVVnUFNCQ1VDNXlaV0ZrVlVsdWRERTJURVZjYmlBZ1lYSnlMbkpsWVdSVlNXNTBNVFpDUlNBOUlFSlFMbkpsWVdSVlNXNTBNVFpDUlZ4dUlDQmhjbkl1Y21WaFpGVkpiblF6TWt4RklEMGdRbEF1Y21WaFpGVkpiblF6TWt4RlhHNGdJR0Z5Y2k1eVpXRmtWVWx1ZERNeVFrVWdQU0JDVUM1eVpXRmtWVWx1ZERNeVFrVmNiaUFnWVhKeUxuSmxZV1JKYm5RNElEMGdRbEF1Y21WaFpFbHVkRGhjYmlBZ1lYSnlMbkpsWVdSSmJuUXhOa3hGSUQwZ1FsQXVjbVZoWkVsdWRERTJURVZjYmlBZ1lYSnlMbkpsWVdSSmJuUXhOa0pGSUQwZ1FsQXVjbVZoWkVsdWRERTJRa1ZjYmlBZ1lYSnlMbkpsWVdSSmJuUXpNa3hGSUQwZ1FsQXVjbVZoWkVsdWRETXlURVZjYmlBZ1lYSnlMbkpsWVdSSmJuUXpNa0pGSUQwZ1FsQXVjbVZoWkVsdWRETXlRa1ZjYmlBZ1lYSnlMbkpsWVdSR2JHOWhkRXhGSUQwZ1FsQXVjbVZoWkVac2IyRjBURVZjYmlBZ1lYSnlMbkpsWVdSR2JHOWhkRUpGSUQwZ1FsQXVjbVZoWkVac2IyRjBRa1ZjYmlBZ1lYSnlMbkpsWVdSRWIzVmliR1ZNUlNBOUlFSlFMbkpsWVdSRWIzVmliR1ZNUlZ4dUlDQmhjbkl1Y21WaFpFUnZkV0pzWlVKRklEMGdRbEF1Y21WaFpFUnZkV0pzWlVKRlhHNGdJR0Z5Y2k1M2NtbDBaVlZKYm5RNElEMGdRbEF1ZDNKcGRHVlZTVzUwT0Z4dUlDQmhjbkl1ZDNKcGRHVlZTVzUwTVRaTVJTQTlJRUpRTG5keWFYUmxWVWx1ZERFMlRFVmNiaUFnWVhKeUxuZHlhWFJsVlVsdWRERTJRa1VnUFNCQ1VDNTNjbWwwWlZWSmJuUXhOa0pGWEc0Z0lHRnljaTUzY21sMFpWVkpiblF6TWt4RklEMGdRbEF1ZDNKcGRHVlZTVzUwTXpKTVJWeHVJQ0JoY25JdWQzSnBkR1ZWU1c1ME16SkNSU0E5SUVKUUxuZHlhWFJsVlVsdWRETXlRa1ZjYmlBZ1lYSnlMbmR5YVhSbFNXNTBPQ0E5SUVKUUxuZHlhWFJsU1c1ME9GeHVJQ0JoY25JdWQzSnBkR1ZKYm5ReE5reEZJRDBnUWxBdWQzSnBkR1ZKYm5ReE5reEZYRzRnSUdGeWNpNTNjbWwwWlVsdWRERTJRa1VnUFNCQ1VDNTNjbWwwWlVsdWRERTJRa1ZjYmlBZ1lYSnlMbmR5YVhSbFNXNTBNekpNUlNBOUlFSlFMbmR5YVhSbFNXNTBNekpNUlZ4dUlDQmhjbkl1ZDNKcGRHVkpiblF6TWtKRklEMGdRbEF1ZDNKcGRHVkpiblF6TWtKRlhHNGdJR0Z5Y2k1M2NtbDBaVVpzYjJGMFRFVWdQU0JDVUM1M2NtbDBaVVpzYjJGMFRFVmNiaUFnWVhKeUxuZHlhWFJsUm14dllYUkNSU0E5SUVKUUxuZHlhWFJsUm14dllYUkNSVnh1SUNCaGNuSXVkM0pwZEdWRWIzVmliR1ZNUlNBOUlFSlFMbmR5YVhSbFJHOTFZbXhsVEVWY2JpQWdZWEp5TG5keWFYUmxSRzkxWW14bFFrVWdQU0JDVUM1M2NtbDBaVVJ2ZFdKc1pVSkZYRzRnSUdGeWNpNW1hV3hzSUQwZ1FsQXVabWxzYkZ4dUlDQmhjbkl1YVc1emNHVmpkQ0E5SUVKUUxtbHVjM0JsWTNSY2JpQWdZWEp5TG5SdlFYSnlZWGxDZFdabVpYSWdQU0JDVUM1MGIwRnljbUY1UW5WbVptVnlYRzVjYmlBZ2NtVjBkWEp1SUdGeWNseHVmVnh1WEc0dkx5QnpiR2xqWlNoemRHRnlkQ3dnWlc1a0tWeHVablZ1WTNScGIyNGdZMnhoYlhBZ0tHbHVaR1Y0TENCc1pXNHNJR1JsWm1GMWJIUldZV3gxWlNrZ2UxeHVJQ0JwWmlBb2RIbHdaVzltSUdsdVpHVjRJQ0U5UFNBbmJuVnRZbVZ5SnlrZ2NtVjBkWEp1SUdSbFptRjFiSFJXWVd4MVpWeHVJQ0JwYm1SbGVDQTlJSDUrYVc1a1pYZzdJQ0F2THlCRGIyVnlZMlVnZEc4Z2FXNTBaV2RsY2k1Y2JpQWdhV1lnS0dsdVpHVjRJRDQ5SUd4bGJpa2djbVYwZFhKdUlHeGxibHh1SUNCcFppQW9hVzVrWlhnZ1BqMGdNQ2tnY21WMGRYSnVJR2x1WkdWNFhHNGdJR2x1WkdWNElDczlJR3hsYmx4dUlDQnBaaUFvYVc1a1pYZ2dQajBnTUNrZ2NtVjBkWEp1SUdsdVpHVjRYRzRnSUhKbGRIVnliaUF3WEc1OVhHNWNibVoxYm1OMGFXOXVJR052WlhKalpTQW9iR1Z1WjNSb0tTQjdYRzRnSUM4dklFTnZaWEpqWlNCc1pXNW5kR2dnZEc4Z1lTQnVkVzFpWlhJZ0tIQnZjM05wWW14NUlFNWhUaWtzSUhKdmRXNWtJSFZ3WEc0Z0lDOHZJR2x1SUdOaGMyVWdhWFFuY3lCbWNtRmpkR2x2Ym1Gc0lDaGxMbWN1SURFeU15NDBOVFlwSUhSb1pXNGdaRzhnWVZ4dUlDQXZMeUJrYjNWaWJHVWdibVZuWVhSbElIUnZJR052WlhKalpTQmhJRTVoVGlCMGJ5QXdMaUJGWVhONUxDQnlhV2RvZEQ5Y2JpQWdiR1Z1WjNSb0lEMGdmbjVOWVhSb0xtTmxhV3dvSzJ4bGJtZDBhQ2xjYmlBZ2NtVjBkWEp1SUd4bGJtZDBhQ0E4SURBZ1B5QXdJRG9nYkdWdVozUm9YRzU5WEc1Y2JtWjFibU4wYVc5dUlHbHpRWEp5WVhrZ0tITjFZbXBsWTNRcElIdGNiaUFnY21WMGRYSnVJQ2hCY25KaGVTNXBjMEZ5Y21GNUlIeDhJR1oxYm1OMGFXOXVJQ2h6ZFdKcVpXTjBLU0I3WEc0Z0lDQWdjbVYwZFhKdUlFOWlhbVZqZEM1d2NtOTBiM1I1Y0dVdWRHOVRkSEpwYm1jdVkyRnNiQ2h6ZFdKcVpXTjBLU0E5UFQwZ0oxdHZZbXBsWTNRZ1FYSnlZWGxkSjF4dUlDQjlLU2h6ZFdKcVpXTjBLVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnBjMEZ5Y21GNWFYTm9JQ2h6ZFdKcVpXTjBLU0I3WEc0Z0lISmxkSFZ5YmlCcGMwRnljbUY1S0hOMVltcGxZM1FwSUh4OElFSjFabVpsY2k1cGMwSjFabVpsY2loemRXSnFaV04wS1NCOGZGeHVJQ0FnSUNBZ2MzVmlhbVZqZENBbUppQjBlWEJsYjJZZ2MzVmlhbVZqZENBOVBUMGdKMjlpYW1WamRDY2dKaVpjYmlBZ0lDQWdJSFI1Y0dWdlppQnpkV0pxWldOMExteGxibWQwYUNBOVBUMGdKMjUxYldKbGNpZGNibjFjYmx4dVpuVnVZM1JwYjI0Z2RHOUlaWGdnS0c0cElIdGNiaUFnYVdZZ0tHNGdQQ0F4TmlrZ2NtVjBkWEp1SUNjd0p5QXJJRzR1ZEc5VGRISnBibWNvTVRZcFhHNGdJSEpsZEhWeWJpQnVMblJ2VTNSeWFXNW5LREUyS1Z4dWZWeHVYRzVtZFc1amRHbHZiaUIxZEdZNFZHOUNlWFJsY3lBb2MzUnlLU0I3WEc0Z0lIWmhjaUJpZVhSbFFYSnlZWGtnUFNCYlhWeHVJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUhOMGNpNXNaVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJSFpoY2lCaUlEMGdjM1J5TG1Ob1lYSkRiMlJsUVhRb2FTbGNiaUFnSUNCcFppQW9ZaUE4UFNBd2VEZEdLVnh1SUNBZ0lDQWdZbmwwWlVGeWNtRjVMbkIxYzJnb2MzUnlMbU5vWVhKRGIyUmxRWFFvYVNrcFhHNGdJQ0FnWld4elpTQjdYRzRnSUNBZ0lDQjJZWElnYzNSaGNuUWdQU0JwWEc0Z0lDQWdJQ0JwWmlBb1lpQStQU0F3ZUVRNE1EQWdKaVlnWWlBOFBTQXdlRVJHUmtZcElHa3JLMXh1SUNBZ0lDQWdkbUZ5SUdnZ1BTQmxibU52WkdWVlVrbERiMjF3YjI1bGJuUW9jM1J5TG5Oc2FXTmxLSE4wWVhKMExDQnBLekVwS1M1emRXSnpkSElvTVNrdWMzQnNhWFFvSnlVbktWeHVJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FpQTlJREE3SUdvZ1BDQm9MbXhsYm1kMGFEc2dhaXNyS1Z4dUlDQWdJQ0FnSUNCaWVYUmxRWEp5WVhrdWNIVnphQ2h3WVhKelpVbHVkQ2hvVzJwZExDQXhOaWtwWEc0Z0lDQWdmVnh1SUNCOVhHNGdJSEpsZEhWeWJpQmllWFJsUVhKeVlYbGNibjFjYmx4dVpuVnVZM1JwYjI0Z1lYTmphV2xVYjBKNWRHVnpJQ2h6ZEhJcElIdGNiaUFnZG1GeUlHSjVkR1ZCY25KaGVTQTlJRnRkWEc0Z0lHWnZjaUFvZG1GeUlHa2dQU0F3T3lCcElEd2djM1J5TG14bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ0x5OGdUbTlrWlNkeklHTnZaR1VnYzJWbGJYTWdkRzhnWW1VZ1pHOXBibWNnZEdocGN5QmhibVFnYm05MElDWWdNSGczUmk0dVhHNGdJQ0FnWW5sMFpVRnljbUY1TG5CMWMyZ29jM1J5TG1Ob1lYSkRiMlJsUVhRb2FTa2dKaUF3ZUVaR0tWeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCaWVYUmxRWEp5WVhsY2JuMWNibHh1Wm5WdVkzUnBiMjRnZFhSbU1UWnNaVlJ2UW5sMFpYTWdLSE4wY2lrZ2UxeHVJQ0IyWVhJZ1l5d2dhR2tzSUd4dlhHNGdJSFpoY2lCaWVYUmxRWEp5WVhrZ1BTQmJYVnh1SUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElITjBjaTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUdNZ1BTQnpkSEl1WTJoaGNrTnZaR1ZCZENocEtWeHVJQ0FnSUdocElEMGdZeUErUGlBNFhHNGdJQ0FnYkc4Z1BTQmpJQ1VnTWpVMlhHNGdJQ0FnWW5sMFpVRnljbUY1TG5CMWMyZ29iRzhwWEc0Z0lDQWdZbmwwWlVGeWNtRjVMbkIxYzJnb2FHa3BYRzRnSUgxY2JseHVJQ0J5WlhSMWNtNGdZbmwwWlVGeWNtRjVYRzU5WEc1Y2JtWjFibU4wYVc5dUlHSmhjMlUyTkZSdlFubDBaWE1nS0hOMGNpa2dlMXh1SUNCeVpYUjFjbTRnWW1GelpUWTBMblJ2UW5sMFpVRnljbUY1S0hOMGNpbGNibjFjYmx4dVpuVnVZM1JwYjI0Z1lteHBkRUoxWm1abGNpQW9jM0pqTENCa2MzUXNJRzltWm5ObGRDd2diR1Z1WjNSb0tTQjdYRzRnSUhaaGNpQndiM05jYmlBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQnNaVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJR2xtSUNnb2FTQXJJRzltWm5ObGRDQStQU0JrYzNRdWJHVnVaM1JvS1NCOGZDQW9hU0ErUFNCemNtTXViR1Z1WjNSb0tTbGNiaUFnSUNBZ0lHSnlaV0ZyWEc0Z0lDQWdaSE4wVzJrZ0t5QnZabVp6WlhSZElEMGdjM0pqVzJsZFhHNGdJSDFjYmlBZ2NtVjBkWEp1SUdsY2JuMWNibHh1Wm5WdVkzUnBiMjRnWkdWamIyUmxWWFJtT0VOb1lYSWdLSE4wY2lrZ2UxeHVJQ0IwY25rZ2UxeHVJQ0FnSUhKbGRIVnliaUJrWldOdlpHVlZVa2xEYjIxd2IyNWxiblFvYzNSeUtWeHVJQ0I5SUdOaGRHTm9JQ2hsY25JcElIdGNiaUFnSUNCeVpYUjFjbTRnVTNSeWFXNW5MbVp5YjIxRGFHRnlRMjlrWlNnd2VFWkdSa1FwSUM4dklGVlVSaUE0SUdsdWRtRnNhV1FnWTJoaGNseHVJQ0I5WEc1OVhHNWNiaThxWEc0Z0tpQlhaU0JvWVhabElIUnZJRzFoYTJVZ2MzVnlaU0IwYUdGMElIUm9aU0IyWVd4MVpTQnBjeUJoSUhaaGJHbGtJR2x1ZEdWblpYSXVJRlJvYVhNZ2JXVmhibk1nZEdoaGRDQnBkRnh1SUNvZ2FYTWdibTl1TFc1bFoyRjBhWFpsTGlCSmRDQm9ZWE1nYm04Z1puSmhZM1JwYjI1aGJDQmpiMjF3YjI1bGJuUWdZVzVrSUhSb1lYUWdhWFFnWkc5bGN5QnViM1JjYmlBcUlHVjRZMlZsWkNCMGFHVWdiV0Y0YVcxMWJTQmhiR3h2ZDJWa0lIWmhiSFZsTGx4dUlDb3ZYRzVtZFc1amRHbHZiaUIyWlhKcFpuVnBiblFnS0haaGJIVmxMQ0J0WVhncElIdGNiaUFnWVhOelpYSjBLSFI1Y0dWdlppQjJZV3gxWlNBOVBUMGdKMjUxYldKbGNpY3NJQ2RqWVc1dWIzUWdkM0pwZEdVZ1lTQnViMjR0Ym5WdFltVnlJR0Z6SUdFZ2JuVnRZbVZ5SnlsY2JpQWdZWE56WlhKMEtIWmhiSFZsSUQ0OUlEQXNJQ2R6Y0dWamFXWnBaV1FnWVNCdVpXZGhkR2wyWlNCMllXeDFaU0JtYjNJZ2QzSnBkR2x1WnlCaGJpQjFibk5wWjI1bFpDQjJZV3gxWlNjcFhHNGdJR0Z6YzJWeWRDaDJZV3gxWlNBOFBTQnRZWGdzSUNkMllXeDFaU0JwY3lCc1lYSm5aWElnZEdoaGJpQnRZWGhwYlhWdElIWmhiSFZsSUdadmNpQjBlWEJsSnlsY2JpQWdZWE56WlhKMEtFMWhkR2d1Wm14dmIzSW9kbUZzZFdVcElEMDlQU0IyWVd4MVpTd2dKM1poYkhWbElHaGhjeUJoSUdaeVlXTjBhVzl1WVd3Z1kyOXRjRzl1Wlc1MEp5bGNibjFjYmx4dVpuVnVZM1JwYjI0Z2RtVnlhV1p6YVc1MElDaDJZV3gxWlN3Z2JXRjRMQ0J0YVc0cElIdGNiaUFnWVhOelpYSjBLSFI1Y0dWdlppQjJZV3gxWlNBOVBUMGdKMjUxYldKbGNpY3NJQ2RqWVc1dWIzUWdkM0pwZEdVZ1lTQnViMjR0Ym5WdFltVnlJR0Z6SUdFZ2JuVnRZbVZ5SnlsY2JpQWdZWE56WlhKMEtIWmhiSFZsSUR3OUlHMWhlQ3dnSjNaaGJIVmxJR3hoY21kbGNpQjBhR0Z1SUcxaGVHbHRkVzBnWVd4c2IzZGxaQ0IyWVd4MVpTY3BYRzRnSUdGemMyVnlkQ2gyWVd4MVpTQStQU0J0YVc0c0lDZDJZV3gxWlNCemJXRnNiR1Z5SUhSb1lXNGdiV2x1YVcxMWJTQmhiR3h2ZDJWa0lIWmhiSFZsSnlsY2JpQWdZWE56WlhKMEtFMWhkR2d1Wm14dmIzSW9kbUZzZFdVcElEMDlQU0IyWVd4MVpTd2dKM1poYkhWbElHaGhjeUJoSUdaeVlXTjBhVzl1WVd3Z1kyOXRjRzl1Wlc1MEp5bGNibjFjYmx4dVpuVnVZM1JwYjI0Z2RtVnlhV1pKUlVWRk56VTBJQ2gyWVd4MVpTd2diV0Y0TENCdGFXNHBJSHRjYmlBZ1lYTnpaWEowS0hSNWNHVnZaaUIyWVd4MVpTQTlQVDBnSjI1MWJXSmxjaWNzSUNkallXNXViM1FnZDNKcGRHVWdZU0J1YjI0dGJuVnRZbVZ5SUdGeklHRWdiblZ0WW1WeUp5bGNiaUFnWVhOelpYSjBLSFpoYkhWbElEdzlJRzFoZUN3Z0ozWmhiSFZsSUd4aGNtZGxjaUIwYUdGdUlHMWhlR2x0ZFcwZ1lXeHNiM2RsWkNCMllXeDFaU2NwWEc0Z0lHRnpjMlZ5ZENoMllXeDFaU0ErUFNCdGFXNHNJQ2QyWVd4MVpTQnpiV0ZzYkdWeUlIUm9ZVzRnYldsdWFXMTFiU0JoYkd4dmQyVmtJSFpoYkhWbEp5bGNibjFjYmx4dVpuVnVZM1JwYjI0Z1lYTnpaWEowSUNoMFpYTjBMQ0J0WlhOellXZGxLU0I3WEc0Z0lHbG1JQ2doZEdWemRDa2dkR2h5YjNjZ2JtVjNJRVZ5Y205eUtHMWxjM05oWjJVZ2ZId2dKMFpoYVd4bFpDQmhjM05sY25ScGIyNG5LVnh1ZlZ4dVhHNTlLUzVqWVd4c0tIUm9hWE1zY21WeGRXbHlaU2hjSW1VdlZTczVOMXdpS1N4MGVYQmxiMllnYzJWc1ppQWhQVDBnWENKMWJtUmxabWx1WldSY0lpQS9JSE5sYkdZZ09pQjBlWEJsYjJZZ2QybHVaRzkzSUNFOVBTQmNJblZ1WkdWbWFXNWxaRndpSUQ4Z2QybHVaRzkzSURvZ2UzMHNjbVZ4ZFdseVpTaGNJbUoxWm1abGNsd2lLUzVDZFdabVpYSXNZWEpuZFcxbGJuUnpXek5kTEdGeVozVnRaVzUwYzFzMFhTeGhjbWQxYldWdWRITmJOVjBzWVhKbmRXMWxiblJ6V3paZExGd2lMeTR1WEZ4Y1hDNHVYRnhjWEc1dlpHVmZiVzlrZFd4bGMxeGNYRnhpZFdabVpYSmNYRnhjYVc1a1pYZ3Vhbk5jSWl4Y0lpOHVMbHhjWEZ3dUxseGNYRnh1YjJSbFgyMXZaSFZzWlhOY1hGeGNZblZtWm1WeVhDSXBJaXdpS0daMWJtTjBhVzl1SUNod2NtOWpaWE56TEdkc2IySmhiQ3hDZFdabVpYSXNYMTloY21kMWJXVnVkREFzWDE5aGNtZDFiV1Z1ZERFc1gxOWhjbWQxYldWdWRESXNYMTloY21kMWJXVnVkRE1zWDE5bWFXeGxibUZ0WlN4ZlgyUnBjbTVoYldVcGUxeHVaWGh3YjNKMGN5NXlaV0ZrSUQwZ1puVnVZM1JwYjI0Z0tHSjFabVpsY2l3Z2IyWm1jMlYwTENCcGMweEZMQ0J0VEdWdUxDQnVRbmwwWlhNcElIdGNiaUFnZG1GeUlHVXNJRzFjYmlBZ2RtRnlJR1ZNWlc0Z1BTQnVRbmwwWlhNZ0tpQTRJQzBnYlV4bGJpQXRJREZjYmlBZ2RtRnlJR1ZOWVhnZ1BTQW9NU0E4UENCbFRHVnVLU0F0SURGY2JpQWdkbUZ5SUdWQ2FXRnpJRDBnWlUxaGVDQStQaUF4WEc0Z0lIWmhjaUJ1UW1sMGN5QTlJQzAzWEc0Z0lIWmhjaUJwSUQwZ2FYTk1SU0EvSUNodVFubDBaWE1nTFNBeEtTQTZJREJjYmlBZ2RtRnlJR1FnUFNCcGMweEZJRDhnTFRFZ09pQXhYRzRnSUhaaGNpQnpJRDBnWW5WbVptVnlXMjltWm5ObGRDQXJJR2xkWEc1Y2JpQWdhU0FyUFNCa1hHNWNiaUFnWlNBOUlITWdKaUFvS0RFZ1BEd2dLQzF1UW1sMGN5a3BJQzBnTVNsY2JpQWdjeUErUGowZ0tDMXVRbWwwY3lsY2JpQWdia0pwZEhNZ0t6MGdaVXhsYmx4dUlDQm1iM0lnS0RzZ2JrSnBkSE1nUGlBd095QmxJRDBnWlNBcUlESTFOaUFySUdKMVptWmxjbHR2Wm1aelpYUWdLeUJwWFN3Z2FTQXJQU0JrTENCdVFtbDBjeUF0UFNBNEtTQjdmVnh1WEc0Z0lHMGdQU0JsSUNZZ0tDZ3hJRHc4SUNndGJrSnBkSE1wS1NBdElERXBYRzRnSUdVZ1BqNDlJQ2d0YmtKcGRITXBYRzRnSUc1Q2FYUnpJQ3M5SUcxTVpXNWNiaUFnWm05eUlDZzdJRzVDYVhSeklENGdNRHNnYlNBOUlHMGdLaUF5TlRZZ0t5QmlkV1ptWlhKYmIyWm1jMlYwSUNzZ2FWMHNJR2tnS3owZ1pDd2dia0pwZEhNZ0xUMGdPQ2tnZTMxY2JseHVJQ0JwWmlBb1pTQTlQVDBnTUNrZ2UxeHVJQ0FnSUdVZ1BTQXhJQzBnWlVKcFlYTmNiaUFnZlNCbGJITmxJR2xtSUNobElEMDlQU0JsVFdGNEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUcwZ1B5Qk9ZVTRnT2lBb0tITWdQeUF0TVNBNklERXBJQ29nU1c1bWFXNXBkSGtwWEc0Z0lIMGdaV3h6WlNCN1hHNGdJQ0FnYlNBOUlHMGdLeUJOWVhSb0xuQnZkeWd5TENCdFRHVnVLVnh1SUNBZ0lHVWdQU0JsSUMwZ1pVSnBZWE5jYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdLSE1nUHlBdE1TQTZJREVwSUNvZ2JTQXFJRTFoZEdndWNHOTNLRElzSUdVZ0xTQnRUR1Z1S1Z4dWZWeHVYRzVsZUhCdmNuUnpMbmR5YVhSbElEMGdablZ1WTNScGIyNGdLR0oxWm1abGNpd2dkbUZzZFdVc0lHOW1abk5sZEN3Z2FYTk1SU3dnYlV4bGJpd2dia0o1ZEdWektTQjdYRzRnSUhaaGNpQmxMQ0J0TENCalhHNGdJSFpoY2lCbFRHVnVJRDBnYmtKNWRHVnpJQ29nT0NBdElHMU1aVzRnTFNBeFhHNGdJSFpoY2lCbFRXRjRJRDBnS0RFZ1BEd2daVXhsYmlrZ0xTQXhYRzRnSUhaaGNpQmxRbWxoY3lBOUlHVk5ZWGdnUGo0Z01WeHVJQ0IyWVhJZ2NuUWdQU0FvYlV4bGJpQTlQVDBnTWpNZ1B5Qk5ZWFJvTG5CdmR5Z3lMQ0F0TWpRcElDMGdUV0YwYUM1d2IzY29NaXdnTFRjM0tTQTZJREFwWEc0Z0lIWmhjaUJwSUQwZ2FYTk1SU0EvSURBZ09pQW9ia0o1ZEdWeklDMGdNU2xjYmlBZ2RtRnlJR1FnUFNCcGMweEZJRDhnTVNBNklDMHhYRzRnSUhaaGNpQnpJRDBnZG1Gc2RXVWdQQ0F3SUh4OElDaDJZV3gxWlNBOVBUMGdNQ0FtSmlBeElDOGdkbUZzZFdVZ1BDQXdLU0EvSURFZ09pQXdYRzVjYmlBZ2RtRnNkV1VnUFNCTllYUm9MbUZpY3loMllXeDFaU2xjYmx4dUlDQnBaaUFvYVhOT1lVNG9kbUZzZFdVcElIeDhJSFpoYkhWbElEMDlQU0JKYm1acGJtbDBlU2tnZTF4dUlDQWdJRzBnUFNCcGMwNWhUaWgyWVd4MVpTa2dQeUF4SURvZ01GeHVJQ0FnSUdVZ1BTQmxUV0Y0WEc0Z0lIMGdaV3h6WlNCN1hHNGdJQ0FnWlNBOUlFMWhkR2d1Wm14dmIzSW9UV0YwYUM1c2IyY29kbUZzZFdVcElDOGdUV0YwYUM1TVRqSXBYRzRnSUNBZ2FXWWdLSFpoYkhWbElDb2dLR01nUFNCTllYUm9MbkJ2ZHlneUxDQXRaU2twSUR3Z01Ta2dlMXh1SUNBZ0lDQWdaUzB0WEc0Z0lDQWdJQ0JqSUNvOUlESmNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tHVWdLeUJsUW1saGN5QStQU0F4S1NCN1hHNGdJQ0FnSUNCMllXeDFaU0FyUFNCeWRDQXZJR05jYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2RtRnNkV1VnS3owZ2NuUWdLaUJOWVhSb0xuQnZkeWd5TENBeElDMGdaVUpwWVhNcFhHNGdJQ0FnZlZ4dUlDQWdJR2xtSUNoMllXeDFaU0FxSUdNZ1BqMGdNaWtnZTF4dUlDQWdJQ0FnWlNzclhHNGdJQ0FnSUNCaklDODlJREpjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaUFvWlNBcklHVkNhV0Z6SUQ0OUlHVk5ZWGdwSUh0Y2JpQWdJQ0FnSUcwZ1BTQXdYRzRnSUNBZ0lDQmxJRDBnWlUxaGVGeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb1pTQXJJR1ZDYVdGeklENDlJREVwSUh0Y2JpQWdJQ0FnSUcwZ1BTQW9kbUZzZFdVZ0tpQmpJQzBnTVNrZ0tpQk5ZWFJvTG5CdmR5Z3lMQ0J0VEdWdUtWeHVJQ0FnSUNBZ1pTQTlJR1VnS3lCbFFtbGhjMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCdElEMGdkbUZzZFdVZ0tpQk5ZWFJvTG5CdmR5Z3lMQ0JsUW1saGN5QXRJREVwSUNvZ1RXRjBhQzV3YjNjb01pd2diVXhsYmlsY2JpQWdJQ0FnSUdVZ1BTQXdYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdabTl5SUNnN0lHMU1aVzRnUGowZ09Ec2dZblZtWm1WeVcyOW1abk5sZENBcklHbGRJRDBnYlNBbUlEQjRabVlzSUdrZ0t6MGdaQ3dnYlNBdlBTQXlOVFlzSUcxTVpXNGdMVDBnT0NrZ2UzMWNibHh1SUNCbElEMGdLR1VnUER3Z2JVeGxiaWtnZkNCdFhHNGdJR1ZNWlc0Z0t6MGdiVXhsYmx4dUlDQm1iM0lnS0RzZ1pVeGxiaUErSURBN0lHSjFabVpsY2x0dlptWnpaWFFnS3lCcFhTQTlJR1VnSmlBd2VHWm1MQ0JwSUNzOUlHUXNJR1VnTHowZ01qVTJMQ0JsVEdWdUlDMDlJRGdwSUh0OVhHNWNiaUFnWW5WbVptVnlXMjltWm5ObGRDQXJJR2tnTFNCa1hTQjhQU0J6SUNvZ01USTRYRzU5WEc1Y2JuMHBMbU5oYkd3b2RHaHBjeXh5WlhGMWFYSmxLRndpWlM5Vkt6azNYQ0lwTEhSNWNHVnZaaUJ6Wld4bUlDRTlQU0JjSW5WdVpHVm1hVzVsWkZ3aUlEOGdjMlZzWmlBNklIUjVjR1Z2WmlCM2FXNWtiM2NnSVQwOUlGd2lkVzVrWldacGJtVmtYQ0lnUHlCM2FXNWtiM2NnT2lCN2ZTeHlaWEYxYVhKbEtGd2lZblZtWm1WeVhDSXBMa0oxWm1abGNpeGhjbWQxYldWdWRITmJNMTBzWVhKbmRXMWxiblJ6V3pSZExHRnlaM1Z0Wlc1MGMxczFYU3hoY21kMWJXVnVkSE5iTmwwc1hDSXZMaTVjWEZ4Y0xpNWNYRnhjYm05a1pWOXRiMlIxYkdWelhGeGNYR2xsWldVM05UUmNYRnhjYVc1a1pYZ3Vhbk5jSWl4Y0lpOHVMbHhjWEZ3dUxseGNYRnh1YjJSbFgyMXZaSFZzWlhOY1hGeGNhV1ZsWlRjMU5Gd2lLU0lzSWlobWRXNWpkR2x2YmlBb2NISnZZMlZ6Y3l4bmJHOWlZV3dzUW5WbVptVnlMRjlmWVhKbmRXMWxiblF3TEY5ZllYSm5kVzFsYm5ReExGOWZZWEpuZFcxbGJuUXlMRjlmWVhKbmRXMWxiblF6TEY5ZlptbHNaVzVoYldVc1gxOWthWEp1WVcxbEtYdGNiaTh2SUhOb2FXMGdabTl5SUhWemFXNW5JSEJ5YjJObGMzTWdhVzRnWW5KdmQzTmxjbHh1WEc1MllYSWdjSEp2WTJWemN5QTlJRzF2WkhWc1pTNWxlSEJ2Y25SeklEMGdlMzA3WEc1Y2JuQnliMk5sYzNNdWJtVjRkRlJwWTJzZ1BTQW9ablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJSFpoY2lCallXNVRaWFJKYlcxbFpHbGhkR1VnUFNCMGVYQmxiMllnZDJsdVpHOTNJQ0U5UFNBbmRXNWtaV1pwYm1Wa0oxeHVJQ0FnSUNZbUlIZHBibVJ2ZHk1elpYUkpiVzFsWkdsaGRHVTdYRzRnSUNBZ2RtRnlJR05oYmxCdmMzUWdQU0IwZVhCbGIyWWdkMmx1Wkc5M0lDRTlQU0FuZFc1a1pXWnBibVZrSjF4dUlDQWdJQ1ltSUhkcGJtUnZkeTV3YjNOMFRXVnpjMkZuWlNBbUppQjNhVzVrYjNjdVlXUmtSWFpsYm5STWFYTjBaVzVsY2x4dUlDQWdJRHRjYmx4dUlDQWdJR2xtSUNoallXNVRaWFJKYlcxbFpHbGhkR1VwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdaMWJtTjBhVzl1SUNobUtTQjdJSEpsZEhWeWJpQjNhVzVrYjNjdWMyVjBTVzF0WldScFlYUmxLR1lwSUgwN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tHTmhibEJ2YzNRcElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUhGMVpYVmxJRDBnVzEwN1hHNGdJQ0FnSUNBZ0lIZHBibVJ2ZHk1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NkdFpYTnpZV2RsSnl3Z1puVnVZM1JwYjI0Z0tHVjJLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnYzI5MWNtTmxJRDBnWlhZdWMyOTFjbU5sTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NoemIzVnlZMlVnUFQwOUlIZHBibVJ2ZHlCOGZDQnpiM1Z5WTJVZ1BUMDlJRzUxYkd3cElDWW1JR1YyTG1SaGRHRWdQVDA5SUNkd2NtOWpaWE56TFhScFkyc25LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWlhZdWMzUnZjRkJ5YjNCaFoyRjBhVzl1S0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSEYxWlhWbExteGxibWQwYUNBK0lEQXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR1p1SUQwZ2NYVmxkV1V1YzJocFpuUW9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptNG9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDBzSUhSeWRXVXBPMXh1WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJtZFc1amRHbHZiaUJ1WlhoMFZHbGpheWhtYmlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY1hWbGRXVXVjSFZ6YUNobWJpazdYRzRnSUNBZ0lDQWdJQ0FnSUNCM2FXNWtiM2N1Y0c5emRFMWxjM05oWjJVb0ozQnliMk5sYzNNdGRHbGpheWNzSUNjcUp5azdYRzRnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjbVYwZFhKdUlHWjFibU4wYVc5dUlHNWxlSFJVYVdOcktHWnVLU0I3WEc0Z0lDQWdJQ0FnSUhObGRGUnBiV1Z2ZFhRb1ptNHNJREFwTzF4dUlDQWdJSDA3WEc1OUtTZ3BPMXh1WEc1d2NtOWpaWE56TG5ScGRHeGxJRDBnSjJKeWIzZHpaWEluTzF4dWNISnZZMlZ6Y3k1aWNtOTNjMlZ5SUQwZ2RISjFaVHRjYm5CeWIyTmxjM011Wlc1MklEMGdlMzA3WEc1d2NtOWpaWE56TG1GeVozWWdQU0JiWFR0Y2JseHVablZ1WTNScGIyNGdibTl2Y0NncElIdDlYRzVjYm5CeWIyTmxjM011YjI0Z1BTQnViMjl3TzF4dWNISnZZMlZ6Y3k1aFpHUk1hWE4wWlc1bGNpQTlJRzV2YjNBN1hHNXdjbTlqWlhOekxtOXVZMlVnUFNCdWIyOXdPMXh1Y0hKdlkyVnpjeTV2Wm1ZZ1BTQnViMjl3TzF4dWNISnZZMlZ6Y3k1eVpXMXZkbVZNYVhOMFpXNWxjaUE5SUc1dmIzQTdYRzV3Y205alpYTnpMbkpsYlc5MlpVRnNiRXhwYzNSbGJtVnljeUE5SUc1dmIzQTdYRzV3Y205alpYTnpMbVZ0YVhRZ1BTQnViMjl3TzF4dVhHNXdjbTlqWlhOekxtSnBibVJwYm1jZ1BTQm1kVzVqZEdsdmJpQW9ibUZ0WlNrZ2UxeHVJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWduY0hKdlkyVnpjeTVpYVc1a2FXNW5JR2x6SUc1dmRDQnpkWEJ3YjNKMFpXUW5LVHRjYm4xY2JseHVMeThnVkU5RVR5aHphSFI1YkcxaGJpbGNibkJ5YjJObGMzTXVZM2RrSUQwZ1puVnVZM1JwYjI0Z0tDa2dleUJ5WlhSMWNtNGdKeThuSUgwN1hHNXdjbTlqWlhOekxtTm9aR2x5SUQwZ1puVnVZM1JwYjI0Z0tHUnBjaWtnZTF4dUlDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25jSEp2WTJWemN5NWphR1JwY2lCcGN5QnViM1FnYzNWd2NHOXlkR1ZrSnlrN1hHNTlPMXh1WEc1OUtTNWpZV3hzS0hSb2FYTXNjbVZ4ZFdseVpTaGNJbVV2VlNzNU4xd2lLU3gwZVhCbGIyWWdjMlZzWmlBaFBUMGdYQ0oxYm1SbFptbHVaV1JjSWlBL0lITmxiR1lnT2lCMGVYQmxiMllnZDJsdVpHOTNJQ0U5UFNCY0luVnVaR1ZtYVc1bFpGd2lJRDhnZDJsdVpHOTNJRG9nZTMwc2NtVnhkV2x5WlNoY0ltSjFabVpsY2x3aUtTNUNkV1ptWlhJc1lYSm5kVzFsYm5Seld6TmRMR0Z5WjNWdFpXNTBjMXMwWFN4aGNtZDFiV1Z1ZEhOYk5WMHNZWEpuZFcxbGJuUnpXelpkTEZ3aUx5NHVYRnhjWEM0dVhGeGNYRzV2WkdWZmJXOWtkV3hsYzF4Y1hGeHdjbTlqWlhOelhGeGNYR0p5YjNkelpYSXVhbk5jSWl4Y0lpOHVMbHhjWEZ3dUxseGNYRnh1YjJSbFgyMXZaSFZzWlhOY1hGeGNjSEp2WTJWemMxd2lLU0lzSWlobWRXNWpkR2x2YmlBb2NISnZZMlZ6Y3l4bmJHOWlZV3dzUW5WbVptVnlMRjlmWVhKbmRXMWxiblF3TEY5ZllYSm5kVzFsYm5ReExGOWZZWEpuZFcxbGJuUXlMRjlmWVhKbmRXMWxiblF6TEY5ZlptbHNaVzVoYldVc1gxOWthWEp1WVcxbEtYdGNibHdpZFhObElITjBjbWxqZEZ3aU8xeHVMeXBjY2x4dUlDQWdJRk5vWVhCbFhISmNiaUFnSUNBZ0lDQWdVbVZqZEdGdVoyeGxYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lGTnhkV0Z5WlZ4eVhHNGdJQ0FnSUNBZ0lGUnlhV0Z1WjJ4bFhISmNiaW92WEc1Y2JuWmhjaUJmWTNKbFlYUmxRMnhoYzNNZ1BTQm1kVzVqZEdsdmJpQW9LU0I3SUdaMWJtTjBhVzl1SUdSbFptbHVaVkJ5YjNCbGNuUnBaWE1vZEdGeVoyVjBMQ0J3Y205d2N5a2dleUJtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUhCeWIzQnpMbXhsYm1kMGFEc2dhU3NyS1NCN0lIWmhjaUJrWlhOamNtbHdkRzl5SUQwZ2NISnZjSE5iYVYwN0lHUmxjMk55YVhCMGIzSXVaVzUxYldWeVlXSnNaU0E5SUdSbGMyTnlhWEIwYjNJdVpXNTFiV1Z5WVdKc1pTQjhmQ0JtWVd4elpUc2daR1Z6WTNKcGNIUnZjaTVqYjI1bWFXZDFjbUZpYkdVZ1BTQjBjblZsT3lCcFppQW9YQ0oyWVd4MVpWd2lJR2x1SUdSbGMyTnlhWEIwYjNJcElHUmxjMk55YVhCMGIzSXVkM0pwZEdGaWJHVWdQU0IwY25WbE95QlBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvZEdGeVoyVjBMQ0JrWlhOamNtbHdkRzl5TG10bGVTd2daR1Z6WTNKcGNIUnZjaWs3SUgwZ2ZTQnlaWFIxY200Z1puVnVZM1JwYjI0Z0tFTnZibk4wY25WamRHOXlMQ0J3Y205MGIxQnliM0J6TENCemRHRjBhV05RY205d2N5a2dleUJwWmlBb2NISnZkRzlRY205d2N5a2daR1ZtYVc1bFVISnZjR1Z5ZEdsbGN5aERiMjV6ZEhKMVkzUnZjaTV3Y205MGIzUjVjR1VzSUhCeWIzUnZVSEp2Y0hNcE95QnBaaUFvYzNSaGRHbGpVSEp2Y0hNcElHUmxabWx1WlZCeWIzQmxjblJwWlhNb1EyOXVjM1J5ZFdOMGIzSXNJSE4wWVhScFkxQnliM0J6S1RzZ2NtVjBkWEp1SUVOdmJuTjBjblZqZEc5eU95QjlPeUI5S0NrN1hHNWNibVoxYm1OMGFXOXVJRjl3YjNOemFXSnNaVU52Ym5OMGNuVmpkRzl5VW1WMGRYSnVLSE5sYkdZc0lHTmhiR3dwSUhzZ2FXWWdLQ0Z6Wld4bUtTQjdJSFJvY205M0lHNWxkeUJTWldabGNtVnVZMlZGY25KdmNpaGNJblJvYVhNZ2FHRnpiaWQwSUdKbFpXNGdhVzVwZEdsaGJHbHpaV1FnTFNCemRYQmxjaWdwSUdoaGMyNG5kQ0JpWldWdUlHTmhiR3hsWkZ3aUtUc2dmU0J5WlhSMWNtNGdZMkZzYkNBbUppQW9kSGx3Wlc5bUlHTmhiR3dnUFQwOUlGd2liMkpxWldOMFhDSWdmSHdnZEhsd1pXOW1JR05oYkd3Z1BUMDlJRndpWm5WdVkzUnBiMjVjSWlrZ1B5QmpZV3hzSURvZ2MyVnNaanNnZlZ4dVhHNW1kVzVqZEdsdmJpQmZhVzVvWlhKcGRITW9jM1ZpUTJ4aGMzTXNJSE4xY0dWeVEyeGhjM01wSUhzZ2FXWWdLSFI1Y0dWdlppQnpkWEJsY2tOc1lYTnpJQ0U5UFNCY0ltWjFibU4wYVc5dVhDSWdKaVlnYzNWd1pYSkRiR0Z6Y3lBaFBUMGdiblZzYkNrZ2V5QjBhSEp2ZHlCdVpYY2dWSGx3WlVWeWNtOXlLRndpVTNWd1pYSWdaWGh3Y21WemMybHZiaUJ0ZFhOMElHVnBkR2hsY2lCaVpTQnVkV3hzSUc5eUlHRWdablZ1WTNScGIyNHNJRzV2ZENCY0lpQXJJSFI1Y0dWdlppQnpkWEJsY2tOc1lYTnpLVHNnZlNCemRXSkRiR0Z6Y3k1d2NtOTBiM1I1Y0dVZ1BTQlBZbXBsWTNRdVkzSmxZWFJsS0hOMWNHVnlRMnhoYzNNZ0ppWWdjM1Z3WlhKRGJHRnpjeTV3Y205MGIzUjVjR1VzSUhzZ1kyOXVjM1J5ZFdOMGIzSTZJSHNnZG1Gc2RXVTZJSE4xWWtOc1lYTnpMQ0JsYm5WdFpYSmhZbXhsT2lCbVlXeHpaU3dnZDNKcGRHRmliR1U2SUhSeWRXVXNJR052Ym1acFozVnlZV0pzWlRvZ2RISjFaU0I5SUgwcE95QnBaaUFvYzNWd1pYSkRiR0Z6Y3lrZ1QySnFaV04wTG5ObGRGQnliM1J2ZEhsd1pVOW1JRDhnVDJKcVpXTjBMbk5sZEZCeWIzUnZkSGx3WlU5bUtITjFZa05zWVhOekxDQnpkWEJsY2tOc1lYTnpLU0E2SUhOMVlrTnNZWE56TGw5ZmNISnZkRzlmWHlBOUlITjFjR1Z5UTJ4aGMzTTdJSDFjYmx4dVpuVnVZM1JwYjI0Z1gyTnNZWE56UTJGc2JFTm9aV05yS0dsdWMzUmhibU5sTENCRGIyNXpkSEoxWTNSdmNpa2dleUJwWmlBb0lTaHBibk4wWVc1alpTQnBibk4wWVc1alpXOW1JRU52Ym5OMGNuVmpkRzl5S1NrZ2V5QjBhSEp2ZHlCdVpYY2dWSGx3WlVWeWNtOXlLRndpUTJGdWJtOTBJR05oYkd3Z1lTQmpiR0Z6Y3lCaGN5QmhJR1oxYm1OMGFXOXVYQ0lwT3lCOUlIMWNibHh1ZG1GeUlGTm9ZWEJsSUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lHWjFibU4wYVc5dUlGTm9ZWEJsS0NrZ2UxeHVJQ0FnSUNBZ0lDQmZZMnhoYzNORFlXeHNRMmhsWTJzb2RHaHBjeXdnVTJoaGNHVXBPMXh1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMjVoYldVZ1BTQW5KenRjYmx4dUlDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCZmJHVnVJRDBnWVhKbmRXMWxiblJ6TG14bGJtZDBhQ3dnYzJsa1pVeGxibWQwYUhNZ1BTQkJjbkpoZVNoZmJHVnVLU3dnWDJ0bGVTQTlJREE3SUY5clpYa2dQQ0JmYkdWdU95QmZhMlY1S3lzcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhOcFpHVk1aVzVuZEdoelcxOXJaWGxkSUQwZ1lYSm5kVzFsYm5SelcxOXJaWGxkTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmMybGtaVXhsYm1kMGFITWdQU0J6YVdSbFRHVnVaM1JvY3p0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2THlCdFpYUm9iMlJ6WEc1Y2JseHVJQ0FnSUY5amNtVmhkR1ZEYkdGemN5aFRhR0Z3WlN3Z1czdGNiaUFnSUNBZ0lDQWdhMlY1T2lBbmMyRjVTR1ZzYkc4bkxGeHVJQ0FnSUNBZ0lDQjJZV3gxWlRvZ1puVnVZM1JwYjI0Z2MyRjVTR1ZzYkc4b0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NW1hWEp6ZEU1aGJXVWdLeUFuSUNjZ0t5QjBhR2x6TG14aGMzUk9ZVzFsTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlN3Z2UxeHVJQ0FnSUNBZ0lDQnJaWGs2SUNkblpYUlFaWEpwYldWMFpYSW5MRnh1SUNBZ0lDQWdJQ0IyWVd4MVpUb2dablZ1WTNScGIyNGdaMlYwVUdWeWFXMWxkR1Z5S0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzTnBaR1ZNWlc1bmRHaHpMbkpsWkhWalpTaG1kVzVqZEdsdmJpQW9jSEpsZGxaaGJDd2dkbUZzS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhCeVpYWldZV3dnS3lCMllXdzdYRzRnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMHNJSHRjYmlBZ0lDQWdJQ0FnYTJWNU9pQW5aMlYwUVhKbFlTY3NYRzRnSUNBZ0lDQWdJSFpoYkhWbE9pQm1kVzVqZEdsdmJpQm5aWFJCY21WaEtDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM05wWkdWTVpXNW5kR2h6V3pCZElDb2dkR2hwY3k1ZmMybGtaVXhsYm1kMGFITmJNVjA3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WFNrN1hHNWNiaUFnSUNCeVpYUjFjbTRnVTJoaGNHVTdYRzU5S0NrN1hHNWNiblpoY2lCU1pXTjBZVzVuYkdVZ1BTQm1kVzVqZEdsdmJpQW9YMU5vWVhCbEtTQjdYRzRnSUNBZ1gybHVhR1Z5YVhSektGSmxZM1JoYm1kc1pTd2dYMU5vWVhCbEtUdGNibHh1SUNBZ0lHWjFibU4wYVc5dUlGSmxZM1JoYm1kc1pTZ3BJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlGOXlaV1k3WEc1Y2JpQWdJQ0FnSUNBZ1gyTnNZWE56UTJGc2JFTm9aV05yS0hSb2FYTXNJRkpsWTNSaGJtZHNaU2s3WEc1Y2JpQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ1gyeGxiaklnUFNCaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvTENCemFXUmxUR1Z1WjNSb2N5QTlJRUZ5Y21GNUtGOXNaVzR5S1N3Z1gydGxlVElnUFNBd095QmZhMlY1TWlBOElGOXNaVzR5T3lCZmEyVjVNaXNyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6YVdSbFRHVnVaM1JvYzF0ZmEyVjVNbDBnUFNCaGNtZDFiV1Z1ZEhOYlgydGxlVEpkTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdkbUZ5SUY5MGFHbHpJRDBnWDNCdmMzTnBZbXhsUTI5dWMzUnlkV04wYjNKU1pYUjFjbTRvZEdocGN5d2dLRjl5WldZZ1BTQlNaV04wWVc1bmJHVXVYMTl3Y205MGIxOWZJSHg4SUU5aWFtVmpkQzVuWlhSUWNtOTBiM1I1Y0dWUFppaFNaV04wWVc1bmJHVXBLUzVqWVd4c0xtRndjR3g1S0Y5eVpXWXNJRnQwYUdselhTNWpiMjVqWVhRb2MybGtaVXhsYm1kMGFITXBLU2s3WEc1Y2JpQWdJQ0FnSUNBZ1gzUm9hWE11WDI1aGJXVWdQU0FuVUhKdmMzUnZhOFNGZENjN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCZmRHaHBjenRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnlaWFIxY200Z1VtVmpkR0Z1WjJ4bE8xeHVmU2hUYUdGd1pTazdYRzVjYm5aaGNpQlRjWFZoY21VZ1BTQm1kVzVqZEdsdmJpQW9YMUpsWTNSaGJtZHNaU2tnZTF4dUlDQWdJRjlwYm1obGNtbDBjeWhUY1hWaGNtVXNJRjlTWldOMFlXNW5iR1VwTzF4dVhHNGdJQ0FnWm5WdVkzUnBiMjRnVTNGMVlYSmxLQ2tnZTF4dUlDQWdJQ0FnSUNCMllYSWdYM0psWmpJN1hHNWNiaUFnSUNBZ0lDQWdYMk5zWVhOelEyRnNiRU5vWldOcktIUm9hWE1zSUZOeGRXRnlaU2s3WEc1Y2JpQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ1gyeGxiak1nUFNCaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvTENCemFXUmxUR1Z1WjNSb2N5QTlJRUZ5Y21GNUtGOXNaVzR6S1N3Z1gydGxlVE1nUFNBd095QmZhMlY1TXlBOElGOXNaVzR6T3lCZmEyVjVNeXNyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6YVdSbFRHVnVaM1JvYzF0ZmEyVjVNMTBnUFNCaGNtZDFiV1Z1ZEhOYlgydGxlVE5kTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdkbUZ5SUY5MGFHbHpNaUE5SUY5d2IzTnphV0pzWlVOdmJuTjBjblZqZEc5eVVtVjBkWEp1S0hSb2FYTXNJQ2hmY21WbU1pQTlJRk54ZFdGeVpTNWZYM0J5YjNSdlgxOGdmSHdnVDJKcVpXTjBMbWRsZEZCeWIzUnZkSGx3WlU5bUtGTnhkV0Z5WlNrcExtTmhiR3d1WVhCd2JIa29YM0psWmpJc0lGdDBhR2x6WFM1amIyNWpZWFFvYzJsa1pVeGxibWQwYUhNcEtTazdYRzVjYmlBZ0lDQWdJQ0FnWDNSb2FYTXlMbDl1WVcxbElEMGdKMHQzWVdSeVlYUW5PMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdYM1JvYVhNeU8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhKbGRIVnliaUJUY1hWaGNtVTdYRzU5S0ZKbFkzUmhibWRzWlNrN1hHNWNiblpoY2lCVWNtbGhibWRzWlNBOUlHWjFibU4wYVc5dUlDaGZVMmhoY0dVeUtTQjdYRzRnSUNBZ1gybHVhR1Z5YVhSektGUnlhV0Z1WjJ4bExDQmZVMmhoY0dVeUtUdGNibHh1SUNBZ0lHWjFibU4wYVc5dUlGUnlhV0Z1WjJ4bEtDa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ1gzSmxaak03WEc1Y2JpQWdJQ0FnSUNBZ1gyTnNZWE56UTJGc2JFTm9aV05yS0hSb2FYTXNJRlJ5YVdGdVoyeGxLVHRjYmx4dUlDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCZmJHVnVOQ0E5SUdGeVozVnRaVzUwY3k1c1pXNW5kR2dzSUhOcFpHVk1aVzVuZEdoeklEMGdRWEp5WVhrb1gyeGxialFwTENCZmEyVjVOQ0E5SURBN0lGOXJaWGswSUR3Z1gyeGxialE3SUY5clpYazBLeXNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSE5wWkdWTVpXNW5kR2h6VzE5clpYazBYU0E5SUdGeVozVnRaVzUwYzF0ZmEyVjVORjA3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQjJZWElnWDNSb2FYTXpJRDBnWDNCdmMzTnBZbXhsUTI5dWMzUnlkV04wYjNKU1pYUjFjbTRvZEdocGN5d2dLRjl5WldZeklEMGdWSEpwWVc1bmJHVXVYMTl3Y205MGIxOWZJSHg4SUU5aWFtVmpkQzVuWlhSUWNtOTBiM1I1Y0dWUFppaFVjbWxoYm1kc1pTa3BMbU5oYkd3dVlYQndiSGtvWDNKbFpqTXNJRnQwYUdselhTNWpiMjVqWVhRb2MybGtaVXhsYm1kMGFITXBLU2s3WEc1Y2JpQWdJQ0FnSUNBZ1gzUm9hWE16TGw5dVlXMWxJRDBnSjFSeXc3TnFhOFNGZENjN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCZmRHaHBjek03WEc0Z0lDQWdmVnh1WEc0Z0lDQWdYMk55WldGMFpVTnNZWE56S0ZSeWFXRnVaMnhsTENCYmUxeHVJQ0FnSUNBZ0lDQnJaWGs2SUNkblpYUkJjbVZoSnl4Y2JpQWdJQ0FnSUNBZ2RtRnNkV1U2SUdaMWJtTjBhVzl1SUdkbGRFRnlaV0VvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1lTQTlJSFJvYVhNdVgzTnBaR1ZNWlc1bmRHaHpXekJkTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdLeWhoSUNvZ1lTQXFJRTFoZEdndWMzRnlkQ2d6S1NBdklEUXBMblJ2Um1sNFpXUW9NaWs3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WFNrN1hHNWNiaUFnSUNCeVpYUjFjbTRnVkhKcFlXNW5iR1U3WEc1OUtGTm9ZWEJsS1R0Y2JseHVkbUZ5SUhKbFl6RWdQU0J1WlhjZ1VtVmpkR0Z1WjJ4bEtESXdMQ0EwTUNrN1hHNTJZWElnYzNGeU1TQTlJRzVsZHlCVGNYVmhjbVVvTWpBcE8xeHVkbUZ5SUhSeU1TQTlJRzVsZHlCVWNtbGhibWRzWlNneU1DazdYRzU5S1M1allXeHNLSFJvYVhNc2NtVnhkV2x5WlNoY0ltVXZWU3M1TjF3aUtTeDBlWEJsYjJZZ2MyVnNaaUFoUFQwZ1hDSjFibVJsWm1sdVpXUmNJaUEvSUhObGJHWWdPaUIwZVhCbGIyWWdkMmx1Wkc5M0lDRTlQU0JjSW5WdVpHVm1hVzVsWkZ3aUlEOGdkMmx1Wkc5M0lEb2dlMzBzY21WeGRXbHlaU2hjSW1KMVptWmxjbHdpS1M1Q2RXWm1aWElzWVhKbmRXMWxiblJ6V3pOZExHRnlaM1Z0Wlc1MGMxczBYU3hoY21kMWJXVnVkSE5iTlYwc1lYSm5kVzFsYm5Seld6WmRMRndpTDJaaGEyVmZOMkk1WTJVMVpqWXVhbk5jSWl4Y0lpOWNJaWtpWFgwPVxuIl19

/*!
 * frameworkmvc
 * Fiercely quick and opinionated front-ends
 * https://github.com/lukasztyminski/OssomForms
 * @author Łukasz Tymiński
 * @version 1.0.0
 * Copyright 2018. MIT licensed.
 */
!function e(t,n,r){function i(a,s){if(!n[a]){if(!t[a]){var u="function"==typeof require&&require;if(!s&&u)return u(a,!0);if(o)return o(a,!0);throw new Error("Cannot find module '"+a+"'")}var f=n[a]={exports:{}};t[a][0].call(f.exports,function(e){var n=t[a][1][e];return i(n?n:e)},f,f.exports,e,t,n,r)}return n[a].exports}for(var o="function"==typeof require&&require,a=0;a<r.length;a++)i(r[a]);return i}({1:[function(e,t,n){(function(e,t,r,i,o,a,s,u,f){var l="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";!function(e){"use strict";function t(e){var t=e.charCodeAt(0);return t===o||t===c?62:t===a||t===h?63:t<s?-1:t<s+10?t-s+26+26:t<f+26?t-f:t<u+26?t-u+26:void 0}function n(e){function n(e){f[c++]=e}var r,o,a,s,u,f;if(e.length%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var l=e.length;u="="===e.charAt(l-2)?2:"="===e.charAt(l-1)?1:0,f=new i(3*e.length/4-u),a=u>0?e.length-4:e.length;var c=0;for(r=0,o=0;r<a;r+=4,o+=3)s=t(e.charAt(r))<<18|t(e.charAt(r+1))<<12|t(e.charAt(r+2))<<6|t(e.charAt(r+3)),n((16711680&s)>>16),n((65280&s)>>8),n(255&s);return 2===u?(s=t(e.charAt(r))<<2|t(e.charAt(r+1))>>4,n(255&s)):1===u&&(s=t(e.charAt(r))<<10|t(e.charAt(r+1))<<4|t(e.charAt(r+2))>>2,n(s>>8&255),n(255&s)),f}function r(e){function t(e){return l.charAt(e)}function n(e){return t(e>>18&63)+t(e>>12&63)+t(e>>6&63)+t(63&e)}var r,i,o,a=e.length%3,s="";for(r=0,o=e.length-a;r<o;r+=3)i=(e[r]<<16)+(e[r+1]<<8)+e[r+2],s+=n(i);switch(a){case 1:i=e[e.length-1],s+=t(i>>2),s+=t(i<<4&63),s+="==";break;case 2:i=(e[e.length-2]<<8)+e[e.length-1],s+=t(i>>10),s+=t(i>>4&63),s+=t(i<<2&63),s+="="}return s}var i="undefined"!=typeof Uint8Array?Uint8Array:Array,o="+".charCodeAt(0),a="/".charCodeAt(0),s="0".charCodeAt(0),u="a".charCodeAt(0),f="A".charCodeAt(0),c="-".charCodeAt(0),h="_".charCodeAt(0);e.toByteArray=n,e.fromByteArray=r}("undefined"==typeof n?this.base64js={}:n)}).call(this,e("e/U+97"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\..\\node_modules\\base64-js\\lib\\b64.js","/..\\..\\node_modules\\base64-js\\lib")},{buffer:2,"e/U+97":4}],2:[function(e,t,n){(function(t,r,i,o,a,s,u,f,l){function i(e,t,n){if(!(this instanceof i))return new i(e,t,n);var r=typeof e;if("base64"===t&&"string"===r)for(e=F(e);e.length%4!==0;)e+="=";var o;if("number"===r)o=D(e);else if("string"===r)o=i.byteLength(e,t);else{if("object"!==r)throw new Error("First argument needs to be a number, array or string.");o=D(e.length)}var a;i._useTypedArrays?a=i._augment(new Uint8Array(o)):(a=this,a.length=o,a._isBuffer=!0);var s;if(i._useTypedArrays&&"number"==typeof e.byteLength)a._set(e);else if(O(e))for(s=0;s<o;s++)i.isBuffer(e)?a[s]=e.readUInt8(s):a[s]=e[s];else if("string"===r)a.write(e,0,t);else if("number"===r&&!i._useTypedArrays&&!n)for(s=0;s<o;s++)a[s]=0;return a}function c(e,t,n,r){n=Number(n)||0;var o=e.length-n;r?(r=Number(r),r>o&&(r=o)):r=o;var a=t.length;K(a%2===0,"Invalid hex string"),r>a/2&&(r=a/2);for(var s=0;s<r;s++){var u=parseInt(t.substr(2*s,2),16);K(!isNaN(u),"Invalid hex string"),e[n+s]=u}return i._charsWritten=2*s,s}function h(e,t,n,r){var o=i._charsWritten=X(P(t),e,n,r);return o}function d(e,t,n,r){var o=i._charsWritten=X(J(t),e,n,r);return o}function g(e,t,n,r){return d(e,t,n,r)}function y(e,t,n,r){var o=i._charsWritten=X(V(t),e,n,r);return o}function p(e,t,n,r){var o=i._charsWritten=X(R(t),e,n,r);return o}function v(e,t,n){return 0===t&&n===e.length?Q.fromByteArray(e):Q.fromByteArray(e.slice(t,n))}function w(e,t,n){var r="",i="";n=Math.min(e.length,n);for(var o=t;o<n;o++)e[o]<=127?(r+=Y(i)+String.fromCharCode(e[o]),i=""):i+="%"+e[o].toString(16);return r+Y(i)}function b(e,t,n){var r="";n=Math.min(e.length,n);for(var i=t;i<n;i++)r+=String.fromCharCode(e[i]);return r}function m(e,t,n){return b(e,t,n)}function E(e,t,n){var r=e.length;(!t||t<0)&&(t=0),(!n||n<0||n>r)&&(n=r);for(var i="",o=t;o<n;o++)i+=W(e[o]);return i}function I(e,t,n){for(var r=e.slice(t,n),i="",o=0;o<r.length;o+=2)i+=String.fromCharCode(r[o]+256*r[o+1]);return i}function A(e,t,n,r){r||(K("boolean"==typeof n,"missing or invalid endian"),K(void 0!==t&&null!==t,"missing offset"),K(t+1<e.length,"Trying to read beyond buffer length"));var i=e.length;if(!(t>=i)){var o;return n?(o=e[t],t+1<i&&(o|=e[t+1]<<8)):(o=e[t]<<8,t+1<i&&(o|=e[t+1])),o}}function B(e,t,n,r){r||(K("boolean"==typeof n,"missing or invalid endian"),K(void 0!==t&&null!==t,"missing offset"),K(t+3<e.length,"Trying to read beyond buffer length"));var i=e.length;if(!(t>=i)){var o;return n?(t+2<i&&(o=e[t+2]<<16),t+1<i&&(o|=e[t+1]<<8),o|=e[t],t+3<i&&(o+=e[t+3]<<24>>>0)):(t+1<i&&(o=e[t+1]<<16),t+2<i&&(o|=e[t+2]<<8),t+3<i&&(o|=e[t+3]),o+=e[t]<<24>>>0),o}}function L(e,t,n,r){r||(K("boolean"==typeof n,"missing or invalid endian"),K(void 0!==t&&null!==t,"missing offset"),K(t+1<e.length,"Trying to read beyond buffer length"));var i=e.length;if(!(t>=i)){var o=A(e,t,n,!0),a=32768&o;return a?(65535-o+1)*-1:o}}function U(e,t,n,r){r||(K("boolean"==typeof n,"missing or invalid endian"),K(void 0!==t&&null!==t,"missing offset"),K(t+3<e.length,"Trying to read beyond buffer length"));var i=e.length;if(!(t>=i)){var o=B(e,t,n,!0),a=2147483648&o;return a?(4294967295-o+1)*-1:o}}function k(e,t,n,r){return r||(K("boolean"==typeof n,"missing or invalid endian"),K(t+3<e.length,"Trying to read beyond buffer length")),Z.read(e,t,n,23,4)}function _(e,t,n,r){return r||(K("boolean"==typeof n,"missing or invalid endian"),K(t+7<e.length,"Trying to read beyond buffer length")),Z.read(e,t,n,52,8)}function C(e,t,n,r,i){i||(K(void 0!==t&&null!==t,"missing value"),K("boolean"==typeof r,"missing or invalid endian"),K(void 0!==n&&null!==n,"missing offset"),K(n+1<e.length,"trying to write beyond buffer length"),z(t,65535));var o=e.length;if(!(n>=o))for(var a=0,s=Math.min(o-n,2);a<s;a++)e[n+a]=(t&255<<8*(r?a:1-a))>>>8*(r?a:1-a)}function S(e,t,n,r,i){i||(K(void 0!==t&&null!==t,"missing value"),K("boolean"==typeof r,"missing or invalid endian"),K(void 0!==n&&null!==n,"missing offset"),K(n+3<e.length,"trying to write beyond buffer length"),z(t,4294967295));var o=e.length;if(!(n>=o))for(var a=0,s=Math.min(o-n,4);a<s;a++)e[n+a]=t>>>8*(r?a:3-a)&255}function T(e,t,n,r,i){i||(K(void 0!==t&&null!==t,"missing value"),K("boolean"==typeof r,"missing or invalid endian"),K(void 0!==n&&null!==n,"missing offset"),K(n+1<e.length,"Trying to write beyond buffer length"),H(t,32767,-32768));var o=e.length;n>=o||(t>=0?C(e,t,n,r,i):C(e,65535+t+1,n,r,i))}function M(e,t,n,r,i){i||(K(void 0!==t&&null!==t,"missing value"),K("boolean"==typeof r,"missing or invalid endian"),K(void 0!==n&&null!==n,"missing offset"),K(n+3<e.length,"Trying to write beyond buffer length"),H(t,2147483647,-2147483648));var o=e.length;n>=o||(t>=0?S(e,t,n,r,i):S(e,4294967295+t+1,n,r,i))}function N(e,t,n,r,i){i||(K(void 0!==t&&null!==t,"missing value"),K("boolean"==typeof r,"missing or invalid endian"),K(void 0!==n&&null!==n,"missing offset"),K(n+3<e.length,"Trying to write beyond buffer length"),G(t,3.4028234663852886e38,-3.4028234663852886e38));var o=e.length;n>=o||Z.write(e,t,n,r,23,4)}function x(e,t,n,r,i){i||(K(void 0!==t&&null!==t,"missing value"),K("boolean"==typeof r,"missing or invalid endian"),K(void 0!==n&&null!==n,"missing offset"),K(n+7<e.length,"Trying to write beyond buffer length"),G(t,1.7976931348623157e308,-1.7976931348623157e308));var o=e.length;n>=o||Z.write(e,t,n,r,52,8)}function F(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}function j(e,t,n){return"number"!=typeof e?n:(e=~~e,e>=t?t:e>=0?e:(e+=t,e>=0?e:0))}function D(e){return e=~~Math.ceil(+e),e<0?0:e}function q(e){return(Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)})(e)}function O(e){return q(e)||i.isBuffer(e)||e&&"object"==typeof e&&"number"==typeof e.length}function W(e){return e<16?"0"+e.toString(16):e.toString(16)}function P(e){for(var t=[],n=0;n<e.length;n++){var r=e.charCodeAt(n);if(r<=127)t.push(e.charCodeAt(n));else{var i=n;r>=55296&&r<=57343&&n++;for(var o=encodeURIComponent(e.slice(i,n+1)).substr(1).split("%"),a=0;a<o.length;a++)t.push(parseInt(o[a],16))}}return t}function J(e){for(var t=[],n=0;n<e.length;n++)t.push(255&e.charCodeAt(n));return t}function R(e){for(var t,n,r,i=[],o=0;o<e.length;o++)t=e.charCodeAt(o),n=t>>8,r=t%256,i.push(r),i.push(n);return i}function V(e){return Q.toByteArray(e)}function X(e,t,n,r){for(var i=0;i<r&&!(i+n>=t.length||i>=e.length);i++)t[i+n]=e[i];return i}function Y(e){try{return decodeURIComponent(e)}catch(t){return String.fromCharCode(65533)}}function z(e,t){K("number"==typeof e,"cannot write a non-number as a number"),K(e>=0,"specified a negative value for writing an unsigned value"),K(e<=t,"value is larger than maximum value for type"),K(Math.floor(e)===e,"value has a fractional component")}function H(e,t,n){K("number"==typeof e,"cannot write a non-number as a number"),K(e<=t,"value larger than maximum allowed value"),K(e>=n,"value smaller than minimum allowed value"),K(Math.floor(e)===e,"value has a fractional component")}function G(e,t,n){K("number"==typeof e,"cannot write a non-number as a number"),K(e<=t,"value larger than maximum allowed value"),K(e>=n,"value smaller than minimum allowed value")}function K(e,t){if(!e)throw new Error(t||"Failed assertion")}var Q=e("base64-js"),Z=e("ieee754");n.Buffer=i,n.SlowBuffer=i,n.INSPECT_MAX_BYTES=50,i.poolSize=8192,i._useTypedArrays=function(){try{var e=new ArrayBuffer(0),t=new Uint8Array(e);return t.foo=function(){return 42},42===t.foo()&&"function"==typeof t.subarray}catch(n){return!1}}(),i.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"raw":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},i.isBuffer=function(e){return!(null===e||void 0===e||!e._isBuffer)},i.byteLength=function(e,t){var n;switch(e+="",t||"utf8"){case"hex":n=e.length/2;break;case"utf8":case"utf-8":n=P(e).length;break;case"ascii":case"binary":case"raw":n=e.length;break;case"base64":n=V(e).length;break;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":n=2*e.length;break;default:throw new Error("Unknown encoding")}return n},i.concat=function(e,t){if(K(q(e),"Usage: Buffer.concat(list, [totalLength])\nlist should be an Array."),0===e.length)return new i(0);if(1===e.length)return e[0];var n;if("number"!=typeof t)for(t=0,n=0;n<e.length;n++)t+=e[n].length;var r=new i(t),o=0;for(n=0;n<e.length;n++){var a=e[n];a.copy(r,o),o+=a.length}return r},i.prototype.write=function(e,t,n,r){if(isFinite(t))isFinite(n)||(r=n,n=void 0);else{var i=r;r=t,t=n,n=i}t=Number(t)||0;var o=this.length-t;n?(n=Number(n),n>o&&(n=o)):n=o,r=String(r||"utf8").toLowerCase();var a;switch(r){case"hex":a=c(this,e,t,n);break;case"utf8":case"utf-8":a=h(this,e,t,n);break;case"ascii":a=d(this,e,t,n);break;case"binary":a=g(this,e,t,n);break;case"base64":a=y(this,e,t,n);break;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":a=p(this,e,t,n);break;default:throw new Error("Unknown encoding")}return a},i.prototype.toString=function(e,t,n){var r=this;if(e=String(e||"utf8").toLowerCase(),t=Number(t)||0,n=void 0!==n?Number(n):n=r.length,n===t)return"";var i;switch(e){case"hex":i=E(r,t,n);break;case"utf8":case"utf-8":i=w(r,t,n);break;case"ascii":i=b(r,t,n);break;case"binary":i=m(r,t,n);break;case"base64":i=v(r,t,n);break;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":i=I(r,t,n);break;default:throw new Error("Unknown encoding")}return i},i.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}},i.prototype.copy=function(e,t,n,r){var o=this;if(n||(n=0),r||0===r||(r=this.length),t||(t=0),r!==n&&0!==e.length&&0!==o.length){K(r>=n,"sourceEnd < sourceStart"),K(t>=0&&t<e.length,"targetStart out of bounds"),K(n>=0&&n<o.length,"sourceStart out of bounds"),K(r>=0&&r<=o.length,"sourceEnd out of bounds"),r>this.length&&(r=this.length),e.length-t<r-n&&(r=e.length-t+n);var a=r-n;if(a<100||!i._useTypedArrays)for(var s=0;s<a;s++)e[s+t]=this[s+n];else e._set(this.subarray(n,n+a),t)}},i.prototype.slice=function(e,t){var n=this.length;if(e=j(e,n,0),t=j(t,n,n),i._useTypedArrays)return i._augment(this.subarray(e,t));for(var r=t-e,o=new i(r,(void 0),(!0)),a=0;a<r;a++)o[a]=this[a+e];return o},i.prototype.get=function(e){return console.log(".get() is deprecated. Access using array indexes instead."),this.readUInt8(e)},i.prototype.set=function(e,t){return console.log(".set() is deprecated. Access using array indexes instead."),this.writeUInt8(e,t)},i.prototype.readUInt8=function(e,t){if(t||(K(void 0!==e&&null!==e,"missing offset"),K(e<this.length,"Trying to read beyond buffer length")),!(e>=this.length))return this[e]},i.prototype.readUInt16LE=function(e,t){return A(this,e,!0,t)},i.prototype.readUInt16BE=function(e,t){return A(this,e,!1,t)},i.prototype.readUInt32LE=function(e,t){return B(this,e,!0,t)},i.prototype.readUInt32BE=function(e,t){return B(this,e,!1,t)},i.prototype.readInt8=function(e,t){if(t||(K(void 0!==e&&null!==e,"missing offset"),K(e<this.length,"Trying to read beyond buffer length")),!(e>=this.length)){var n=128&this[e];return n?(255-this[e]+1)*-1:this[e]}},i.prototype.readInt16LE=function(e,t){return L(this,e,!0,t)},i.prototype.readInt16BE=function(e,t){return L(this,e,!1,t)},i.prototype.readInt32LE=function(e,t){return U(this,e,!0,t)},i.prototype.readInt32BE=function(e,t){return U(this,e,!1,t)},i.prototype.readFloatLE=function(e,t){return k(this,e,!0,t)},i.prototype.readFloatBE=function(e,t){return k(this,e,!1,t)},i.prototype.readDoubleLE=function(e,t){return _(this,e,!0,t)},i.prototype.readDoubleBE=function(e,t){return _(this,e,!1,t)},i.prototype.writeUInt8=function(e,t,n){n||(K(void 0!==e&&null!==e,"missing value"),K(void 0!==t&&null!==t,"missing offset"),K(t<this.length,"trying to write beyond buffer length"),z(e,255)),t>=this.length||(this[t]=e)},i.prototype.writeUInt16LE=function(e,t,n){C(this,e,t,!0,n)},i.prototype.writeUInt16BE=function(e,t,n){C(this,e,t,!1,n)},i.prototype.writeUInt32LE=function(e,t,n){S(this,e,t,!0,n)},i.prototype.writeUInt32BE=function(e,t,n){S(this,e,t,!1,n)},i.prototype.writeInt8=function(e,t,n){n||(K(void 0!==e&&null!==e,"missing value"),K(void 0!==t&&null!==t,"missing offset"),K(t<this.length,"Trying to write beyond buffer length"),H(e,127,-128)),t>=this.length||(e>=0?this.writeUInt8(e,t,n):this.writeUInt8(255+e+1,t,n))},i.prototype.writeInt16LE=function(e,t,n){T(this,e,t,!0,n)},i.prototype.writeInt16BE=function(e,t,n){T(this,e,t,!1,n)},i.prototype.writeInt32LE=function(e,t,n){M(this,e,t,!0,n)},i.prototype.writeInt32BE=function(e,t,n){M(this,e,t,!1,n)},i.prototype.writeFloatLE=function(e,t,n){N(this,e,t,!0,n)},i.prototype.writeFloatBE=function(e,t,n){N(this,e,t,!1,n)},i.prototype.writeDoubleLE=function(e,t,n){x(this,e,t,!0,n)},i.prototype.writeDoubleBE=function(e,t,n){x(this,e,t,!1,n)},i.prototype.fill=function(e,t,n){if(e||(e=0),t||(t=0),n||(n=this.length),"string"==typeof e&&(e=e.charCodeAt(0)),K("number"==typeof e&&!isNaN(e),"value is not a number"),K(n>=t,"end < start"),n!==t&&0!==this.length){K(t>=0&&t<this.length,"start out of bounds"),K(n>=0&&n<=this.length,"end out of bounds");for(var r=t;r<n;r++)this[r]=e}},i.prototype.inspect=function(){for(var e=[],t=this.length,r=0;r<t;r++)if(e[r]=W(this[r]),r===n.INSPECT_MAX_BYTES){e[r+1]="...";break}return"<Buffer "+e.join(" ")+">"},i.prototype.toArrayBuffer=function(){if("undefined"!=typeof Uint8Array){if(i._useTypedArrays)return new i(this).buffer;for(var e=new Uint8Array(this.length),t=0,n=e.length;t<n;t+=1)e[t]=this[t];return e.buffer}throw new Error("Buffer.toArrayBuffer not supported in this browser")};var $=i.prototype;i._augment=function(e){return e._isBuffer=!0,e._get=e.get,e._set=e.set,e.get=$.get,e.set=$.set,e.write=$.write,e.toString=$.toString,e.toLocaleString=$.toString,e.toJSON=$.toJSON,e.copy=$.copy,e.slice=$.slice,e.readUInt8=$.readUInt8,e.readUInt16LE=$.readUInt16LE,e.readUInt16BE=$.readUInt16BE,e.readUInt32LE=$.readUInt32LE,e.readUInt32BE=$.readUInt32BE,e.readInt8=$.readInt8,e.readInt16LE=$.readInt16LE,e.readInt16BE=$.readInt16BE,e.readInt32LE=$.readInt32LE,e.readInt32BE=$.readInt32BE,e.readFloatLE=$.readFloatLE,e.readFloatBE=$.readFloatBE,e.readDoubleLE=$.readDoubleLE,e.readDoubleBE=$.readDoubleBE,e.writeUInt8=$.writeUInt8,e.writeUInt16LE=$.writeUInt16LE,e.writeUInt16BE=$.writeUInt16BE,e.writeUInt32LE=$.writeUInt32LE,e.writeUInt32BE=$.writeUInt32BE,e.writeInt8=$.writeInt8,e.writeInt16LE=$.writeInt16LE,e.writeInt16BE=$.writeInt16BE,e.writeInt32LE=$.writeInt32LE,e.writeInt32BE=$.writeInt32BE,e.writeFloatLE=$.writeFloatLE,e.writeFloatBE=$.writeFloatBE,e.writeDoubleLE=$.writeDoubleLE,e.writeDoubleBE=$.writeDoubleBE,e.fill=$.fill,e.inspect=$.inspect,e.toArrayBuffer=$.toArrayBuffer,e}}).call(this,e("e/U+97"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\..\\node_modules\\buffer\\index.js","/..\\..\\node_modules\\buffer")},{"base64-js":1,buffer:2,"e/U+97":4,ieee754:3}],3:[function(e,t,n){(function(e,t,r,i,o,a,s,u,f){n.read=function(e,t,n,r,i){var o,a,s=8*i-r-1,u=(1<<s)-1,f=u>>1,l=-7,c=n?i-1:0,h=n?-1:1,d=e[t+c];for(c+=h,o=d&(1<<-l)-1,d>>=-l,l+=s;l>0;o=256*o+e[t+c],c+=h,l-=8);for(a=o&(1<<-l)-1,o>>=-l,l+=r;l>0;a=256*a+e[t+c],c+=h,l-=8);if(0===o)o=1-f;else{if(o===u)return a?NaN:(d?-1:1)*(1/0);a+=Math.pow(2,r),o-=f}return(d?-1:1)*a*Math.pow(2,o-r)},n.write=function(e,t,n,r,i,o){var a,s,u,f=8*o-i-1,l=(1<<f)-1,c=l>>1,h=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,d=r?0:o-1,g=r?1:-1,y=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(s=isNaN(t)?1:0,a=l):(a=Math.floor(Math.log(t)/Math.LN2),t*(u=Math.pow(2,-a))<1&&(a--,u*=2),t+=a+c>=1?h/u:h*Math.pow(2,1-c),t*u>=2&&(a++,u/=2),a+c>=l?(s=0,a=l):a+c>=1?(s=(t*u-1)*Math.pow(2,i),a+=c):(s=t*Math.pow(2,c-1)*Math.pow(2,i),a=0));i>=8;e[n+d]=255&s,d+=g,s/=256,i-=8);for(a=a<<i|s,f+=i;f>0;e[n+d]=255&a,d+=g,a/=256,f-=8);e[n+d-g]|=128*y}}).call(this,e("e/U+97"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\..\\node_modules\\ieee754\\index.js","/..\\..\\node_modules\\ieee754")},{buffer:2,"e/U+97":4}],4:[function(e,t,n){(function(e,n,r,i,o,a,s,u,f){function l(){}var e=t.exports={};e.nextTick=function(){var e="undefined"!=typeof window&&window.setImmediate,t="undefined"!=typeof window&&window.postMessage&&window.addEventListener;if(e)return function(e){return window.setImmediate(e)};if(t){var n=[];return window.addEventListener("message",function(e){var t=e.source;if((t===window||null===t)&&"process-tick"===e.data&&(e.stopPropagation(),n.length>0)){var r=n.shift();r()}},!0),function(e){n.push(e),window.postMessage("process-tick","*")}}return function(e){setTimeout(e,0)}}(),e.title="browser",e.browser=!0,e.env={},e.argv=[],e.on=l,e.addListener=l,e.once=l,e.off=l,e.removeListener=l,e.removeAllListeners=l,e.emit=l,e.binding=function(e){throw new Error("process.binding is not supported")},e.cwd=function(){return"/"},e.chdir=function(e){throw new Error("process.chdir is not supported")}}).call(this,e("e/U+97"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\..\\node_modules\\process\\browser.js","/..\\..\\node_modules\\process")},{buffer:2,"e/U+97":4}],5:[function(e,t,n){(function(e,t,n,r,i,o,a,s,u){"use strict";function f(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();!function(){var e=function(){function e(t){var n=this;f(this,e),this.form=t,this.fields=this.form.querySelectorAll(":required"),this.errors=[],this.errorsList=this.form.querySelector(".alert ol"),this.fields.length&&this.form.addEventListener("submit",function(e){e.preventDefault();var t=n.validate();t&&n.form.submit()})}return l(e,[{key:"validate",value:function(){this.clearErrors();var e=!0,t=!1,n=void 0;try{for(var r,i=this.fields[Symbol.iterator]();!(e=(r=i.next()).done);e=!0){var o=r.value;this.validateField(o)}}catch(a){t=!0,n=a}finally{try{!e&&i["return"]&&i["return"]()}finally{if(t)throw n}}return!this.errors.length||void this.showErrors()}},{key:"validateField",value:function(e){var t=e.validity.valid;t?this.markAsValid(e):(this.errors.push(e.dataset.errorMessage),this.markAsInvalid(e))}},{key:"markAsValid",value:function(e){e.classList.remove("invalid"),e.classList.add("valid")}},{key:"markAsInvalid",value:function(e){e.classList.remove("valid"),e.classList.add("invalid")}},{key:"showErrors",value:function(){var e=document.createDocumentFragment(),t=!0,n=!1,r=void 0;try{for(var i,o=this.errors[Symbol.iterator]();!(t=(i=o.next()).done);t=!0){var a=i.value,s=document.createElement("li");s.textContent=a,e.appendChild(s)}}catch(u){n=!0,r=u}finally{try{!t&&o["return"]&&o["return"]()}finally{if(n)throw r}}this.errorsList.appendChild(e),this.errorsList.parentNode.style.display="block"}},{key:"clearErrors",value:function(){this.errors.length=0,this.errorsList.parentNode.style.display="none",this.errorsList.innerHTML=""}}]),e}();new e(document.querySelector("#form"))}()}).call(this,e("e/U+97"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/fake_1eb2dad1.js","/")},{buffer:2,"e/U+97":4}]},{},[5]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,

/*!
 * frameworkmvc
 * Fiercely quick and opinionated front-ends
 * https://github.com/lukasztyminski/OssomForms
 * @author Łukasz Tymiński
 * @version 1.0.0
 * Copyright 2018. MIT licensed.
 */
!function t(e,n,r){function i(s,a){if(!n[s]){if(!e[s]){var u="function"==typeof require&&require;if(!a&&u)return u(s,!0);if(o)return o(s,!0);throw new Error("Cannot find module '"+s+"'")}var f=n[s]={exports:{}};e[s][0].call(f.exports,function(t){var n=e[s][1][t];return i(n?n:t)},f,f.exports,t,e,n,r)}return n[s].exports}for(var o="function"==typeof require&&require,s=0;s<r.length;s++)i(r[s]);return i}({1:[function(t,e,n){(function(t,e,r,i,o,s,a,u,f){var h="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";!function(t){"use strict";function e(t){var e=t.charCodeAt(0);return e===o||e===l?62:e===s||e===c?63:e<a?-1:e<a+10?e-a+26+26:e<f+26?e-f:e<u+26?e-u+26:void 0}function n(t){function n(t){f[l++]=t}var r,o,s,a,u,f;if(t.length%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var h=t.length;u="="===t.charAt(h-2)?2:"="===t.charAt(h-1)?1:0,f=new i(3*t.length/4-u),s=u>0?t.length-4:t.length;var l=0;for(r=0,o=0;r<s;r+=4,o+=3)a=e(t.charAt(r))<<18|e(t.charAt(r+1))<<12|e(t.charAt(r+2))<<6|e(t.charAt(r+3)),n((16711680&a)>>16),n((65280&a)>>8),n(255&a);return 2===u?(a=e(t.charAt(r))<<2|e(t.charAt(r+1))>>4,n(255&a)):1===u&&(a=e(t.charAt(r))<<10|e(t.charAt(r+1))<<4|e(t.charAt(r+2))>>2,n(a>>8&255),n(255&a)),f}function r(t){function e(t){return h.charAt(t)}function n(t){return e(t>>18&63)+e(t>>12&63)+e(t>>6&63)+e(63&t)}var r,i,o,s=t.length%3,a="";for(r=0,o=t.length-s;r<o;r+=3)i=(t[r]<<16)+(t[r+1]<<8)+t[r+2],a+=n(i);switch(s){case 1:i=t[t.length-1],a+=e(i>>2),a+=e(i<<4&63),a+="==";break;case 2:i=(t[t.length-2]<<8)+t[t.length-1],a+=e(i>>10),a+=e(i>>4&63),a+=e(i<<2&63),a+="="}return a}var i="undefined"!=typeof Uint8Array?Uint8Array:Array,o="+".charCodeAt(0),s="/".charCodeAt(0),a="0".charCodeAt(0),u="a".charCodeAt(0),f="A".charCodeAt(0),l="-".charCodeAt(0),c="_".charCodeAt(0);t.toByteArray=n,t.fromByteArray=r}("undefined"==typeof n?this.base64js={}:n)}).call(this,t("e/U+97"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},t("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\..\\node_modules\\base64-js\\lib\\b64.js","/..\\..\\node_modules\\base64-js\\lib")},{buffer:2,"e/U+97":4}],2:[function(t,e,n){(function(e,r,i,o,s,a,u,f,h){function i(t,e,n){if(!(this instanceof i))return new i(t,e,n);var r=typeof t;if("base64"===e&&"string"===r)for(t=F(t);t.length%4!==0;)t+="=";var o;if("number"===r)o=D(t);else if("string"===r)o=i.byteLength(t,e);else{if("object"!==r)throw new Error("First argument needs to be a number, array or string.");o=D(t.length)}var s;i._useTypedArrays?s=i._augment(new Uint8Array(o)):(s=this,s.length=o,s._isBuffer=!0);var a;if(i._useTypedArrays&&"number"==typeof t.byteLength)s._set(t);else if(R(t))for(a=0;a<o;a++)i.isBuffer(t)?s[a]=t.readUInt8(a):s[a]=t[a];else if("string"===r)s.write(t,0,e);else if("number"===r&&!i._useTypedArrays&&!n)for(a=0;a<o;a++)s[a]=0;return s}function l(t,e,n,r){n=Number(n)||0;var o=t.length-n;r?(r=Number(r),r>o&&(r=o)):r=o;var s=e.length;Q(s%2===0,"Invalid hex string"),r>s/2&&(r=s/2);for(var a=0;a<r;a++){var u=parseInt(e.substr(2*a,2),16);Q(!isNaN(u),"Invalid hex string"),t[n+a]=u}return i._charsWritten=2*a,a}function c(t,e,n,r){var o=i._charsWritten=X(H(e),t,n,r);return o}function d(t,e,n,r){var o=i._charsWritten=X(W(e),t,n,r);return o}function g(t,e,n,r){return d(t,e,n,r)}function p(t,e,n,r){var o=i._charsWritten=X(J(e),t,n,r);return o}function y(t,e,n,r){var o=i._charsWritten=X(z(e),t,n,r);return o}function w(t,e,n){return 0===e&&n===t.length?V.fromByteArray(t):V.fromByteArray(t.slice(e,n))}function b(t,e,n){var r="",i="";n=Math.min(t.length,n);for(var o=e;o<n;o++)t[o]<=127?(r+=P(i)+String.fromCharCode(t[o]),i=""):i+="%"+t[o].toString(16);return r+P(i)}function v(t,e,n){var r="";n=Math.min(t.length,n);for(var i=e;i<n;i++)r+=String.fromCharCode(t[i]);return r}function m(t,e,n){return v(t,e,n)}function E(t,e,n){var r=t.length;(!e||e<0)&&(e=0),(!n||n<0||n>r)&&(n=r);for(var i="",o=e;o<n;o++)i+=q(t[o]);return i}function _(t,e,n){for(var r=t.slice(e,n),i="",o=0;o<r.length;o+=2)i+=String.fromCharCode(r[o]+256*r[o+1]);return i}function I(t,e,n,r){r||(Q("boolean"==typeof n,"missing or invalid endian"),Q(void 0!==e&&null!==e,"missing offset"),Q(e+1<t.length,"Trying to read beyond buffer length"));var i=t.length;if(!(e>=i)){var o;return n?(o=t[e],e+1<i&&(o|=t[e+1]<<8)):(o=t[e]<<8,e+1<i&&(o|=t[e+1])),o}}function B(t,e,n,r){r||(Q("boolean"==typeof n,"missing or invalid endian"),Q(void 0!==e&&null!==e,"missing offset"),Q(e+3<t.length,"Trying to read beyond buffer length"));var i=t.length;if(!(e>=i)){var o;return n?(e+2<i&&(o=t[e+2]<<16),e+1<i&&(o|=t[e+1]<<8),o|=t[e],e+3<i&&(o+=t[e+3]<<24>>>0)):(e+1<i&&(o=t[e+1]<<16),e+2<i&&(o|=t[e+2]<<8),e+3<i&&(o|=t[e+3]),o+=t[e]<<24>>>0),o}}function U(t,e,n,r){r||(Q("boolean"==typeof n,"missing or invalid endian"),Q(void 0!==e&&null!==e,"missing offset"),Q(e+1<t.length,"Trying to read beyond buffer length"));var i=t.length;if(!(e>=i)){var o=I(t,e,n,!0),s=32768&o;return s?(65535-o+1)*-1:o}}function A(t,e,n,r){r||(Q("boolean"==typeof n,"missing or invalid endian"),Q(void 0!==e&&null!==e,"missing offset"),Q(e+3<t.length,"Trying to read beyond buffer length"));var i=t.length;if(!(e>=i)){var o=B(t,e,n,!0),s=2147483648&o;return s?(4294967295-o+1)*-1:o}}function L(t,e,n,r){return r||(Q("boolean"==typeof n,"missing or invalid endian"),Q(e+3<t.length,"Trying to read beyond buffer length")),Z.read(t,e,n,23,4)}function x(t,e,n,r){return r||(Q("boolean"==typeof n,"missing or invalid endian"),Q(e+7<t.length,"Trying to read beyond buffer length")),Z.read(t,e,n,52,8)}function S(t,e,n,r,i){i||(Q(void 0!==e&&null!==e,"missing value"),Q("boolean"==typeof r,"missing or invalid endian"),Q(void 0!==n&&null!==n,"missing offset"),Q(n+1<t.length,"trying to write beyond buffer length"),G(e,65535));var o=t.length;if(!(n>=o))for(var s=0,a=Math.min(o-n,2);s<a;s++)t[n+s]=(e&255<<8*(r?s:1-s))>>>8*(r?s:1-s)}function C(t,e,n,r,i){i||(Q(void 0!==e&&null!==e,"missing value"),Q("boolean"==typeof r,"missing or invalid endian"),Q(void 0!==n&&null!==n,"missing offset"),Q(n+3<t.length,"trying to write beyond buffer length"),G(e,4294967295));var o=t.length;if(!(n>=o))for(var s=0,a=Math.min(o-n,4);s<a;s++)t[n+s]=e>>>8*(r?s:3-s)&255}function T(t,e,n,r,i){i||(Q(void 0!==e&&null!==e,"missing value"),Q("boolean"==typeof r,"missing or invalid endian"),Q(void 0!==n&&null!==n,"missing offset"),Q(n+1<t.length,"Trying to write beyond buffer length"),Y(e,32767,-32768));var o=t.length;n>=o||(e>=0?S(t,e,n,r,i):S(t,65535+e+1,n,r,i))}function k(t,e,n,r,i){i||(Q(void 0!==e&&null!==e,"missing value"),Q("boolean"==typeof r,"missing or invalid endian"),Q(void 0!==n&&null!==n,"missing offset"),Q(n+3<t.length,"Trying to write beyond buffer length"),Y(e,2147483647,-2147483648));var o=t.length;n>=o||(e>=0?C(t,e,n,r,i):C(t,4294967295+e+1,n,r,i))}function M(t,e,n,r,i){i||(Q(void 0!==e&&null!==e,"missing value"),Q("boolean"==typeof r,"missing or invalid endian"),Q(void 0!==n&&null!==n,"missing offset"),Q(n+3<t.length,"Trying to write beyond buffer length"),K(e,3.4028234663852886e38,-3.4028234663852886e38));var o=t.length;n>=o||Z.write(t,e,n,r,23,4)}function N(t,e,n,r,i){i||(Q(void 0!==e&&null!==e,"missing value"),Q("boolean"==typeof r,"missing or invalid endian"),Q(void 0!==n&&null!==n,"missing offset"),Q(n+7<t.length,"Trying to write beyond buffer length"),K(e,1.7976931348623157e308,-1.7976931348623157e308));var o=t.length;n>=o||Z.write(t,e,n,r,52,8)}function F(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}function j(t,e,n){return"number"!=typeof t?n:(t=~~t,t>=e?e:t>=0?t:(t+=e,t>=0?t:0))}function D(t){return t=~~Math.ceil(+t),t<0?0:t}function O(t){return(Array.isArray||function(t){return"[object Array]"===Object.prototype.toString.call(t)})(t)}function R(t){return O(t)||i.isBuffer(t)||t&&"object"==typeof t&&"number"==typeof t.length}function q(t){return t<16?"0"+t.toString(16):t.toString(16)}function H(t){for(var e=[],n=0;n<t.length;n++){var r=t.charCodeAt(n);if(r<=127)e.push(t.charCodeAt(n));else{var i=n;r>=55296&&r<=57343&&n++;for(var o=encodeURIComponent(t.slice(i,n+1)).substr(1).split("%"),s=0;s<o.length;s++)e.push(parseInt(o[s],16))}}return e}function W(t){for(var e=[],n=0;n<t.length;n++)e.push(255&t.charCodeAt(n));return e}function z(t){for(var e,n,r,i=[],o=0;o<t.length;o++)e=t.charCodeAt(o),n=e>>8,r=e%256,i.push(r),i.push(n);return i}function J(t){return V.toByteArray(t)}function X(t,e,n,r){for(var i=0;i<r&&!(i+n>=e.length||i>=t.length);i++)e[i+n]=t[i];return i}function P(t){try{return decodeURIComponent(t)}catch(e){return String.fromCharCode(65533)}}function G(t,e){Q("number"==typeof t,"cannot write a non-number as a number"),Q(t>=0,"specified a negative value for writing an unsigned value"),Q(t<=e,"value is larger than maximum value for type"),Q(Math.floor(t)===t,"value has a fractional component")}function Y(t,e,n){Q("number"==typeof t,"cannot write a non-number as a number"),Q(t<=e,"value larger than maximum allowed value"),Q(t>=n,"value smaller than minimum allowed value"),Q(Math.floor(t)===t,"value has a fractional component")}function K(t,e,n){Q("number"==typeof t,"cannot write a non-number as a number"),Q(t<=e,"value larger than maximum allowed value"),Q(t>=n,"value smaller than minimum allowed value")}function Q(t,e){if(!t)throw new Error(e||"Failed assertion")}var V=t("base64-js"),Z=t("ieee754");n.Buffer=i,n.SlowBuffer=i,n.INSPECT_MAX_BYTES=50,i.poolSize=8192,i._useTypedArrays=function(){try{var t=new ArrayBuffer(0),e=new Uint8Array(t);return e.foo=function(){return 42},42===e.foo()&&"function"==typeof e.subarray}catch(n){return!1}}(),i.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"raw":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},i.isBuffer=function(t){return!(null===t||void 0===t||!t._isBuffer)},i.byteLength=function(t,e){var n;switch(t+="",e||"utf8"){case"hex":n=t.length/2;break;case"utf8":case"utf-8":n=H(t).length;break;case"ascii":case"binary":case"raw":n=t.length;break;case"base64":n=J(t).length;break;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":n=2*t.length;break;default:throw new Error("Unknown encoding")}return n},i.concat=function(t,e){if(Q(O(t),"Usage: Buffer.concat(list, [totalLength])\nlist should be an Array."),0===t.length)return new i(0);if(1===t.length)return t[0];var n;if("number"!=typeof e)for(e=0,n=0;n<t.length;n++)e+=t[n].length;var r=new i(e),o=0;for(n=0;n<t.length;n++){var s=t[n];s.copy(r,o),o+=s.length}return r},i.prototype.write=function(t,e,n,r){if(isFinite(e))isFinite(n)||(r=n,n=void 0);else{var i=r;r=e,e=n,n=i}e=Number(e)||0;var o=this.length-e;n?(n=Number(n),n>o&&(n=o)):n=o,r=String(r||"utf8").toLowerCase();var s;switch(r){case"hex":s=l(this,t,e,n);break;case"utf8":case"utf-8":s=c(this,t,e,n);break;case"ascii":s=d(this,t,e,n);break;case"binary":s=g(this,t,e,n);break;case"base64":s=p(this,t,e,n);break;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":s=y(this,t,e,n);break;default:throw new Error("Unknown encoding")}return s},i.prototype.toString=function(t,e,n){var r=this;if(t=String(t||"utf8").toLowerCase(),e=Number(e)||0,n=void 0!==n?Number(n):n=r.length,n===e)return"";var i;switch(t){case"hex":i=E(r,e,n);break;case"utf8":case"utf-8":i=b(r,e,n);break;case"ascii":i=v(r,e,n);break;case"binary":i=m(r,e,n);break;case"base64":i=w(r,e,n);break;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":i=_(r,e,n);break;default:throw new Error("Unknown encoding")}return i},i.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}},i.prototype.copy=function(t,e,n,r){var o=this;if(n||(n=0),r||0===r||(r=this.length),e||(e=0),r!==n&&0!==t.length&&0!==o.length){Q(r>=n,"sourceEnd < sourceStart"),Q(e>=0&&e<t.length,"targetStart out of bounds"),Q(n>=0&&n<o.length,"sourceStart out of bounds"),Q(r>=0&&r<=o.length,"sourceEnd out of bounds"),r>this.length&&(r=this.length),t.length-e<r-n&&(r=t.length-e+n);var s=r-n;if(s<100||!i._useTypedArrays)for(var a=0;a<s;a++)t[a+e]=this[a+n];else t._set(this.subarray(n,n+s),e)}},i.prototype.slice=function(t,e){var n=this.length;if(t=j(t,n,0),e=j(e,n,n),i._useTypedArrays)return i._augment(this.subarray(t,e));for(var r=e-t,o=new i(r,(void 0),(!0)),s=0;s<r;s++)o[s]=this[s+t];return o},i.prototype.get=function(t){return console.log(".get() is deprecated. Access using array indexes instead."),this.readUInt8(t)},i.prototype.set=function(t,e){return console.log(".set() is deprecated. Access using array indexes instead."),this.writeUInt8(t,e)},i.prototype.readUInt8=function(t,e){if(e||(Q(void 0!==t&&null!==t,"missing offset"),Q(t<this.length,"Trying to read beyond buffer length")),!(t>=this.length))return this[t]},i.prototype.readUInt16LE=function(t,e){return I(this,t,!0,e)},i.prototype.readUInt16BE=function(t,e){return I(this,t,!1,e)},i.prototype.readUInt32LE=function(t,e){return B(this,t,!0,e)},i.prototype.readUInt32BE=function(t,e){return B(this,t,!1,e)},i.prototype.readInt8=function(t,e){if(e||(Q(void 0!==t&&null!==t,"missing offset"),Q(t<this.length,"Trying to read beyond buffer length")),!(t>=this.length)){var n=128&this[t];return n?(255-this[t]+1)*-1:this[t]}},i.prototype.readInt16LE=function(t,e){return U(this,t,!0,e)},i.prototype.readInt16BE=function(t,e){return U(this,t,!1,e)},i.prototype.readInt32LE=function(t,e){return A(this,t,!0,e)},i.prototype.readInt32BE=function(t,e){return A(this,t,!1,e)},i.prototype.readFloatLE=function(t,e){return L(this,t,!0,e)},i.prototype.readFloatBE=function(t,e){return L(this,t,!1,e)},i.prototype.readDoubleLE=function(t,e){return x(this,t,!0,e)},i.prototype.readDoubleBE=function(t,e){return x(this,t,!1,e)},i.prototype.writeUInt8=function(t,e,n){n||(Q(void 0!==t&&null!==t,"missing value"),Q(void 0!==e&&null!==e,"missing offset"),Q(e<this.length,"trying to write beyond buffer length"),G(t,255)),e>=this.length||(this[e]=t)},i.prototype.writeUInt16LE=function(t,e,n){S(this,t,e,!0,n)},i.prototype.writeUInt16BE=function(t,e,n){S(this,t,e,!1,n)},i.prototype.writeUInt32LE=function(t,e,n){C(this,t,e,!0,n)},i.prototype.writeUInt32BE=function(t,e,n){C(this,t,e,!1,n)},i.prototype.writeInt8=function(t,e,n){n||(Q(void 0!==t&&null!==t,"missing value"),Q(void 0!==e&&null!==e,"missing offset"),Q(e<this.length,"Trying to write beyond buffer length"),Y(t,127,-128)),e>=this.length||(t>=0?this.writeUInt8(t,e,n):this.writeUInt8(255+t+1,e,n))},i.prototype.writeInt16LE=function(t,e,n){T(this,t,e,!0,n)},i.prototype.writeInt16BE=function(t,e,n){T(this,t,e,!1,n)},i.prototype.writeInt32LE=function(t,e,n){k(this,t,e,!0,n)},i.prototype.writeInt32BE=function(t,e,n){k(this,t,e,!1,n)},i.prototype.writeFloatLE=function(t,e,n){M(this,t,e,!0,n)},i.prototype.writeFloatBE=function(t,e,n){M(this,t,e,!1,n)},i.prototype.writeDoubleLE=function(t,e,n){N(this,t,e,!0,n)},i.prototype.writeDoubleBE=function(t,e,n){N(this,t,e,!1,n)},i.prototype.fill=function(t,e,n){if(t||(t=0),e||(e=0),n||(n=this.length),"string"==typeof t&&(t=t.charCodeAt(0)),Q("number"==typeof t&&!isNaN(t),"value is not a number"),Q(n>=e,"end < start"),n!==e&&0!==this.length){Q(e>=0&&e<this.length,"start out of bounds"),Q(n>=0&&n<=this.length,"end out of bounds");for(var r=e;r<n;r++)this[r]=t}},i.prototype.inspect=function(){for(var t=[],e=this.length,r=0;r<e;r++)if(t[r]=q(this[r]),r===n.INSPECT_MAX_BYTES){t[r+1]="...";break}return"<Buffer "+t.join(" ")+">"},i.prototype.toArrayBuffer=function(){if("undefined"!=typeof Uint8Array){if(i._useTypedArrays)return new i(this).buffer;for(var t=new Uint8Array(this.length),e=0,n=t.length;e<n;e+=1)t[e]=this[e];return t.buffer}throw new Error("Buffer.toArrayBuffer not supported in this browser")};var $=i.prototype;i._augment=function(t){return t._isBuffer=!0,t._get=t.get,t._set=t.set,t.get=$.get,t.set=$.set,t.write=$.write,t.toString=$.toString,t.toLocaleString=$.toString,t.toJSON=$.toJSON,t.copy=$.copy,t.slice=$.slice,t.readUInt8=$.readUInt8,t.readUInt16LE=$.readUInt16LE,t.readUInt16BE=$.readUInt16BE,t.readUInt32LE=$.readUInt32LE,t.readUInt32BE=$.readUInt32BE,t.readInt8=$.readInt8,t.readInt16LE=$.readInt16LE,t.readInt16BE=$.readInt16BE,t.readInt32LE=$.readInt32LE,t.readInt32BE=$.readInt32BE,t.readFloatLE=$.readFloatLE,t.readFloatBE=$.readFloatBE,t.readDoubleLE=$.readDoubleLE,t.readDoubleBE=$.readDoubleBE,t.writeUInt8=$.writeUInt8,t.writeUInt16LE=$.writeUInt16LE,t.writeUInt16BE=$.writeUInt16BE,t.writeUInt32LE=$.writeUInt32LE,t.writeUInt32BE=$.writeUInt32BE,t.writeInt8=$.writeInt8,t.writeInt16LE=$.writeInt16LE,t.writeInt16BE=$.writeInt16BE,t.writeInt32LE=$.writeInt32LE,t.writeInt32BE=$.writeInt32BE,t.writeFloatLE=$.writeFloatLE,t.writeFloatBE=$.writeFloatBE,t.writeDoubleLE=$.writeDoubleLE,t.writeDoubleBE=$.writeDoubleBE,t.fill=$.fill,t.inspect=$.inspect,t.toArrayBuffer=$.toArrayBuffer,t}}).call(this,t("e/U+97"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},t("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\..\\node_modules\\buffer\\index.js","/..\\..\\node_modules\\buffer")},{"base64-js":1,buffer:2,"e/U+97":4,ieee754:3}],3:[function(t,e,n){(function(t,e,r,i,o,s,a,u,f){n.read=function(t,e,n,r,i){var o,s,a=8*i-r-1,u=(1<<a)-1,f=u>>1,h=-7,l=n?i-1:0,c=n?-1:1,d=t[e+l];for(l+=c,o=d&(1<<-h)-1,d>>=-h,h+=a;h>0;o=256*o+t[e+l],l+=c,h-=8);for(s=o&(1<<-h)-1,o>>=-h,h+=r;h>0;s=256*s+t[e+l],l+=c,h-=8);if(0===o)o=1-f;else{if(o===u)return s?NaN:(d?-1:1)*(1/0);s+=Math.pow(2,r),o-=f}return(d?-1:1)*s*Math.pow(2,o-r)},n.write=function(t,e,n,r,i,o){var s,a,u,f=8*o-i-1,h=(1<<f)-1,l=h>>1,c=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,d=r?0:o-1,g=r?1:-1,p=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(a=isNaN(e)?1:0,s=h):(s=Math.floor(Math.log(e)/Math.LN2),e*(u=Math.pow(2,-s))<1&&(s--,u*=2),e+=s+l>=1?c/u:c*Math.pow(2,1-l),e*u>=2&&(s++,u/=2),s+l>=h?(a=0,s=h):s+l>=1?(a=(e*u-1)*Math.pow(2,i),s+=l):(a=e*Math.pow(2,l-1)*Math.pow(2,i),s=0));i>=8;t[n+d]=255&a,d+=g,a/=256,i-=8);for(s=s<<i|a,f+=i;f>0;t[n+d]=255&s,d+=g,s/=256,f-=8);t[n+d-g]|=128*p}}).call(this,t("e/U+97"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},t("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\..\\node_modules\\ieee754\\index.js","/..\\..\\node_modules\\ieee754")},{buffer:2,"e/U+97":4}],4:[function(t,e,n){(function(t,n,r,i,o,s,a,u,f){function h(){}var t=e.exports={};t.nextTick=function(){var t="undefined"!=typeof window&&window.setImmediate,e="undefined"!=typeof window&&window.postMessage&&window.addEventListener;if(t)return function(t){return window.setImmediate(t)};if(e){var n=[];return window.addEventListener("message",function(t){var e=t.source;if((e===window||null===e)&&"process-tick"===t.data&&(t.stopPropagation(),n.length>0)){var r=n.shift();r()}},!0),function(t){n.push(t),window.postMessage("process-tick","*")}}return function(t){setTimeout(t,0)}}(),t.title="browser",t.browser=!0,t.env={},t.argv=[],t.on=h,t.addListener=h,t.once=h,t.off=h,t.removeListener=h,t.removeAllListeners=h,t.emit=h,t.binding=function(t){throw new Error("process.binding is not supported")},t.cwd=function(){return"/"},t.chdir=function(t){throw new Error("process.chdir is not supported")}}).call(this,t("e/U+97"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},t("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\..\\node_modules\\process\\browser.js","/..\\..\\node_modules\\process")},{buffer:2,"e/U+97":4}],5:[function(t,e,n){(function(t,e,n,r,i,o,s,a,u){"use strict";function f(t){return this instanceof f?(this._xhr=new XMLHttpRequest,this._config=this._extendOptions(t),this._assignEvents(),void this._beforeSend()):new f(t)}f.prototype._extendOptions=function(t){var e=JSON.parse(JSON.stringify(this._defaultConfig));for(var n in e)n in t||(t[n]=e[n]);return t},f.prototype._assignEvents=function(t){this._xhr.addEventListener("readystatechange",this._handleResponse.bind(this),!1),this._xhr.addEventListener("abort",this._handleError.bind(this),!1),this._xhr.addEventListener("error",this._handleError.bind(this),!1),this._xhr.addEventListener("timeout",this._handleError.bind(this),!1)},f.prototype._assignUserHeaders=function(t){if(Object.keys(this._config.headers).length)for(var e in this._config.headers)this._xhr.setRequestHeader(e,this._config.headers[e])},f.prototype._open=function(){this._xhr.open(this._config.type,this._config.url,this._config.options.async,this._config.options.username,this._config.options.password),this._xhr.setRequestHeader("X-Requsted-With","XMLHttpRequest"),this._xhr.timeout=this._config.options.timeout},f.prototype._beforeSend=function(){var t=Object.keys(this._config.data).length>0,e=null;"POST"===this._config.type.toUpperCase()&&t?e=this._serializeFormData(this._config.data):"GET"===this._config.type.toUpperCase()&&t&&(this._config.url+="?"+this._serializeData(this._config.data)),this._open(),this._assignUserHeaders(),this._send(e)},f.prototype._send=function(t){this._xhr.send(t)},f.prototype._serializeData=function(t){var e="";for(var n in t)e+=n+"="+encodeURIComponent(t[n])+"&";return e.slice(0,e.length-1)},f.prototype._serializeFormData=function(t){var e=new FormData;for(var n in t)e.append(n,t[n]);return e},f.prototype._handleResponse=function(t){4===this._xhr.readyState&&this._xhr.status>=200&&this._xhr.status<=400?"function"==typeof this._config.success&&this._config.success(this._xhr.response,this._xhr):4===this._xhr.readyState&&404===this._xhr.status&&this._handleError()},f.prototype._handleError=function(t){"function"==typeof this._config.failure&&this._config.failure(this._xhr)},f.prototype._defaultConfig={type:"GET",url:window.location.href,data:{},options:{async:!0,timeout:0,username:null,password:null},headers:{}},f({type:"POST",url:"odbierz.php",data:{firstName:"Jan",lastName:"Kowalski"},headers:{"X-My-Header":"123#asdf"},success:function(t,e){console.log("Udalo sie! Status:"+e.response)},failure:function(t){console.log("Wystąpił błąd. Status:"+t.status)}})}).call(this,t("e/U+97"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},t("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/fake_54cf86e5.js","/")},{buffer:2,"e/U+97":4}]},{},[5]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,

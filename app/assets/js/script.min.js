/*!
 * frameworkmvc
 * Fiercely quick and opinionated front-ends
 * https://github.com/lukasztyminski/OssomForms
 * @author Łukasz Tymiński
 * @version 1.0.0
 * Copyright 2018. MIT licensed.
 */
!function t(e,n,r){function o(a,s){if(!n[a]){if(!e[a]){var u="function"==typeof require&&require;if(!s&&u)return u(a,!0);if(i)return i(a,!0);throw new Error("Cannot find module '"+a+"'")}var f=n[a]={exports:{}};e[a][0].call(f.exports,function(t){var n=e[a][1][t];return o(n?n:t)},f,f.exports,t,e,n,r)}return n[a].exports}for(var i="function"==typeof require&&require,a=0;a<r.length;a++)o(r[a]);return o}({1:[function(t,e,n){(function(t,e,r,o,i,a,s,u,f){var l="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";!function(t){"use strict";function e(t){var e=t.charCodeAt(0);return e===i||e===c?62:e===a||e===h?63:e<s?-1:e<s+10?e-s+26+26:e<f+26?e-f:e<u+26?e-u+26:void 0}function n(t){function n(t){f[c++]=t}var r,i,a,s,u,f;if(t.length%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var l=t.length;u="="===t.charAt(l-2)?2:"="===t.charAt(l-1)?1:0,f=new o(3*t.length/4-u),a=u>0?t.length-4:t.length;var c=0;for(r=0,i=0;r<a;r+=4,i+=3)s=e(t.charAt(r))<<18|e(t.charAt(r+1))<<12|e(t.charAt(r+2))<<6|e(t.charAt(r+3)),n((16711680&s)>>16),n((65280&s)>>8),n(255&s);return 2===u?(s=e(t.charAt(r))<<2|e(t.charAt(r+1))>>4,n(255&s)):1===u&&(s=e(t.charAt(r))<<10|e(t.charAt(r+1))<<4|e(t.charAt(r+2))>>2,n(s>>8&255),n(255&s)),f}function r(t){function e(t){return l.charAt(t)}function n(t){return e(t>>18&63)+e(t>>12&63)+e(t>>6&63)+e(63&t)}var r,o,i,a=t.length%3,s="";for(r=0,i=t.length-a;r<i;r+=3)o=(t[r]<<16)+(t[r+1]<<8)+t[r+2],s+=n(o);switch(a){case 1:o=t[t.length-1],s+=e(o>>2),s+=e(o<<4&63),s+="==";break;case 2:o=(t[t.length-2]<<8)+t[t.length-1],s+=e(o>>10),s+=e(o>>4&63),s+=e(o<<2&63),s+="="}return s}var o="undefined"!=typeof Uint8Array?Uint8Array:Array,i="+".charCodeAt(0),a="/".charCodeAt(0),s="0".charCodeAt(0),u="a".charCodeAt(0),f="A".charCodeAt(0),c="-".charCodeAt(0),h="_".charCodeAt(0);t.toByteArray=n,t.fromByteArray=r}("undefined"==typeof n?this.base64js={}:n)}).call(this,t("e/U+97"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},t("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\..\\node_modules\\base64-js\\lib\\b64.js","/..\\..\\node_modules\\base64-js\\lib")},{buffer:2,"e/U+97":4}],2:[function(t,e,n){(function(e,r,o,i,a,s,u,f,l){function o(t,e,n){if(!(this instanceof o))return new o(t,e,n);var r=typeof t;if("base64"===e&&"string"===r)for(t=x(t);t.length%4!==0;)t+="=";var i;if("number"===r)i=D(t);else if("string"===r)i=o.byteLength(t,e);else{if("object"!==r)throw new Error("First argument needs to be a number, array or string.");i=D(t.length)}var a;o._useTypedArrays?a=o._augment(new Uint8Array(i)):(a=this,a.length=i,a._isBuffer=!0);var s;if(o._useTypedArrays&&"number"==typeof t.byteLength)a._set(t);else if(q(t))for(s=0;s<i;s++)o.isBuffer(t)?a[s]=t.readUInt8(s):a[s]=t[s];else if("string"===r)a.write(t,0,e);else if("number"===r&&!o._useTypedArrays&&!n)for(s=0;s<i;s++)a[s]=0;return a}function c(t,e,n,r){n=Number(n)||0;var i=t.length-n;r?(r=Number(r),r>i&&(r=i)):r=i;var a=e.length;Q(a%2===0,"Invalid hex string"),r>a/2&&(r=a/2);for(var s=0;s<r;s++){var u=parseInt(e.substr(2*s,2),16);Q(!isNaN(u),"Invalid hex string"),t[n+s]=u}return o._charsWritten=2*s,s}function h(t,e,n,r){var i=o._charsWritten=Y(W(e),t,n,r);return i}function d(t,e,n,r){var i=o._charsWritten=Y(J(e),t,n,r);return i}function g(t,e,n,r){return d(t,e,n,r)}function p(t,e,n,r){var i=o._charsWritten=Y(X(e),t,n,r);return i}function y(t,e,n,r){var i=o._charsWritten=Y(R(e),t,n,r);return i}function w(t,e,n){return 0===e&&n===t.length?V.fromByteArray(t):V.fromByteArray(t.slice(e,n))}function b(t,e,n){var r="",o="";n=Math.min(t.length,n);for(var i=e;i<n;i++)t[i]<=127?(r+=z(o)+String.fromCharCode(t[i]),o=""):o+="%"+t[i].toString(16);return r+z(o)}function v(t,e,n){var r="";n=Math.min(t.length,n);for(var o=e;o<n;o++)r+=String.fromCharCode(t[o]);return r}function m(t,e,n){return v(t,e,n)}function E(t,e,n){var r=t.length;(!e||e<0)&&(e=0),(!n||n<0||n>r)&&(n=r);for(var o="",i=e;i<n;i++)o+=P(t[i]);return o}function I(t,e,n){for(var r=t.slice(e,n),o="",i=0;i<r.length;i+=2)o+=String.fromCharCode(r[i]+256*r[i+1]);return o}function B(t,e,n,r){r||(Q("boolean"==typeof n,"missing or invalid endian"),Q(void 0!==e&&null!==e,"missing offset"),Q(e+1<t.length,"Trying to read beyond buffer length"));var o=t.length;if(!(e>=o)){var i;return n?(i=t[e],e+1<o&&(i|=t[e+1]<<8)):(i=t[e]<<8,e+1<o&&(i|=t[e+1])),i}}function A(t,e,n,r){r||(Q("boolean"==typeof n,"missing or invalid endian"),Q(void 0!==e&&null!==e,"missing offset"),Q(e+3<t.length,"Trying to read beyond buffer length"));var o=t.length;if(!(e>=o)){var i;return n?(e+2<o&&(i=t[e+2]<<16),e+1<o&&(i|=t[e+1]<<8),i|=t[e],e+3<o&&(i+=t[e+3]<<24>>>0)):(e+1<o&&(i=t[e+1]<<16),e+2<o&&(i|=t[e+2]<<8),e+3<o&&(i|=t[e+3]),i+=t[e]<<24>>>0),i}}function U(t,e,n,r){r||(Q("boolean"==typeof n,"missing or invalid endian"),Q(void 0!==e&&null!==e,"missing offset"),Q(e+1<t.length,"Trying to read beyond buffer length"));var o=t.length;if(!(e>=o)){var i=B(t,e,n,!0),a=32768&i;return a?(65535-i+1)*-1:i}}function L(t,e,n,r){r||(Q("boolean"==typeof n,"missing or invalid endian"),Q(void 0!==e&&null!==e,"missing offset"),Q(e+3<t.length,"Trying to read beyond buffer length"));var o=t.length;if(!(e>=o)){var i=A(t,e,n,!0),a=2147483648&i;return a?(4294967295-i+1)*-1:i}}function _(t,e,n,r){return r||(Q("boolean"==typeof n,"missing or invalid endian"),Q(e+3<t.length,"Trying to read beyond buffer length")),Z.read(t,e,n,23,4)}function C(t,e,n,r){return r||(Q("boolean"==typeof n,"missing or invalid endian"),Q(e+7<t.length,"Trying to read beyond buffer length")),Z.read(t,e,n,52,8)}function S(t,e,n,r,o){o||(Q(void 0!==e&&null!==e,"missing value"),Q("boolean"==typeof r,"missing or invalid endian"),Q(void 0!==n&&null!==n,"missing offset"),Q(n+1<t.length,"trying to write beyond buffer length"),K(e,65535));var i=t.length;if(!(n>=i))for(var a=0,s=Math.min(i-n,2);a<s;a++)t[n+a]=(e&255<<8*(r?a:1-a))>>>8*(r?a:1-a)}function k(t,e,n,r,o){o||(Q(void 0!==e&&null!==e,"missing value"),Q("boolean"==typeof r,"missing or invalid endian"),Q(void 0!==n&&null!==n,"missing offset"),Q(n+3<t.length,"trying to write beyond buffer length"),K(e,4294967295));var i=t.length;if(!(n>=i))for(var a=0,s=Math.min(i-n,4);a<s;a++)t[n+a]=e>>>8*(r?a:3-a)&255}function T(t,e,n,r,o){o||(Q(void 0!==e&&null!==e,"missing value"),Q("boolean"==typeof r,"missing or invalid endian"),Q(void 0!==n&&null!==n,"missing offset"),Q(n+1<t.length,"Trying to write beyond buffer length"),G(e,32767,-32768));var i=t.length;n>=i||(e>=0?S(t,e,n,r,o):S(t,65535+e+1,n,r,o))}function M(t,e,n,r,o){o||(Q(void 0!==e&&null!==e,"missing value"),Q("boolean"==typeof r,"missing or invalid endian"),Q(void 0!==n&&null!==n,"missing offset"),Q(n+3<t.length,"Trying to write beyond buffer length"),G(e,2147483647,-2147483648));var i=t.length;n>=i||(e>=0?k(t,e,n,r,o):k(t,4294967295+e+1,n,r,o))}function N(t,e,n,r,o){o||(Q(void 0!==e&&null!==e,"missing value"),Q("boolean"==typeof r,"missing or invalid endian"),Q(void 0!==n&&null!==n,"missing offset"),Q(n+3<t.length,"Trying to write beyond buffer length"),H(e,3.4028234663852886e38,-3.4028234663852886e38));var i=t.length;n>=i||Z.write(t,e,n,r,23,4)}function j(t,e,n,r,o){o||(Q(void 0!==e&&null!==e,"missing value"),Q("boolean"==typeof r,"missing or invalid endian"),Q(void 0!==n&&null!==n,"missing offset"),Q(n+7<t.length,"Trying to write beyond buffer length"),H(e,1.7976931348623157e308,-1.7976931348623157e308));var i=t.length;n>=i||Z.write(t,e,n,r,52,8)}function x(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}function F(t,e,n){return"number"!=typeof t?n:(t=~~t,t>=e?e:t>=0?t:(t+=e,t>=0?t:0))}function D(t){return t=~~Math.ceil(+t),t<0?0:t}function O(t){return(Array.isArray||function(t){return"[object Array]"===Object.prototype.toString.call(t)})(t)}function q(t){return O(t)||o.isBuffer(t)||t&&"object"==typeof t&&"number"==typeof t.length}function P(t){return t<16?"0"+t.toString(16):t.toString(16)}function W(t){for(var e=[],n=0;n<t.length;n++){var r=t.charCodeAt(n);if(r<=127)e.push(t.charCodeAt(n));else{var o=n;r>=55296&&r<=57343&&n++;for(var i=encodeURIComponent(t.slice(o,n+1)).substr(1).split("%"),a=0;a<i.length;a++)e.push(parseInt(i[a],16))}}return e}function J(t){for(var e=[],n=0;n<t.length;n++)e.push(255&t.charCodeAt(n));return e}function R(t){for(var e,n,r,o=[],i=0;i<t.length;i++)e=t.charCodeAt(i),n=e>>8,r=e%256,o.push(r),o.push(n);return o}function X(t){return V.toByteArray(t)}function Y(t,e,n,r){for(var o=0;o<r&&!(o+n>=e.length||o>=t.length);o++)e[o+n]=t[o];return o}function z(t){try{return decodeURIComponent(t)}catch(e){return String.fromCharCode(65533)}}function K(t,e){Q("number"==typeof t,"cannot write a non-number as a number"),Q(t>=0,"specified a negative value for writing an unsigned value"),Q(t<=e,"value is larger than maximum value for type"),Q(Math.floor(t)===t,"value has a fractional component")}function G(t,e,n){Q("number"==typeof t,"cannot write a non-number as a number"),Q(t<=e,"value larger than maximum allowed value"),Q(t>=n,"value smaller than minimum allowed value"),Q(Math.floor(t)===t,"value has a fractional component")}function H(t,e,n){Q("number"==typeof t,"cannot write a non-number as a number"),Q(t<=e,"value larger than maximum allowed value"),Q(t>=n,"value smaller than minimum allowed value")}function Q(t,e){if(!t)throw new Error(e||"Failed assertion")}var V=t("base64-js"),Z=t("ieee754");n.Buffer=o,n.SlowBuffer=o,n.INSPECT_MAX_BYTES=50,o.poolSize=8192,o._useTypedArrays=function(){try{var t=new ArrayBuffer(0),e=new Uint8Array(t);return e.foo=function(){return 42},42===e.foo()&&"function"==typeof e.subarray}catch(n){return!1}}(),o.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"raw":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},o.isBuffer=function(t){return!(null===t||void 0===t||!t._isBuffer)},o.byteLength=function(t,e){var n;switch(t+="",e||"utf8"){case"hex":n=t.length/2;break;case"utf8":case"utf-8":n=W(t).length;break;case"ascii":case"binary":case"raw":n=t.length;break;case"base64":n=X(t).length;break;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":n=2*t.length;break;default:throw new Error("Unknown encoding")}return n},o.concat=function(t,e){if(Q(O(t),"Usage: Buffer.concat(list, [totalLength])\nlist should be an Array."),0===t.length)return new o(0);if(1===t.length)return t[0];var n;if("number"!=typeof e)for(e=0,n=0;n<t.length;n++)e+=t[n].length;var r=new o(e),i=0;for(n=0;n<t.length;n++){var a=t[n];a.copy(r,i),i+=a.length}return r},o.prototype.write=function(t,e,n,r){if(isFinite(e))isFinite(n)||(r=n,n=void 0);else{var o=r;r=e,e=n,n=o}e=Number(e)||0;var i=this.length-e;n?(n=Number(n),n>i&&(n=i)):n=i,r=String(r||"utf8").toLowerCase();var a;switch(r){case"hex":a=c(this,t,e,n);break;case"utf8":case"utf-8":a=h(this,t,e,n);break;case"ascii":a=d(this,t,e,n);break;case"binary":a=g(this,t,e,n);break;case"base64":a=p(this,t,e,n);break;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":a=y(this,t,e,n);break;default:throw new Error("Unknown encoding")}return a},o.prototype.toString=function(t,e,n){var r=this;if(t=String(t||"utf8").toLowerCase(),e=Number(e)||0,n=void 0!==n?Number(n):n=r.length,n===e)return"";var o;switch(t){case"hex":o=E(r,e,n);break;case"utf8":case"utf-8":o=b(r,e,n);break;case"ascii":o=v(r,e,n);break;case"binary":o=m(r,e,n);break;case"base64":o=w(r,e,n);break;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":o=I(r,e,n);break;default:throw new Error("Unknown encoding")}return o},o.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}},o.prototype.copy=function(t,e,n,r){var i=this;if(n||(n=0),r||0===r||(r=this.length),e||(e=0),r!==n&&0!==t.length&&0!==i.length){Q(r>=n,"sourceEnd < sourceStart"),Q(e>=0&&e<t.length,"targetStart out of bounds"),Q(n>=0&&n<i.length,"sourceStart out of bounds"),Q(r>=0&&r<=i.length,"sourceEnd out of bounds"),r>this.length&&(r=this.length),t.length-e<r-n&&(r=t.length-e+n);var a=r-n;if(a<100||!o._useTypedArrays)for(var s=0;s<a;s++)t[s+e]=this[s+n];else t._set(this.subarray(n,n+a),e)}},o.prototype.slice=function(t,e){var n=this.length;if(t=F(t,n,0),e=F(e,n,n),o._useTypedArrays)return o._augment(this.subarray(t,e));for(var r=e-t,i=new o(r,(void 0),(!0)),a=0;a<r;a++)i[a]=this[a+t];return i},o.prototype.get=function(t){return console.log(".get() is deprecated. Access using array indexes instead."),this.readUInt8(t)},o.prototype.set=function(t,e){return console.log(".set() is deprecated. Access using array indexes instead."),this.writeUInt8(t,e)},o.prototype.readUInt8=function(t,e){if(e||(Q(void 0!==t&&null!==t,"missing offset"),Q(t<this.length,"Trying to read beyond buffer length")),!(t>=this.length))return this[t]},o.prototype.readUInt16LE=function(t,e){return B(this,t,!0,e)},o.prototype.readUInt16BE=function(t,e){return B(this,t,!1,e)},o.prototype.readUInt32LE=function(t,e){return A(this,t,!0,e)},o.prototype.readUInt32BE=function(t,e){return A(this,t,!1,e)},o.prototype.readInt8=function(t,e){if(e||(Q(void 0!==t&&null!==t,"missing offset"),Q(t<this.length,"Trying to read beyond buffer length")),!(t>=this.length)){var n=128&this[t];return n?(255-this[t]+1)*-1:this[t]}},o.prototype.readInt16LE=function(t,e){return U(this,t,!0,e)},o.prototype.readInt16BE=function(t,e){return U(this,t,!1,e)},o.prototype.readInt32LE=function(t,e){return L(this,t,!0,e)},o.prototype.readInt32BE=function(t,e){return L(this,t,!1,e)},o.prototype.readFloatLE=function(t,e){return _(this,t,!0,e)},o.prototype.readFloatBE=function(t,e){return _(this,t,!1,e)},o.prototype.readDoubleLE=function(t,e){return C(this,t,!0,e)},o.prototype.readDoubleBE=function(t,e){return C(this,t,!1,e)},o.prototype.writeUInt8=function(t,e,n){n||(Q(void 0!==t&&null!==t,"missing value"),Q(void 0!==e&&null!==e,"missing offset"),Q(e<this.length,"trying to write beyond buffer length"),K(t,255)),e>=this.length||(this[e]=t)},o.prototype.writeUInt16LE=function(t,e,n){S(this,t,e,!0,n)},o.prototype.writeUInt16BE=function(t,e,n){S(this,t,e,!1,n)},o.prototype.writeUInt32LE=function(t,e,n){k(this,t,e,!0,n)},o.prototype.writeUInt32BE=function(t,e,n){k(this,t,e,!1,n)},o.prototype.writeInt8=function(t,e,n){n||(Q(void 0!==t&&null!==t,"missing value"),Q(void 0!==e&&null!==e,"missing offset"),Q(e<this.length,"Trying to write beyond buffer length"),G(t,127,-128)),e>=this.length||(t>=0?this.writeUInt8(t,e,n):this.writeUInt8(255+t+1,e,n))},o.prototype.writeInt16LE=function(t,e,n){T(this,t,e,!0,n)},o.prototype.writeInt16BE=function(t,e,n){T(this,t,e,!1,n)},o.prototype.writeInt32LE=function(t,e,n){M(this,t,e,!0,n)},o.prototype.writeInt32BE=function(t,e,n){M(this,t,e,!1,n)},o.prototype.writeFloatLE=function(t,e,n){N(this,t,e,!0,n)},o.prototype.writeFloatBE=function(t,e,n){N(this,t,e,!1,n)},o.prototype.writeDoubleLE=function(t,e,n){j(this,t,e,!0,n)},o.prototype.writeDoubleBE=function(t,e,n){j(this,t,e,!1,n)},o.prototype.fill=function(t,e,n){if(t||(t=0),e||(e=0),n||(n=this.length),"string"==typeof t&&(t=t.charCodeAt(0)),Q("number"==typeof t&&!isNaN(t),"value is not a number"),Q(n>=e,"end < start"),n!==e&&0!==this.length){Q(e>=0&&e<this.length,"start out of bounds"),Q(n>=0&&n<=this.length,"end out of bounds");for(var r=e;r<n;r++)this[r]=t}},o.prototype.inspect=function(){for(var t=[],e=this.length,r=0;r<e;r++)if(t[r]=P(this[r]),r===n.INSPECT_MAX_BYTES){t[r+1]="...";break}return"<Buffer "+t.join(" ")+">"},o.prototype.toArrayBuffer=function(){if("undefined"!=typeof Uint8Array){if(o._useTypedArrays)return new o(this).buffer;for(var t=new Uint8Array(this.length),e=0,n=t.length;e<n;e+=1)t[e]=this[e];return t.buffer}throw new Error("Buffer.toArrayBuffer not supported in this browser")};var $=o.prototype;o._augment=function(t){return t._isBuffer=!0,t._get=t.get,t._set=t.set,t.get=$.get,t.set=$.set,t.write=$.write,t.toString=$.toString,t.toLocaleString=$.toString,t.toJSON=$.toJSON,t.copy=$.copy,t.slice=$.slice,t.readUInt8=$.readUInt8,t.readUInt16LE=$.readUInt16LE,t.readUInt16BE=$.readUInt16BE,t.readUInt32LE=$.readUInt32LE,t.readUInt32BE=$.readUInt32BE,t.readInt8=$.readInt8,t.readInt16LE=$.readInt16LE,t.readInt16BE=$.readInt16BE,t.readInt32LE=$.readInt32LE,t.readInt32BE=$.readInt32BE,t.readFloatLE=$.readFloatLE,t.readFloatBE=$.readFloatBE,t.readDoubleLE=$.readDoubleLE,t.readDoubleBE=$.readDoubleBE,t.writeUInt8=$.writeUInt8,t.writeUInt16LE=$.writeUInt16LE,t.writeUInt16BE=$.writeUInt16BE,t.writeUInt32LE=$.writeUInt32LE,t.writeUInt32BE=$.writeUInt32BE,t.writeInt8=$.writeInt8,t.writeInt16LE=$.writeInt16LE,t.writeInt16BE=$.writeInt16BE,t.writeInt32LE=$.writeInt32LE,t.writeInt32BE=$.writeInt32BE,t.writeFloatLE=$.writeFloatLE,t.writeFloatBE=$.writeFloatBE,t.writeDoubleLE=$.writeDoubleLE,t.writeDoubleBE=$.writeDoubleBE,t.fill=$.fill,t.inspect=$.inspect,t.toArrayBuffer=$.toArrayBuffer,t}}).call(this,t("e/U+97"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},t("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\..\\node_modules\\buffer\\index.js","/..\\..\\node_modules\\buffer")},{"base64-js":1,buffer:2,"e/U+97":4,ieee754:3}],3:[function(t,e,n){(function(t,e,r,o,i,a,s,u,f){n.read=function(t,e,n,r,o){var i,a,s=8*o-r-1,u=(1<<s)-1,f=u>>1,l=-7,c=n?o-1:0,h=n?-1:1,d=t[e+c];for(c+=h,i=d&(1<<-l)-1,d>>=-l,l+=s;l>0;i=256*i+t[e+c],c+=h,l-=8);for(a=i&(1<<-l)-1,i>>=-l,l+=r;l>0;a=256*a+t[e+c],c+=h,l-=8);if(0===i)i=1-f;else{if(i===u)return a?NaN:(d?-1:1)*(1/0);a+=Math.pow(2,r),i-=f}return(d?-1:1)*a*Math.pow(2,i-r)},n.write=function(t,e,n,r,o,i){var a,s,u,f=8*i-o-1,l=(1<<f)-1,c=l>>1,h=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,d=r?0:i-1,g=r?1:-1,p=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(s=isNaN(e)?1:0,a=l):(a=Math.floor(Math.log(e)/Math.LN2),e*(u=Math.pow(2,-a))<1&&(a--,u*=2),e+=a+c>=1?h/u:h*Math.pow(2,1-c),e*u>=2&&(a++,u/=2),a+c>=l?(s=0,a=l):a+c>=1?(s=(e*u-1)*Math.pow(2,o),a+=c):(s=e*Math.pow(2,c-1)*Math.pow(2,o),a=0));o>=8;t[n+d]=255&s,d+=g,s/=256,o-=8);for(a=a<<o|s,f+=o;f>0;t[n+d]=255&a,d+=g,a/=256,f-=8);t[n+d-g]|=128*p}}).call(this,t("e/U+97"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},t("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\..\\node_modules\\ieee754\\index.js","/..\\..\\node_modules\\ieee754")},{buffer:2,"e/U+97":4}],4:[function(t,e,n){(function(t,n,r,o,i,a,s,u,f){function l(){}var t=e.exports={};t.nextTick=function(){var t="undefined"!=typeof window&&window.setImmediate,e="undefined"!=typeof window&&window.postMessage&&window.addEventListener;if(t)return function(t){return window.setImmediate(t)};if(e){var n=[];return window.addEventListener("message",function(t){var e=t.source;if((e===window||null===e)&&"process-tick"===t.data&&(t.stopPropagation(),n.length>0)){var r=n.shift();r()}},!0),function(t){n.push(t),window.postMessage("process-tick","*")}}return function(t){setTimeout(t,0)}}(),t.title="browser",t.browser=!0,t.env={},t.argv=[],t.on=l,t.addListener=l,t.once=l,t.off=l,t.removeListener=l,t.removeAllListeners=l,t.emit=l,t.binding=function(t){throw new Error("process.binding is not supported")},t.cwd=function(){return"/"},t.chdir=function(t){throw new Error("process.chdir is not supported")}}).call(this,t("e/U+97"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},t("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\..\\node_modules\\process\\browser.js","/..\\..\\node_modules\\process")},{buffer:2,"e/U+97":4}],5:[function(t,e,n){(function(t,e,n,r,o,i,a,s,u){"use strict";function f(t){this._name="shape",this._sideLengths=t}function l(t){f.call(this,[t[0],t[1],t[0],t[1]]),this._name="Prostokąt"}function c(t){l.call(this,[t,t]),this._name="Kwadrat"}function h(t){f.call(this,[t,t,t]),this._name="Trójkąt"}f.prototype.getPerimeter=function(){return this._sideLengths.reduce(function(t,e){return t+e})},f.prototype.getArea=function(){return this._sideLengths[0]*this._sideLengths[1]},f.prototype.toString=function(){return"[object "+this._name+"]"},l.prototype=Object.create(f.prototype),l.prototype.constructor=l,c.prototype=Object.create(l.prototype),c.prototype.constructor=c,h.prototype=Object.create(f.prototype),h.prototype.constructor=h,h.prototype.getArea=function(){var t=this._sideLengths[0];return+(t*t*Math.sqrt(3)/4).toFixed(2)};new l([20,20]),new c(20),new h(20)}).call(this,t("e/U+97"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},t("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/fake_dea75ac2.js","/")},{buffer:2,"e/U+97":4}]},{},[5]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,

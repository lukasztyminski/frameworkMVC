/*!
 * frameworkmvc
 * Fiercely quick and opinionated front-ends
 * https://github.com/lukasztyminski/OssomForms
 * @author Łukasz Tymiński
 * @version 1.0.0
 * Copyright 2018. MIT licensed.
 */
!function e(t,n,r){function i(a,u){if(!n[a]){if(!t[a]){var s="function"==typeof require&&require;if(!u&&s)return s(a,!0);if(o)return o(a,!0);throw new Error("Cannot find module '"+a+"'")}var f=n[a]={exports:{}};t[a][0].call(f.exports,function(e){var n=t[a][1][e];return i(n?n:e)},f,f.exports,e,t,n,r)}return n[a].exports}for(var o="function"==typeof require&&require,a=0;a<r.length;a++)i(r[a]);return i}({1:[function(e,t,n){(function(e,t,r,i,o,a,u,s,f){var l="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";!function(e){"use strict";function t(e){var t=e.charCodeAt(0);return t===o||t===c?62:t===a||t===d?63:t<u?-1:t<u+10?t-u+26+26:t<f+26?t-f:t<s+26?t-s+26:void 0}function n(e){function n(e){f[c++]=e}var r,o,a,u,s,f;if(e.length%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var l=e.length;s="="===e.charAt(l-2)?2:"="===e.charAt(l-1)?1:0,f=new i(3*e.length/4-s),a=s>0?e.length-4:e.length;var c=0;for(r=0,o=0;r<a;r+=4,o+=3)u=t(e.charAt(r))<<18|t(e.charAt(r+1))<<12|t(e.charAt(r+2))<<6|t(e.charAt(r+3)),n((16711680&u)>>16),n((65280&u)>>8),n(255&u);return 2===s?(u=t(e.charAt(r))<<2|t(e.charAt(r+1))>>4,n(255&u)):1===s&&(u=t(e.charAt(r))<<10|t(e.charAt(r+1))<<4|t(e.charAt(r+2))>>2,n(u>>8&255),n(255&u)),f}function r(e){function t(e){return l.charAt(e)}function n(e){return t(e>>18&63)+t(e>>12&63)+t(e>>6&63)+t(63&e)}var r,i,o,a=e.length%3,u="";for(r=0,o=e.length-a;r<o;r+=3)i=(e[r]<<16)+(e[r+1]<<8)+e[r+2],u+=n(i);switch(a){case 1:i=e[e.length-1],u+=t(i>>2),u+=t(i<<4&63),u+="==";break;case 2:i=(e[e.length-2]<<8)+e[e.length-1],u+=t(i>>10),u+=t(i>>4&63),u+=t(i<<2&63),u+="="}return u}var i="undefined"!=typeof Uint8Array?Uint8Array:Array,o="+".charCodeAt(0),a="/".charCodeAt(0),u="0".charCodeAt(0),s="a".charCodeAt(0),f="A".charCodeAt(0),c="-".charCodeAt(0),d="_".charCodeAt(0);e.toByteArray=n,e.fromByteArray=r}("undefined"==typeof n?this.base64js={}:n)}).call(this,e("e/U+97"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\..\\node_modules\\base64-js\\lib\\b64.js","/..\\..\\node_modules\\base64-js\\lib")},{buffer:2,"e/U+97":4}],2:[function(e,t,n){(function(t,r,i,o,a,u,s,f,l){function i(e,t,n){if(!(this instanceof i))return new i(e,t,n);var r=typeof e;if("base64"===t&&"string"===r)for(e=D(e);e.length%4!==0;)e+="=";var o;if("number"===r)o=j(e);else if("string"===r)o=i.byteLength(e,t);else{if("object"!==r)throw new Error("First argument needs to be a number, array or string.");o=j(e.length)}var a;i._useTypedArrays?a=i._augment(new Uint8Array(o)):(a=this,a.length=o,a._isBuffer=!0);var u;if(i._useTypedArrays&&"number"==typeof e.byteLength)a._set(e);else if(q(e))for(u=0;u<o;u++)i.isBuffer(e)?a[u]=e.readUInt8(u):a[u]=e[u];else if("string"===r)a.write(e,0,t);else if("number"===r&&!i._useTypedArrays&&!n)for(u=0;u<o;u++)a[u]=0;return a}function c(e,t,n,r){n=Number(n)||0;var o=e.length-n;r?(r=Number(r),r>o&&(r=o)):r=o;var a=t.length;$(a%2===0,"Invalid hex string"),r>a/2&&(r=a/2);for(var u=0;u<r;u++){var s=parseInt(t.substr(2*u,2),16);$(!isNaN(s),"Invalid hex string"),e[n+u]=s}return i._charsWritten=2*u,u}function d(e,t,n,r){var o=i._charsWritten=J(X(t),e,n,r);return o}function h(e,t,n,r){var o=i._charsWritten=J(z(t),e,n,r);return o}function g(e,t,n,r){return h(e,t,n,r)}function p(e,t,n,r){var o=i._charsWritten=J(W(t),e,n,r);return o}function v(e,t,n,r){var o=i._charsWritten=J(P(t),e,n,r);return o}function y(e,t,n){return 0===t&&n===e.length?G.fromByteArray(e):G.fromByteArray(e.slice(t,n))}function w(e,t,n){var r="",i="";n=Math.min(e.length,n);for(var o=t;o<n;o++)e[o]<=127?(r+=Z(i)+String.fromCharCode(e[o]),i=""):i+="%"+e[o].toString(16);return r+Z(i)}function b(e,t,n){var r="";n=Math.min(e.length,n);for(var i=t;i<n;i++)r+=String.fromCharCode(e[i]);return r}function m(e,t,n){return b(e,t,n)}function E(e,t,n){var r=e.length;(!t||t<0)&&(t=0),(!n||n<0||n>r)&&(n=r);for(var i="",o=t;o<n;o++)i+=O(e[o]);return i}function I(e,t,n){for(var r=e.slice(t,n),i="",o=0;o<r.length;o+=2)i+=String.fromCharCode(r[o]+256*r[o+1]);return i}function A(e,t,n,r){r||($("boolean"==typeof n,"missing or invalid endian"),$(void 0!==t&&null!==t,"missing offset"),$(t+1<e.length,"Trying to read beyond buffer length"));var i=e.length;if(!(t>=i)){var o;return n?(o=e[t],t+1<i&&(o|=e[t+1]<<8)):(o=e[t]<<8,t+1<i&&(o|=e[t+1])),o}}function L(e,t,n,r){r||($("boolean"==typeof n,"missing or invalid endian"),$(void 0!==t&&null!==t,"missing offset"),$(t+3<e.length,"Trying to read beyond buffer length"));var i=e.length;if(!(t>=i)){var o;return n?(t+2<i&&(o=e[t+2]<<16),t+1<i&&(o|=e[t+1]<<8),o|=e[t],t+3<i&&(o+=e[t+3]<<24>>>0)):(t+1<i&&(o=e[t+1]<<16),t+2<i&&(o|=e[t+2]<<8),t+3<i&&(o|=e[t+3]),o+=e[t]<<24>>>0),o}}function U(e,t,n,r){r||($("boolean"==typeof n,"missing or invalid endian"),$(void 0!==t&&null!==t,"missing offset"),$(t+1<e.length,"Trying to read beyond buffer length"));var i=e.length;if(!(t>=i)){var o=A(e,t,n,!0),a=32768&o;return a?(65535-o+1)*-1:o}}function B(e,t,n,r){r||($("boolean"==typeof n,"missing or invalid endian"),$(void 0!==t&&null!==t,"missing offset"),$(t+3<e.length,"Trying to read beyond buffer length"));var i=e.length;if(!(t>=i)){var o=L(e,t,n,!0),a=2147483648&o;return a?(4294967295-o+1)*-1:o}}function C(e,t,n,r){return r||($("boolean"==typeof n,"missing or invalid endian"),$(t+3<e.length,"Trying to read beyond buffer length")),Q.read(e,t,n,23,4)}function T(e,t,n,r){return r||($("boolean"==typeof n,"missing or invalid endian"),$(t+7<e.length,"Trying to read beyond buffer length")),Q.read(e,t,n,52,8)}function _(e,t,n,r,i){i||($(void 0!==t&&null!==t,"missing value"),$("boolean"==typeof r,"missing or invalid endian"),$(void 0!==n&&null!==n,"missing offset"),$(n+1<e.length,"trying to write beyond buffer length"),H(t,65535));var o=e.length;if(!(n>=o))for(var a=0,u=Math.min(o-n,2);a<u;a++)e[n+a]=(t&255<<8*(r?a:1-a))>>>8*(r?a:1-a)}function k(e,t,n,r,i){i||($(void 0!==t&&null!==t,"missing value"),$("boolean"==typeof r,"missing or invalid endian"),$(void 0!==n&&null!==n,"missing offset"),$(n+3<e.length,"trying to write beyond buffer length"),H(t,4294967295));var o=e.length;if(!(n>=o))for(var a=0,u=Math.min(o-n,4);a<u;a++)e[n+a]=t>>>8*(r?a:3-a)&255}function S(e,t,n,r,i){i||($(void 0!==t&&null!==t,"missing value"),$("boolean"==typeof r,"missing or invalid endian"),$(void 0!==n&&null!==n,"missing offset"),$(n+1<e.length,"Trying to write beyond buffer length"),K(t,32767,-32768));var o=e.length;n>=o||(t>=0?_(e,t,n,r,i):_(e,65535+t+1,n,r,i))}function N(e,t,n,r,i){i||($(void 0!==t&&null!==t,"missing value"),$("boolean"==typeof r,"missing or invalid endian"),$(void 0!==n&&null!==n,"missing offset"),$(n+3<e.length,"Trying to write beyond buffer length"),K(t,2147483647,-2147483648));var o=e.length;n>=o||(t>=0?k(e,t,n,r,i):k(e,4294967295+t+1,n,r,i))}function M(e,t,n,r,i){i||($(void 0!==t&&null!==t,"missing value"),$("boolean"==typeof r,"missing or invalid endian"),$(void 0!==n&&null!==n,"missing offset"),$(n+3<e.length,"Trying to write beyond buffer length"),Y(t,3.4028234663852886e38,-3.4028234663852886e38));var o=e.length;n>=o||Q.write(e,t,n,r,23,4)}function x(e,t,n,r,i){i||($(void 0!==t&&null!==t,"missing value"),$("boolean"==typeof r,"missing or invalid endian"),$(void 0!==n&&null!==n,"missing offset"),$(n+7<e.length,"Trying to write beyond buffer length"),Y(t,1.7976931348623157e308,-1.7976931348623157e308));var o=e.length;n>=o||Q.write(e,t,n,r,52,8)}function D(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}function F(e,t,n){return"number"!=typeof e?n:(e=~~e,e>=t?t:e>=0?e:(e+=t,e>=0?e:0))}function j(e){return e=~~Math.ceil(+e),e<0?0:e}function R(e){return(Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)})(e)}function q(e){return R(e)||i.isBuffer(e)||e&&"object"==typeof e&&"number"==typeof e.length}function O(e){return e<16?"0"+e.toString(16):e.toString(16)}function X(e){for(var t=[],n=0;n<e.length;n++){var r=e.charCodeAt(n);if(r<=127)t.push(e.charCodeAt(n));else{var i=n;r>=55296&&r<=57343&&n++;for(var o=encodeURIComponent(e.slice(i,n+1)).substr(1).split("%"),a=0;a<o.length;a++)t.push(parseInt(o[a],16))}}return t}function z(e){for(var t=[],n=0;n<e.length;n++)t.push(255&e.charCodeAt(n));return t}function P(e){for(var t,n,r,i=[],o=0;o<e.length;o++)t=e.charCodeAt(o),n=t>>8,r=t%256,i.push(r),i.push(n);return i}function W(e){return G.toByteArray(e)}function J(e,t,n,r){for(var i=0;i<r&&!(i+n>=t.length||i>=e.length);i++)t[i+n]=e[i];return i}function Z(e){try{return decodeURIComponent(e)}catch(t){return String.fromCharCode(65533)}}function H(e,t){$("number"==typeof e,"cannot write a non-number as a number"),$(e>=0,"specified a negative value for writing an unsigned value"),$(e<=t,"value is larger than maximum value for type"),$(Math.floor(e)===e,"value has a fractional component")}function K(e,t,n){$("number"==typeof e,"cannot write a non-number as a number"),$(e<=t,"value larger than maximum allowed value"),$(e>=n,"value smaller than minimum allowed value"),$(Math.floor(e)===e,"value has a fractional component")}function Y(e,t,n){$("number"==typeof e,"cannot write a non-number as a number"),$(e<=t,"value larger than maximum allowed value"),$(e>=n,"value smaller than minimum allowed value")}function $(e,t){if(!e)throw new Error(t||"Failed assertion")}var G=e("base64-js"),Q=e("ieee754");n.Buffer=i,n.SlowBuffer=i,n.INSPECT_MAX_BYTES=50,i.poolSize=8192,i._useTypedArrays=function(){try{var e=new ArrayBuffer(0),t=new Uint8Array(e);return t.foo=function(){return 42},42===t.foo()&&"function"==typeof t.subarray}catch(n){return!1}}(),i.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"raw":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},i.isBuffer=function(e){return!(null===e||void 0===e||!e._isBuffer)},i.byteLength=function(e,t){var n;switch(e+="",t||"utf8"){case"hex":n=e.length/2;break;case"utf8":case"utf-8":n=X(e).length;break;case"ascii":case"binary":case"raw":n=e.length;break;case"base64":n=W(e).length;break;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":n=2*e.length;break;default:throw new Error("Unknown encoding")}return n},i.concat=function(e,t){if($(R(e),"Usage: Buffer.concat(list, [totalLength])\nlist should be an Array."),0===e.length)return new i(0);if(1===e.length)return e[0];var n;if("number"!=typeof t)for(t=0,n=0;n<e.length;n++)t+=e[n].length;var r=new i(t),o=0;for(n=0;n<e.length;n++){var a=e[n];a.copy(r,o),o+=a.length}return r},i.prototype.write=function(e,t,n,r){if(isFinite(t))isFinite(n)||(r=n,n=void 0);else{var i=r;r=t,t=n,n=i}t=Number(t)||0;var o=this.length-t;n?(n=Number(n),n>o&&(n=o)):n=o,r=String(r||"utf8").toLowerCase();var a;switch(r){case"hex":a=c(this,e,t,n);break;case"utf8":case"utf-8":a=d(this,e,t,n);break;case"ascii":a=h(this,e,t,n);break;case"binary":a=g(this,e,t,n);break;case"base64":a=p(this,e,t,n);break;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":a=v(this,e,t,n);break;default:throw new Error("Unknown encoding")}return a},i.prototype.toString=function(e,t,n){var r=this;if(e=String(e||"utf8").toLowerCase(),t=Number(t)||0,n=void 0!==n?Number(n):n=r.length,n===t)return"";var i;switch(e){case"hex":i=E(r,t,n);break;case"utf8":case"utf-8":i=w(r,t,n);break;case"ascii":i=b(r,t,n);break;case"binary":i=m(r,t,n);break;case"base64":i=y(r,t,n);break;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":i=I(r,t,n);break;default:throw new Error("Unknown encoding")}return i},i.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}},i.prototype.copy=function(e,t,n,r){var o=this;if(n||(n=0),r||0===r||(r=this.length),t||(t=0),r!==n&&0!==e.length&&0!==o.length){$(r>=n,"sourceEnd < sourceStart"),$(t>=0&&t<e.length,"targetStart out of bounds"),$(n>=0&&n<o.length,"sourceStart out of bounds"),$(r>=0&&r<=o.length,"sourceEnd out of bounds"),r>this.length&&(r=this.length),e.length-t<r-n&&(r=e.length-t+n);var a=r-n;if(a<100||!i._useTypedArrays)for(var u=0;u<a;u++)e[u+t]=this[u+n];else e._set(this.subarray(n,n+a),t)}},i.prototype.slice=function(e,t){var n=this.length;if(e=F(e,n,0),t=F(t,n,n),i._useTypedArrays)return i._augment(this.subarray(e,t));for(var r=t-e,o=new i(r,(void 0),(!0)),a=0;a<r;a++)o[a]=this[a+e];return o},i.prototype.get=function(e){return console.log(".get() is deprecated. Access using array indexes instead."),this.readUInt8(e)},i.prototype.set=function(e,t){return console.log(".set() is deprecated. Access using array indexes instead."),this.writeUInt8(e,t)},i.prototype.readUInt8=function(e,t){if(t||($(void 0!==e&&null!==e,"missing offset"),$(e<this.length,"Trying to read beyond buffer length")),!(e>=this.length))return this[e]},i.prototype.readUInt16LE=function(e,t){return A(this,e,!0,t)},i.prototype.readUInt16BE=function(e,t){return A(this,e,!1,t)},i.prototype.readUInt32LE=function(e,t){return L(this,e,!0,t)},i.prototype.readUInt32BE=function(e,t){return L(this,e,!1,t)},i.prototype.readInt8=function(e,t){if(t||($(void 0!==e&&null!==e,"missing offset"),$(e<this.length,"Trying to read beyond buffer length")),!(e>=this.length)){var n=128&this[e];return n?(255-this[e]+1)*-1:this[e]}},i.prototype.readInt16LE=function(e,t){return U(this,e,!0,t)},i.prototype.readInt16BE=function(e,t){return U(this,e,!1,t)},i.prototype.readInt32LE=function(e,t){return B(this,e,!0,t)},i.prototype.readInt32BE=function(e,t){return B(this,e,!1,t)},i.prototype.readFloatLE=function(e,t){return C(this,e,!0,t)},i.prototype.readFloatBE=function(e,t){return C(this,e,!1,t)},i.prototype.readDoubleLE=function(e,t){return T(this,e,!0,t)},i.prototype.readDoubleBE=function(e,t){return T(this,e,!1,t)},i.prototype.writeUInt8=function(e,t,n){n||($(void 0!==e&&null!==e,"missing value"),$(void 0!==t&&null!==t,"missing offset"),$(t<this.length,"trying to write beyond buffer length"),H(e,255)),t>=this.length||(this[t]=e)},i.prototype.writeUInt16LE=function(e,t,n){_(this,e,t,!0,n)},i.prototype.writeUInt16BE=function(e,t,n){_(this,e,t,!1,n)},i.prototype.writeUInt32LE=function(e,t,n){k(this,e,t,!0,n)},i.prototype.writeUInt32BE=function(e,t,n){k(this,e,t,!1,n)},i.prototype.writeInt8=function(e,t,n){n||($(void 0!==e&&null!==e,"missing value"),$(void 0!==t&&null!==t,"missing offset"),$(t<this.length,"Trying to write beyond buffer length"),K(e,127,-128)),t>=this.length||(e>=0?this.writeUInt8(e,t,n):this.writeUInt8(255+e+1,t,n))},i.prototype.writeInt16LE=function(e,t,n){S(this,e,t,!0,n)},i.prototype.writeInt16BE=function(e,t,n){S(this,e,t,!1,n)},i.prototype.writeInt32LE=function(e,t,n){N(this,e,t,!0,n)},i.prototype.writeInt32BE=function(e,t,n){N(this,e,t,!1,n)},i.prototype.writeFloatLE=function(e,t,n){M(this,e,t,!0,n)},i.prototype.writeFloatBE=function(e,t,n){M(this,e,t,!1,n)},i.prototype.writeDoubleLE=function(e,t,n){x(this,e,t,!0,n)},i.prototype.writeDoubleBE=function(e,t,n){x(this,e,t,!1,n)},i.prototype.fill=function(e,t,n){if(e||(e=0),t||(t=0),n||(n=this.length),"string"==typeof e&&(e=e.charCodeAt(0)),$("number"==typeof e&&!isNaN(e),"value is not a number"),$(n>=t,"end < start"),n!==t&&0!==this.length){$(t>=0&&t<this.length,"start out of bounds"),$(n>=0&&n<=this.length,"end out of bounds");for(var r=t;r<n;r++)this[r]=e}},i.prototype.inspect=function(){for(var e=[],t=this.length,r=0;r<t;r++)if(e[r]=O(this[r]),r===n.INSPECT_MAX_BYTES){e[r+1]="...";break}return"<Buffer "+e.join(" ")+">"},i.prototype.toArrayBuffer=function(){if("undefined"!=typeof Uint8Array){if(i._useTypedArrays)return new i(this).buffer;for(var e=new Uint8Array(this.length),t=0,n=e.length;t<n;t+=1)e[t]=this[t];return e.buffer}throw new Error("Buffer.toArrayBuffer not supported in this browser")};var V=i.prototype;i._augment=function(e){return e._isBuffer=!0,e._get=e.get,e._set=e.set,e.get=V.get,e.set=V.set,e.write=V.write,e.toString=V.toString,e.toLocaleString=V.toString,e.toJSON=V.toJSON,e.copy=V.copy,e.slice=V.slice,e.readUInt8=V.readUInt8,e.readUInt16LE=V.readUInt16LE,e.readUInt16BE=V.readUInt16BE,e.readUInt32LE=V.readUInt32LE,e.readUInt32BE=V.readUInt32BE,e.readInt8=V.readInt8,e.readInt16LE=V.readInt16LE,e.readInt16BE=V.readInt16BE,e.readInt32LE=V.readInt32LE,e.readInt32BE=V.readInt32BE,e.readFloatLE=V.readFloatLE,e.readFloatBE=V.readFloatBE,e.readDoubleLE=V.readDoubleLE,e.readDoubleBE=V.readDoubleBE,e.writeUInt8=V.writeUInt8,e.writeUInt16LE=V.writeUInt16LE,e.writeUInt16BE=V.writeUInt16BE,e.writeUInt32LE=V.writeUInt32LE,e.writeUInt32BE=V.writeUInt32BE,e.writeInt8=V.writeInt8,e.writeInt16LE=V.writeInt16LE,e.writeInt16BE=V.writeInt16BE,e.writeInt32LE=V.writeInt32LE,e.writeInt32BE=V.writeInt32BE,e.writeFloatLE=V.writeFloatLE,e.writeFloatBE=V.writeFloatBE,e.writeDoubleLE=V.writeDoubleLE,e.writeDoubleBE=V.writeDoubleBE,e.fill=V.fill,e.inspect=V.inspect,e.toArrayBuffer=V.toArrayBuffer,e}}).call(this,e("e/U+97"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\..\\node_modules\\buffer\\index.js","/..\\..\\node_modules\\buffer")},{"base64-js":1,buffer:2,"e/U+97":4,ieee754:3}],3:[function(e,t,n){(function(e,t,r,i,o,a,u,s,f){n.read=function(e,t,n,r,i){var o,a,u=8*i-r-1,s=(1<<u)-1,f=s>>1,l=-7,c=n?i-1:0,d=n?-1:1,h=e[t+c];for(c+=d,o=h&(1<<-l)-1,h>>=-l,l+=u;l>0;o=256*o+e[t+c],c+=d,l-=8);for(a=o&(1<<-l)-1,o>>=-l,l+=r;l>0;a=256*a+e[t+c],c+=d,l-=8);if(0===o)o=1-f;else{if(o===s)return a?NaN:(h?-1:1)*(1/0);a+=Math.pow(2,r),o-=f}return(h?-1:1)*a*Math.pow(2,o-r)},n.write=function(e,t,n,r,i,o){var a,u,s,f=8*o-i-1,l=(1<<f)-1,c=l>>1,d=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,h=r?0:o-1,g=r?1:-1,p=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(u=isNaN(t)?1:0,a=l):(a=Math.floor(Math.log(t)/Math.LN2),t*(s=Math.pow(2,-a))<1&&(a--,s*=2),t+=a+c>=1?d/s:d*Math.pow(2,1-c),t*s>=2&&(a++,s/=2),a+c>=l?(u=0,a=l):a+c>=1?(u=(t*s-1)*Math.pow(2,i),a+=c):(u=t*Math.pow(2,c-1)*Math.pow(2,i),a=0));i>=8;e[n+h]=255&u,h+=g,u/=256,i-=8);for(a=a<<i|u,f+=i;f>0;e[n+h]=255&a,h+=g,a/=256,f-=8);e[n+h-g]|=128*p}}).call(this,e("e/U+97"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\..\\node_modules\\ieee754\\index.js","/..\\..\\node_modules\\ieee754")},{buffer:2,"e/U+97":4}],4:[function(e,t,n){(function(e,n,r,i,o,a,u,s,f){function l(){}var e=t.exports={};e.nextTick=function(){var e="undefined"!=typeof window&&window.setImmediate,t="undefined"!=typeof window&&window.postMessage&&window.addEventListener;if(e)return function(e){return window.setImmediate(e)};if(t){var n=[];return window.addEventListener("message",function(e){var t=e.source;if((t===window||null===t)&&"process-tick"===e.data&&(e.stopPropagation(),n.length>0)){var r=n.shift();r()}},!0),function(e){n.push(e),window.postMessage("process-tick","*")}}return function(e){setTimeout(e,0)}}(),e.title="browser",e.browser=!0,e.env={},e.argv=[],e.on=l,e.addListener=l,e.once=l,e.off=l,e.removeListener=l,e.removeAllListeners=l,e.emit=l,e.binding=function(e){throw new Error("process.binding is not supported")},e.cwd=function(){return"/"},e.chdir=function(e){throw new Error("process.chdir is not supported")}}).call(this,e("e/U+97"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/..\\..\\node_modules\\process\\browser.js","/..\\..\\node_modules\\process")},{buffer:2,"e/U+97":4}],5:[function(e,t,n){(function(e,t,n,r,i,o,a,u,s){"use strict";(function(){var e={},t=function(t,n){n?t.parentNode.classList.remove(e.classError):t.parentNode.classList.add(e.classError)},n=function(e){var n=!0,r=e.getAttribute("pattern");if(null!=r){var i=new RegExp(r,"gi");i.test(e.value)||(n=!1)}else""==e.value&&(n=!1);return n?(t(e,!0),!0):(t(e,!1),!1)},r=function(e){var n=new RegExp("^[0-9a-zA-Z_.-]+@[0-9a-zA-Z.-]+.[a-zA-Z]{2,3}$","gi");return n.test(e.value)?(t(e,!0),!0):(t(e,!1),!1)},i=function(e){var n=new RegExp("^http://.+","i");return n.test(e.value)?(t(e,!0),!0):(t(e,!1),!1)},o=function(e){return""==e.options[e.selectedIndex].value||"-1"==e.options[e.selectedIndex].value?(t(e,!1),!1):(t(e,!0),!0)},a=function(e){var n=e.getAttribute("name"),r=e.form.querySelectorAll(':scope input[name="'+n+'"]:checked');return r.length?(t(e,!0),!0):(t(e,!1),!1)},u=function(e){return""==!e.value?(t(e,!0),!0):(t(e,!1),!1)},s=function(){var t=e.form.querySelectorAll(":scope [required]");[].forEach.call(t,function(e){if("INPUT"==e.nodeName.toUpperCase()){var t=e.type.toUpperCase();"TEXT"==t&&(e.addEventListener("keyup",function(){n(e)}),e.addEventListener("blur",function(){n(e)})),"DATE"==t&&(e.addEventListener("keyup",function(){n(e)}),e.addEventListener("blur",function(){n(e)}),e.addEventListener("click",function(){u(e)})),"EMAIL"==t&&(e.addEventListener("keyup",function(){r(e)}),e.addEventListener("blur",function(){r(e)})),"URL"==t&&(e.addEventListener("keyup",function(){i(e)}),e.addEventListener("blur",function(){i(e)})),"CHECKBOX"==t&&e.addEventListener("click",function(){a(e)}),"RADIO"==t&&e.addEventListener("click",function(){a(e)})}"TEXTAREA"==e.nodeName.toUpperCase()&&(e.addEventListener("keyup",function(){n(e)}),e.addEventListener("blur",function(){n(e)})),"SELECT"==e.nodeName.toUpperCase()&&e.addEventListener("change",function(){o(e)})})},f=function(){e.form.addEventListener("submit",function(t){t.preventDefault();var s=!0,f=e.form.querySelectorAll(":scope [required]"),l=!0,c=!1,d=void 0;try{for(var h,g=f[Symbol.iterator]();!(l=(h=g.next()).done);l=!0){var p=h.value;if("INPUT"==p.nodeName.toUpperCase()){var v=p.type.toUpperCase();"EMAIL"==v&&(r(p)||(s=!1)),"URL"==v&&(i(p)||(s=!1)),"TEXT"==v&&(n(p)||(s=!1)),"CHECKBOX"==v&&(a(p)||(s=!1)),"RADIO"==v&&(a(p)||(s=!1)),"DATE"==v&&(u(p)||(s=!1))}"TEXTAREA"==p.nodeName.toUpperCase()&&(n(p)||(s=!1)),"SELECT"==p.nodeName.toUpperCase()&&(o(p)||(s=!1))}}catch(y){c=!0,d=y}finally{try{!l&&g["return"]&&g["return"]()}finally{if(c)throw d}}})},l=function(t){return e={form:t.form||null,classError:t.classError||"error"},null===e.form||void 0===e.form||0==e.form.length?(console.warn("validateForm: Źle przekazany formularz"),!1):(e.form.setAttribute("novalidate","novalidate"),s(),void f())};return{init:l}})()}).call(this,e("e/U+97"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/fake_aa21a5c5.js","/")},{buffer:2,"e/U+97":4}]},{},[5]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZhbGlkYXRlLmpzIl0sIm5hbWVzIjpbImUiLCJ0IiwibiIsInIiLCJzIiwibyIsInUiLCJhIiwicmVxdWlyZSIsImkiLCJFcnJvciIsImYiLCJleHBvcnRzIiwiY2FsbCIsImxlbmd0aCIsIjEiLCJtb2R1bGUiLCJwcm9jZXNzIiwiZ2xvYmFsIiwiQnVmZmVyIiwiX19hcmd1bWVudDAiLCJfX2FyZ3VtZW50MSIsIl9fYXJndW1lbnQyIiwiX19hcmd1bWVudDMiLCJfX2ZpbGVuYW1lIiwiX19kaXJuYW1lIiwibG9va3VwIiwiZGVjb2RlIiwiZWx0IiwiY29kZSIsImNoYXJDb2RlQXQiLCJQTFVTIiwiUExVU19VUkxfU0FGRSIsIlNMQVNIIiwiU0xBU0hfVVJMX1NBRkUiLCJOVU1CRVIiLCJVUFBFUiIsIkxPV0VSIiwiYjY0VG9CeXRlQXJyYXkiLCJiNjQiLCJwdXNoIiwidiIsImFyciIsIkwiLCJqIiwibCIsInRtcCIsInBsYWNlSG9sZGVycyIsImxlbiIsImNoYXJBdCIsIkFyciIsInVpbnQ4VG9CYXNlNjQiLCJ1aW50OCIsImVuY29kZSIsIm51bSIsInRyaXBsZXRUb0Jhc2U2NCIsInRlbXAiLCJleHRyYUJ5dGVzIiwib3V0cHV0IiwiVWludDhBcnJheSIsIkFycmF5IiwidG9CeXRlQXJyYXkiLCJmcm9tQnl0ZUFycmF5IiwidGhpcyIsImJhc2U2NGpzIiwic2VsZiIsIndpbmRvdyIsImFyZ3VtZW50cyIsImJ1ZmZlciIsImUvVSs5NyIsIjIiLCJzdWJqZWN0IiwiZW5jb2RpbmciLCJub1plcm8iLCJ0eXBlIiwic3RyaW5ndHJpbSIsImNvZXJjZSIsImJ5dGVMZW5ndGgiLCJidWYiLCJfdXNlVHlwZWRBcnJheXMiLCJfYXVnbWVudCIsIl9pc0J1ZmZlciIsIl9zZXQiLCJpc0FycmF5aXNoIiwiaXNCdWZmZXIiLCJyZWFkVUludDgiLCJ3cml0ZSIsIl9oZXhXcml0ZSIsInN0cmluZyIsIm9mZnNldCIsIk51bWJlciIsInJlbWFpbmluZyIsInN0ckxlbiIsImFzc2VydCIsImJ5dGUiLCJwYXJzZUludCIsInN1YnN0ciIsImlzTmFOIiwiX2NoYXJzV3JpdHRlbiIsIl91dGY4V3JpdGUiLCJjaGFyc1dyaXR0ZW4iLCJibGl0QnVmZmVyIiwidXRmOFRvQnl0ZXMiLCJfYXNjaWlXcml0ZSIsImFzY2lpVG9CeXRlcyIsIl9iaW5hcnlXcml0ZSIsIl9iYXNlNjRXcml0ZSIsImJhc2U2NFRvQnl0ZXMiLCJfdXRmMTZsZVdyaXRlIiwidXRmMTZsZVRvQnl0ZXMiLCJfYmFzZTY0U2xpY2UiLCJzdGFydCIsImVuZCIsImJhc2U2NCIsInNsaWNlIiwiX3V0ZjhTbGljZSIsInJlcyIsIk1hdGgiLCJtaW4iLCJkZWNvZGVVdGY4Q2hhciIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsInRvU3RyaW5nIiwiX2FzY2lpU2xpY2UiLCJyZXQiLCJfYmluYXJ5U2xpY2UiLCJfaGV4U2xpY2UiLCJvdXQiLCJ0b0hleCIsIl91dGYxNmxlU2xpY2UiLCJieXRlcyIsIl9yZWFkVUludDE2IiwibGl0dGxlRW5kaWFuIiwibm9Bc3NlcnQiLCJ1bmRlZmluZWQiLCJ2YWwiLCJfcmVhZFVJbnQzMiIsIl9yZWFkSW50MTYiLCJuZWciLCJfcmVhZEludDMyIiwiX3JlYWRGbG9hdCIsImllZWU3NTQiLCJyZWFkIiwiX3JlYWREb3VibGUiLCJfd3JpdGVVSW50MTYiLCJ2YWx1ZSIsInZlcmlmdWludCIsIl93cml0ZVVJbnQzMiIsIl93cml0ZUludDE2IiwidmVyaWZzaW50IiwiX3dyaXRlSW50MzIiLCJfd3JpdGVGbG9hdCIsInZlcmlmSUVFRTc1NCIsIl93cml0ZURvdWJsZSIsInN0ciIsInRyaW0iLCJyZXBsYWNlIiwiY2xhbXAiLCJpbmRleCIsImRlZmF1bHRWYWx1ZSIsImNlaWwiLCJpc0FycmF5IiwiT2JqZWN0IiwicHJvdG90eXBlIiwiYnl0ZUFycmF5IiwiYiIsImgiLCJlbmNvZGVVUklDb21wb25lbnQiLCJzcGxpdCIsImMiLCJoaSIsImxvIiwic3JjIiwiZHN0IiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiZXJyIiwibWF4IiwiZmxvb3IiLCJ0ZXN0IiwibWVzc2FnZSIsIlNsb3dCdWZmZXIiLCJJTlNQRUNUX01BWF9CWVRFUyIsInBvb2xTaXplIiwiQXJyYXlCdWZmZXIiLCJmb28iLCJzdWJhcnJheSIsImlzRW5jb2RpbmciLCJ0b0xvd2VyQ2FzZSIsImNvbmNhdCIsImxpc3QiLCJ0b3RhbExlbmd0aCIsInBvcyIsIml0ZW0iLCJjb3B5IiwiaXNGaW5pdGUiLCJzd2FwIiwidG9KU09OIiwiZGF0YSIsIl9hcnIiLCJ0YXJnZXQiLCJ0YXJnZXRfc3RhcnQiLCJzb3VyY2UiLCJzbGljZUxlbiIsIm5ld0J1ZiIsImdldCIsImNvbnNvbGUiLCJsb2ciLCJzZXQiLCJ3cml0ZVVJbnQ4IiwicmVhZFVJbnQxNkxFIiwicmVhZFVJbnQxNkJFIiwicmVhZFVJbnQzMkxFIiwicmVhZFVJbnQzMkJFIiwicmVhZEludDgiLCJyZWFkSW50MTZMRSIsInJlYWRJbnQxNkJFIiwicmVhZEludDMyTEUiLCJyZWFkSW50MzJCRSIsInJlYWRGbG9hdExFIiwicmVhZEZsb2F0QkUiLCJyZWFkRG91YmxlTEUiLCJyZWFkRG91YmxlQkUiLCJ3cml0ZVVJbnQxNkxFIiwid3JpdGVVSW50MTZCRSIsIndyaXRlVUludDMyTEUiLCJ3cml0ZVVJbnQzMkJFIiwid3JpdGVJbnQ4Iiwid3JpdGVJbnQxNkxFIiwid3JpdGVJbnQxNkJFIiwid3JpdGVJbnQzMkxFIiwid3JpdGVJbnQzMkJFIiwid3JpdGVGbG9hdExFIiwid3JpdGVGbG9hdEJFIiwid3JpdGVEb3VibGVMRSIsIndyaXRlRG91YmxlQkUiLCJmaWxsIiwiaW5zcGVjdCIsImpvaW4iLCJ0b0FycmF5QnVmZmVyIiwiQlAiLCJfZ2V0IiwidG9Mb2NhbGVTdHJpbmciLCJiYXNlNjQtanMiLCIzIiwiaXNMRSIsIm1MZW4iLCJuQnl0ZXMiLCJtIiwiZUxlbiIsImVNYXgiLCJlQmlhcyIsIm5CaXRzIiwiZCIsIk5hTiIsIkluZmluaXR5IiwicG93IiwicnQiLCJhYnMiLCJMTjIiLCI0Iiwibm9vcCIsIm5leHRUaWNrIiwiY2FuU2V0SW1tZWRpYXRlIiwic2V0SW1tZWRpYXRlIiwiY2FuUG9zdCIsInBvc3RNZXNzYWdlIiwiYWRkRXZlbnRMaXN0ZW5lciIsInF1ZXVlIiwiZXYiLCJzdG9wUHJvcGFnYXRpb24iLCJmbiIsInNoaWZ0Iiwic2V0VGltZW91dCIsInRpdGxlIiwiYnJvd3NlciIsImVudiIsImFyZ3YiLCJvbiIsImFkZExpc3RlbmVyIiwib25jZSIsIm9mZiIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiZW1pdCIsImJpbmRpbmciLCJuYW1lIiwiY3dkIiwiY2hkaXIiLCJkaXIiLCI1Iiwib3B0aW9ucyIsInNob3dGaWVsZFZhbGlkYXRpb24iLCJpbnB1dCIsImlucHV0SXNWYWxpZCIsInBhcmVudE5vZGUiLCJjbGFzc0xpc3QiLCJyZW1vdmUiLCJjbGFzc0Vycm9yIiwiYWRkIiwidGVzdElucHV0VGV4dCIsInBhdHRlcm4iLCJnZXRBdHRyaWJ1dGUiLCJyZWciLCJSZWdFeHAiLCJ0ZXN0SW5wdXRFbWFpbCIsIm1haWxSZWciLCJ0ZXN0SW5wdXRVUkwiLCJ1cmxSZWciLCJ0ZXN0SW5wdXRTZWxlY3QiLCJzZWxlY3QiLCJzZWxlY3RlZEluZGV4IiwidGVzdElucHV0Q2hlY2tib3giLCJncm91cCIsImZvcm0iLCJxdWVyeVNlbGVjdG9yQWxsIiwidGVzdElucHV0RGF0ZSIsInByZXBhcmVFbGVtZW50cyIsImVsZW1lbnRzIiwiZm9yRWFjaCIsImVsZW1lbnQiLCJub2RlTmFtZSIsInRvVXBwZXJDYXNlIiwiZm9ybVN1Ym1pdCIsInByZXZlbnREZWZhdWx0IiwidmFsaWRhdGVkIiwiX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiIsIl9kaWRJdGVyYXRvckVycm9yIiwiX2l0ZXJhdG9yRXJyb3IiLCJfc3RlcCIsIl9pdGVyYXRvciIsIlN5bWJvbCIsIml0ZXJhdG9yIiwibmV4dCIsImRvbmUiLCJpbml0IiwiX29wdGlvbnMiLCJ3YXJuIiwic2V0QXR0cmlidXRlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztDQUFBLFFBQUFBLEdBQUFDLEVBQUFDLEVBQUFDLEdBQUEsUUFBQUMsR0FBQUMsRUFBQUMsR0FBQSxJQUFBSixFQUFBRyxHQUFBLENBQUEsSUFBQUosRUFBQUksR0FBQSxDQUFBLEdBQUFFLEdBQUEsa0JBQUFDLFVBQUFBLE9BQUEsS0FBQUYsR0FBQUMsRUFBQSxNQUFBQSxHQUFBRixHQUFBLEVBQUEsSUFBQUksRUFBQSxNQUFBQSxHQUFBSixHQUFBLEVBQUEsTUFBQSxJQUFBSyxPQUFBLHVCQUFBTCxFQUFBLEtBQUEsR0FBQU0sR0FBQVQsRUFBQUcsSUFBQU8sV0FBQVgsR0FBQUksR0FBQSxHQUFBUSxLQUFBRixFQUFBQyxRQUFBLFNBQUFaLEdBQUEsR0FBQUUsR0FBQUQsRUFBQUksR0FBQSxHQUFBTCxFQUFBLE9BQUFJLEdBQUFGLEVBQUFBLEVBQUFGLElBQUFXLEVBQUFBLEVBQUFDLFFBQUFaLEVBQUFDLEVBQUFDLEVBQUFDLEdBQUEsTUFBQUQsR0FBQUcsR0FBQU8sUUFBQSxJQUFBLEdBQUFILEdBQUEsa0JBQUFELFVBQUFBLFFBQUFILEVBQUEsRUFBQUEsRUFBQUYsRUFBQVcsT0FBQVQsSUFBQUQsRUFBQUQsRUFBQUUsR0FBQSxPQUFBRCxLQUFBVyxHQUFBLFNBQUFQLEVBQUFRLEVBQUFKLElBQ0EsU0FBQUssRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsR0FDQSxHQUFBQyxHQUFBLG9FQUVBLFNBQUFkLEdBQ0EsWUFjQSxTQUFBZSxHQUFBQyxHQUNBLEdBQUFDLEdBQUFELEVBQUFFLFdBQUEsRUFDQSxPQUFBRCxLQUFBRSxHQUNBRixJQUFBRyxFQUNBLEdBQ0FILElBQUFJLEdBQ0FKLElBQUFLLEVBQ0EsR0FDQUwsRUFBQU0sS0FFQU4sRUFBQU0sRUFBQSxHQUNBTixFQUFBTSxFQUFBLEdBQUEsR0FDQU4sRUFBQU8sRUFBQSxHQUNBUCxFQUFBTyxFQUNBUCxFQUFBUSxFQUFBLEdBQ0FSLEVBQUFRLEVBQUEsR0FEQSxPQUlBLFFBQUFDLEdBQUFDLEdBdUJBLFFBQUFDLEdBQUFDLEdBQ0FDLEVBQUFDLEtBQUFGLEVBdkJBLEdBQUFoQyxHQUFBbUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUwsQ0FFQSxJQUFBSCxFQUFBekIsT0FBQSxFQUFBLEVBQ0EsS0FBQSxJQUFBSixPQUFBLGlEQVFBLElBQUFzQyxHQUFBVCxFQUFBekIsTUFDQWlDLEdBQUEsTUFBQVIsRUFBQVUsT0FBQUQsRUFBQSxHQUFBLEVBQUEsTUFBQVQsRUFBQVUsT0FBQUQsRUFBQSxHQUFBLEVBQUEsRUFHQU4sRUFBQSxHQUFBUSxHQUFBLEVBQUFYLEVBQUF6QixPQUFBLEVBQUFpQyxHQUdBRixFQUFBRSxFQUFBLEVBQUFSLEVBQUF6QixPQUFBLEVBQUF5QixFQUFBekIsTUFFQSxJQUFBNkIsR0FBQSxDQU1BLEtBQUFsQyxFQUFBLEVBQUFtQyxFQUFBLEVBQUFuQyxFQUFBb0MsRUFBQXBDLEdBQUEsRUFBQW1DLEdBQUEsRUFDQUUsRUFBQW5CLEVBQUFZLEVBQUFVLE9BQUF4QyxLQUFBLEdBQUFrQixFQUFBWSxFQUFBVSxPQUFBeEMsRUFBQSxLQUFBLEdBQUFrQixFQUFBWSxFQUFBVSxPQUFBeEMsRUFBQSxLQUFBLEVBQUFrQixFQUFBWSxFQUFBVSxPQUFBeEMsRUFBQSxJQUNBK0IsR0FBQSxTQUFBTSxJQUFBLElBQ0FOLEdBQUEsTUFBQU0sSUFBQSxHQUNBTixFQUFBLElBQUFNLEVBWUEsT0FUQSxLQUFBQyxHQUNBRCxFQUFBbkIsRUFBQVksRUFBQVUsT0FBQXhDLEtBQUEsRUFBQWtCLEVBQUFZLEVBQUFVLE9BQUF4QyxFQUFBLEtBQUEsRUFDQStCLEVBQUEsSUFBQU0sSUFDQSxJQUFBQyxJQUNBRCxFQUFBbkIsRUFBQVksRUFBQVUsT0FBQXhDLEtBQUEsR0FBQWtCLEVBQUFZLEVBQUFVLE9BQUF4QyxFQUFBLEtBQUEsRUFBQWtCLEVBQUFZLEVBQUFVLE9BQUF4QyxFQUFBLEtBQUEsRUFDQStCLEVBQUFNLEdBQUEsRUFBQSxLQUNBTixFQUFBLElBQUFNLElBR0FKLEVBR0EsUUFBQVMsR0FBQUMsR0FNQSxRQUFBQyxHQUFBQyxHQUNBLE1BQUE1QixHQUFBdUIsT0FBQUssR0FHQSxRQUFBQyxHQUFBRCxHQUNBLE1BQUFELEdBQUFDLEdBQUEsR0FBQSxJQUFBRCxFQUFBQyxHQUFBLEdBQUEsSUFBQUQsRUFBQUMsR0FBQSxFQUFBLElBQUFELEVBQUEsR0FBQUMsR0FWQSxHQUFBN0MsR0FHQStDLEVBQUExQyxFQUZBMkMsRUFBQUwsRUFBQXRDLE9BQUEsRUFDQTRDLEVBQUEsRUFZQSxLQUFBakQsRUFBQSxFQUFBSyxFQUFBc0MsRUFBQXRDLE9BQUEyQyxFQUFBaEQsRUFBQUssRUFBQUwsR0FBQSxFQUNBK0MsR0FBQUosRUFBQTNDLElBQUEsS0FBQTJDLEVBQUEzQyxFQUFBLElBQUEsR0FBQTJDLEVBQUEzQyxFQUFBLEdBQ0FpRCxHQUFBSCxFQUFBQyxFQUlBLFFBQUFDLEdBQ0EsSUFBQSxHQUNBRCxFQUFBSixFQUFBQSxFQUFBdEMsT0FBQSxHQUNBNEMsR0FBQUwsRUFBQUcsR0FBQSxHQUNBRSxHQUFBTCxFQUFBRyxHQUFBLEVBQUEsSUFDQUUsR0FBQSxJQUNBLE1BQ0EsS0FBQSxHQUNBRixHQUFBSixFQUFBQSxFQUFBdEMsT0FBQSxJQUFBLEdBQUFzQyxFQUFBQSxFQUFBdEMsT0FBQSxHQUNBNEMsR0FBQUwsRUFBQUcsR0FBQSxJQUNBRSxHQUFBTCxFQUFBRyxHQUFBLEVBQUEsSUFDQUUsR0FBQUwsRUFBQUcsR0FBQSxFQUFBLElBQ0FFLEdBQUEsSUFJQSxNQUFBQSxHQWpIQSxHQUFBUixHQUFBLG1CQUFBUyxZQUNBQSxXQUNBQyxNQUVBN0IsRUFBQSxJQUFBRCxXQUFBLEdBQ0FHLEVBQUEsSUFBQUgsV0FBQSxHQUNBSyxFQUFBLElBQUFMLFdBQUEsR0FDQU8sRUFBQSxJQUFBUCxXQUFBLEdBQ0FNLEVBQUEsSUFBQU4sV0FBQSxHQUNBRSxFQUFBLElBQUFGLFdBQUEsR0FDQUksRUFBQSxJQUFBSixXQUFBLEVBMEdBbEIsR0FBQWlELFlBQUF2QixFQUNBMUIsRUFBQWtELGNBQUFYLEdBQ0EsbUJBQUF2QyxHQUFBbUQsS0FBQUMsWUFBQXBELEtBRUFDLEtBQUFrRCxLQUFBdkQsRUFBQSxVQUFBLG1CQUFBeUQsTUFBQUEsS0FBQSxtQkFBQUMsUUFBQUEsVUFBQTFELEVBQUEsVUFBQVcsT0FBQWdELFVBQUEsR0FBQUEsVUFBQSxHQUFBQSxVQUFBLEdBQUFBLFVBQUEsR0FBQSxnREFBQSwyQ0FDQUMsT0FBQSxFQUFBQyxTQUFBLElBQUFDLEdBQUEsU0FBQTlELEVBQUFRLEVBQUFKLElBQ0EsU0FBQUssRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsR0FrREEsUUFBQU4sR0FBQW9ELEVBQUFDLEVBQUFDLEdBQ0EsS0FBQVYsZUFBQTVDLElBQ0EsTUFBQSxJQUFBQSxHQUFBb0QsRUFBQUMsRUFBQUMsRUFFQSxJQUFBQyxTQUFBSCxFQUlBLElBQUEsV0FBQUMsR0FBQSxXQUFBRSxFQUVBLElBREFILEVBQUFJLEVBQUFKLEdBQ0FBLEVBQUF6RCxPQUFBLElBQUEsR0FDQXlELEdBQUEsR0FLQSxJQUFBekQsRUFDQSxJQUFBLFdBQUE0RCxFQUNBNUQsRUFBQThELEVBQUFMLE9BQ0EsSUFBQSxXQUFBRyxFQUNBNUQsRUFBQUssRUFBQTBELFdBQUFOLEVBQUFDLE9BQ0EsQ0FBQSxHQUFBLFdBQUFFLEVBR0EsS0FBQSxJQUFBaEUsT0FBQSx3REFGQUksR0FBQThELEVBQUFMLEVBQUF6RCxRQUlBLEdBQUFnRSxFQUNBM0QsR0FBQTRELGdCQUVBRCxFQUFBM0QsRUFBQTZELFNBQUEsR0FBQXJCLFlBQUE3QyxLQUdBZ0UsRUFBQWYsS0FDQWUsRUFBQWhFLE9BQUFBLEVBQ0FnRSxFQUFBRyxXQUFBLEVBR0EsSUFBQXhFLEVBQ0EsSUFBQVUsRUFBQTRELGlCQUFBLGdCQUFBUixHQUFBTSxXQUVBQyxFQUFBSSxLQUFBWCxPQUNBLElBQUFZLEVBQUFaLEdBRUEsSUFBQTlELEVBQUEsRUFBQUEsRUFBQUssRUFBQUwsSUFDQVUsRUFBQWlFLFNBQUFiLEdBQ0FPLEVBQUFyRSxHQUFBOEQsRUFBQWMsVUFBQTVFLEdBRUFxRSxFQUFBckUsR0FBQThELEVBQUE5RCxPQUVBLElBQUEsV0FBQWlFLEVBQ0FJLEVBQUFRLE1BQUFmLEVBQUEsRUFBQUMsT0FDQSxJQUFBLFdBQUFFLElBQUF2RCxFQUFBNEQsa0JBQUFOLEVBQ0EsSUFBQWhFLEVBQUEsRUFBQUEsRUFBQUssRUFBQUwsSUFDQXFFLEVBQUFyRSxHQUFBLENBSUEsT0FBQXFFLEdBMkZBLFFBQUFTLEdBQUFULEVBQUFVLEVBQUFDLEVBQUEzRSxHQUNBMkUsRUFBQUMsT0FBQUQsSUFBQSxDQUNBLElBQUFFLEdBQUFiLEVBQUFoRSxPQUFBMkUsQ0FDQTNFLElBR0FBLEVBQUE0RSxPQUFBNUUsR0FDQUEsRUFBQTZFLElBQ0E3RSxFQUFBNkUsSUFKQTdFLEVBQUE2RSxDQVNBLElBQUFDLEdBQUFKLEVBQUExRSxNQUNBK0UsR0FBQUQsRUFBQSxJQUFBLEVBQUEsc0JBRUE5RSxFQUFBOEUsRUFBQSxJQUNBOUUsRUFBQThFLEVBQUEsRUFFQSxLQUFBLEdBQUFuRixHQUFBLEVBQUFBLEVBQUFLLEVBQUFMLElBQUEsQ0FDQSxHQUFBcUYsR0FBQUMsU0FBQVAsRUFBQVEsT0FBQSxFQUFBdkYsRUFBQSxHQUFBLEdBQ0FvRixJQUFBSSxNQUFBSCxHQUFBLHNCQUNBaEIsRUFBQVcsRUFBQWhGLEdBQUFxRixFQUdBLE1BREEzRSxHQUFBK0UsY0FBQSxFQUFBekYsRUFDQUEsRUFHQSxRQUFBMEYsR0FBQXJCLEVBQUFVLEVBQUFDLEVBQUEzRSxHQUNBLEdBQUFzRixHQUFBakYsRUFBQStFLGNBQ0FHLEVBQUFDLEVBQUFkLEdBQUFWLEVBQUFXLEVBQUEzRSxFQUNBLE9BQUFzRixHQUdBLFFBQUFHLEdBQUF6QixFQUFBVSxFQUFBQyxFQUFBM0UsR0FDQSxHQUFBc0YsR0FBQWpGLEVBQUErRSxjQUNBRyxFQUFBRyxFQUFBaEIsR0FBQVYsRUFBQVcsRUFBQTNFLEVBQ0EsT0FBQXNGLEdBR0EsUUFBQUssR0FBQTNCLEVBQUFVLEVBQUFDLEVBQUEzRSxHQUNBLE1BQUF5RixHQUFBekIsRUFBQVUsRUFBQUMsRUFBQTNFLEdBR0EsUUFBQTRGLEdBQUE1QixFQUFBVSxFQUFBQyxFQUFBM0UsR0FDQSxHQUFBc0YsR0FBQWpGLEVBQUErRSxjQUNBRyxFQUFBTSxFQUFBbkIsR0FBQVYsRUFBQVcsRUFBQTNFLEVBQ0EsT0FBQXNGLEdBR0EsUUFBQVEsR0FBQTlCLEVBQUFVLEVBQUFDLEVBQUEzRSxHQUNBLEdBQUFzRixHQUFBakYsRUFBQStFLGNBQ0FHLEVBQUFRLEVBQUFyQixHQUFBVixFQUFBVyxFQUFBM0UsRUFDQSxPQUFBc0YsR0FpSkEsUUFBQVUsR0FBQWhDLEVBQUFpQyxFQUFBQyxHQUNBLE1BQUEsS0FBQUQsR0FBQUMsSUFBQWxDLEVBQUFoRSxPQUNBbUcsRUFBQW5ELGNBQUFnQixHQUVBbUMsRUFBQW5ELGNBQUFnQixFQUFBb0MsTUFBQUgsRUFBQUMsSUFJQSxRQUFBRyxHQUFBckMsRUFBQWlDLEVBQUFDLEdBQ0EsR0FBQUksR0FBQSxHQUNBdEUsRUFBQSxFQUNBa0UsR0FBQUssS0FBQUMsSUFBQXhDLEVBQUFoRSxPQUFBa0csRUFFQSxLQUFBLEdBQUF2RyxHQUFBc0csRUFBQXRHLEVBQUF1RyxFQUFBdkcsSUFDQXFFLEVBQUFyRSxJQUFBLEtBQ0EyRyxHQUFBRyxFQUFBekUsR0FBQTBFLE9BQUFDLGFBQUEzQyxFQUFBckUsSUFDQXFDLEVBQUEsSUFFQUEsR0FBQSxJQUFBZ0MsRUFBQXJFLEdBQUFpSCxTQUFBLEdBSUEsT0FBQU4sR0FBQUcsRUFBQXpFLEdBR0EsUUFBQTZFLEdBQUE3QyxFQUFBaUMsRUFBQUMsR0FDQSxHQUFBWSxHQUFBLEVBQ0FaLEdBQUFLLEtBQUFDLElBQUF4QyxFQUFBaEUsT0FBQWtHLEVBRUEsS0FBQSxHQUFBdkcsR0FBQXNHLEVBQUF0RyxFQUFBdUcsRUFBQXZHLElBQ0FtSCxHQUFBSixPQUFBQyxhQUFBM0MsRUFBQXJFLEdBQ0EsT0FBQW1ILEdBR0EsUUFBQUMsR0FBQS9DLEVBQUFpQyxFQUFBQyxHQUNBLE1BQUFXLEdBQUE3QyxFQUFBaUMsRUFBQUMsR0FHQSxRQUFBYyxHQUFBaEQsRUFBQWlDLEVBQUFDLEdBQ0EsR0FBQWhFLEdBQUE4QixFQUFBaEUsU0FFQWlHLEdBQUFBLEVBQUEsS0FBQUEsRUFBQSxLQUNBQyxHQUFBQSxFQUFBLEdBQUFBLEVBQUFoRSxLQUFBZ0UsRUFBQWhFLEVBR0EsS0FBQSxHQURBK0UsR0FBQSxHQUNBdEgsRUFBQXNHLEVBQUF0RyxFQUFBdUcsRUFBQXZHLElBQ0FzSCxHQUFBQyxFQUFBbEQsRUFBQXJFLEdBRUEsT0FBQXNILEdBR0EsUUFBQUUsR0FBQW5ELEVBQUFpQyxFQUFBQyxHQUdBLElBQUEsR0FGQWtCLEdBQUFwRCxFQUFBb0MsTUFBQUgsRUFBQUMsR0FDQUksRUFBQSxHQUNBM0csRUFBQSxFQUFBQSxFQUFBeUgsRUFBQXBILE9BQUFMLEdBQUEsRUFDQTJHLEdBQUFJLE9BQUFDLGFBQUFTLEVBQUF6SCxHQUFBLElBQUF5SCxFQUFBekgsRUFBQSxHQUVBLE9BQUEyRyxHQTRDQSxRQUFBZSxHQUFBckQsRUFBQVcsRUFBQTJDLEVBQUFDLEdBQ0FBLElBQ0F4QyxFQUFBLGlCQUFBdUMsR0FBQSw2QkFDQXZDLEVBQUF5QyxTQUFBN0MsR0FBQSxPQUFBQSxFQUFBLGtCQUNBSSxFQUFBSixFQUFBLEVBQUFYLEVBQUFoRSxPQUFBLHVDQUdBLElBQUFrQyxHQUFBOEIsRUFBQWhFLE1BQ0EsTUFBQTJFLEdBQUF6QyxHQUFBLENBR0EsR0FBQXVGLEVBVUEsT0FUQUgsSUFDQUcsRUFBQXpELEVBQUFXLEdBQ0FBLEVBQUEsRUFBQXpDLElBQ0F1RixHQUFBekQsRUFBQVcsRUFBQSxJQUFBLEtBRUE4QyxFQUFBekQsRUFBQVcsSUFBQSxFQUNBQSxFQUFBLEVBQUF6QyxJQUNBdUYsR0FBQXpELEVBQUFXLEVBQUEsS0FFQThDLEdBV0EsUUFBQUMsR0FBQTFELEVBQUFXLEVBQUEyQyxFQUFBQyxHQUNBQSxJQUNBeEMsRUFBQSxpQkFBQXVDLEdBQUEsNkJBQ0F2QyxFQUFBeUMsU0FBQTdDLEdBQUEsT0FBQUEsRUFBQSxrQkFDQUksRUFBQUosRUFBQSxFQUFBWCxFQUFBaEUsT0FBQSx1Q0FHQSxJQUFBa0MsR0FBQThCLEVBQUFoRSxNQUNBLE1BQUEyRSxHQUFBekMsR0FBQSxDQUdBLEdBQUF1RixFQWtCQSxPQWpCQUgsSUFDQTNDLEVBQUEsRUFBQXpDLElBQ0F1RixFQUFBekQsRUFBQVcsRUFBQSxJQUFBLElBQ0FBLEVBQUEsRUFBQXpDLElBQ0F1RixHQUFBekQsRUFBQVcsRUFBQSxJQUFBLEdBQ0E4QyxHQUFBekQsRUFBQVcsR0FDQUEsRUFBQSxFQUFBekMsSUFDQXVGLEdBQUF6RCxFQUFBVyxFQUFBLElBQUEsS0FBQSxLQUVBQSxFQUFBLEVBQUF6QyxJQUNBdUYsRUFBQXpELEVBQUFXLEVBQUEsSUFBQSxJQUNBQSxFQUFBLEVBQUF6QyxJQUNBdUYsR0FBQXpELEVBQUFXLEVBQUEsSUFBQSxHQUNBQSxFQUFBLEVBQUF6QyxJQUNBdUYsR0FBQXpELEVBQUFXLEVBQUEsSUFDQThDLEdBQUF6RCxFQUFBVyxJQUFBLEtBQUEsR0FFQThDLEdBNEJBLFFBQUFFLEdBQUEzRCxFQUFBVyxFQUFBMkMsRUFBQUMsR0FDQUEsSUFDQXhDLEVBQUEsaUJBQUF1QyxHQUFBLDZCQUNBdkMsRUFBQXlDLFNBQUE3QyxHQUFBLE9BQUFBLEVBQUEsa0JBQ0FJLEVBQUFKLEVBQUEsRUFBQVgsRUFBQWhFLE9BQUEsdUNBR0EsSUFBQWtDLEdBQUE4QixFQUFBaEUsTUFDQSxNQUFBMkUsR0FBQXpDLEdBQUEsQ0FHQSxHQUFBdUYsR0FBQUosRUFBQXJELEVBQUFXLEVBQUEyQyxHQUFBLEdBQ0FNLEVBQUEsTUFBQUgsQ0FDQSxPQUFBRyxJQUNBLE1BQUFILEVBQUEsTUFFQUEsR0FXQSxRQUFBSSxHQUFBN0QsRUFBQVcsRUFBQTJDLEVBQUFDLEdBQ0FBLElBQ0F4QyxFQUFBLGlCQUFBdUMsR0FBQSw2QkFDQXZDLEVBQUF5QyxTQUFBN0MsR0FBQSxPQUFBQSxFQUFBLGtCQUNBSSxFQUFBSixFQUFBLEVBQUFYLEVBQUFoRSxPQUFBLHVDQUdBLElBQUFrQyxHQUFBOEIsRUFBQWhFLE1BQ0EsTUFBQTJFLEdBQUF6QyxHQUFBLENBR0EsR0FBQXVGLEdBQUFDLEVBQUExRCxFQUFBVyxFQUFBMkMsR0FBQSxHQUNBTSxFQUFBLFdBQUFILENBQ0EsT0FBQUcsSUFDQSxXQUFBSCxFQUFBLE1BRUFBLEdBV0EsUUFBQUssR0FBQTlELEVBQUFXLEVBQUEyQyxFQUFBQyxHQU1BLE1BTEFBLEtBQ0F4QyxFQUFBLGlCQUFBdUMsR0FBQSw2QkFDQXZDLEVBQUFKLEVBQUEsRUFBQVgsRUFBQWhFLE9BQUEsd0NBR0ErSCxFQUFBQyxLQUFBaEUsRUFBQVcsRUFBQTJDLEVBQUEsR0FBQSxHQVdBLFFBQUFXLEdBQUFqRSxFQUFBVyxFQUFBMkMsRUFBQUMsR0FNQSxNQUxBQSxLQUNBeEMsRUFBQSxpQkFBQXVDLEdBQUEsNkJBQ0F2QyxFQUFBSixFQUFBLEVBQUFYLEVBQUFoRSxPQUFBLHdDQUdBK0gsRUFBQUMsS0FBQWhFLEVBQUFXLEVBQUEyQyxFQUFBLEdBQUEsR0F3QkEsUUFBQVksR0FBQWxFLEVBQUFtRSxFQUFBeEQsRUFBQTJDLEVBQUFDLEdBQ0FBLElBQ0F4QyxFQUFBeUMsU0FBQVcsR0FBQSxPQUFBQSxFQUFBLGlCQUNBcEQsRUFBQSxpQkFBQXVDLEdBQUEsNkJBQ0F2QyxFQUFBeUMsU0FBQTdDLEdBQUEsT0FBQUEsRUFBQSxrQkFDQUksRUFBQUosRUFBQSxFQUFBWCxFQUFBaEUsT0FBQSx3Q0FDQW9JLEVBQUFELEVBQUEsT0FHQSxJQUFBakcsR0FBQThCLEVBQUFoRSxNQUNBLE1BQUEyRSxHQUFBekMsR0FHQSxJQUFBLEdBQUF2QyxHQUFBLEVBQUFtQyxFQUFBeUUsS0FBQUMsSUFBQXRFLEVBQUF5QyxFQUFBLEdBQUFoRixFQUFBbUMsRUFBQW5DLElBQ0FxRSxFQUFBVyxFQUFBaEYsSUFDQXdJLEVBQUEsS0FBQSxHQUFBYixFQUFBM0gsRUFBQSxFQUFBQSxNQUNBLEdBQUEySCxFQUFBM0gsRUFBQSxFQUFBQSxHQVlBLFFBQUEwSSxHQUFBckUsRUFBQW1FLEVBQUF4RCxFQUFBMkMsRUFBQUMsR0FDQUEsSUFDQXhDLEVBQUF5QyxTQUFBVyxHQUFBLE9BQUFBLEVBQUEsaUJBQ0FwRCxFQUFBLGlCQUFBdUMsR0FBQSw2QkFDQXZDLEVBQUF5QyxTQUFBN0MsR0FBQSxPQUFBQSxFQUFBLGtCQUNBSSxFQUFBSixFQUFBLEVBQUFYLEVBQUFoRSxPQUFBLHdDQUNBb0ksRUFBQUQsRUFBQSxZQUdBLElBQUFqRyxHQUFBOEIsRUFBQWhFLE1BQ0EsTUFBQTJFLEdBQUF6QyxHQUdBLElBQUEsR0FBQXZDLEdBQUEsRUFBQW1DLEVBQUF5RSxLQUFBQyxJQUFBdEUsRUFBQXlDLEVBQUEsR0FBQWhGLEVBQUFtQyxFQUFBbkMsSUFDQXFFLEVBQUFXLEVBQUFoRixHQUNBd0ksSUFBQSxHQUFBYixFQUFBM0gsRUFBQSxFQUFBQSxHQUFBLElBNkJBLFFBQUEySSxHQUFBdEUsRUFBQW1FLEVBQUF4RCxFQUFBMkMsRUFBQUMsR0FDQUEsSUFDQXhDLEVBQUF5QyxTQUFBVyxHQUFBLE9BQUFBLEVBQUEsaUJBQ0FwRCxFQUFBLGlCQUFBdUMsR0FBQSw2QkFDQXZDLEVBQUF5QyxTQUFBN0MsR0FBQSxPQUFBQSxFQUFBLGtCQUNBSSxFQUFBSixFQUFBLEVBQUFYLEVBQUFoRSxPQUFBLHdDQUNBdUksRUFBQUosRUFBQSxjQUdBLElBQUFqRyxHQUFBOEIsRUFBQWhFLE1BQ0EyRSxJQUFBekMsSUFHQWlHLEdBQUEsRUFDQUQsRUFBQWxFLEVBQUFtRSxFQUFBeEQsRUFBQTJDLEVBQUFDLEdBRUFXLEVBQUFsRSxFQUFBLE1BQUFtRSxFQUFBLEVBQUF4RCxFQUFBMkMsRUFBQUMsSUFXQSxRQUFBaUIsR0FBQXhFLEVBQUFtRSxFQUFBeEQsRUFBQTJDLEVBQUFDLEdBQ0FBLElBQ0F4QyxFQUFBeUMsU0FBQVcsR0FBQSxPQUFBQSxFQUFBLGlCQUNBcEQsRUFBQSxpQkFBQXVDLEdBQUEsNkJBQ0F2QyxFQUFBeUMsU0FBQTdDLEdBQUEsT0FBQUEsRUFBQSxrQkFDQUksRUFBQUosRUFBQSxFQUFBWCxFQUFBaEUsT0FBQSx3Q0FDQXVJLEVBQUFKLEVBQUEsd0JBR0EsSUFBQWpHLEdBQUE4QixFQUFBaEUsTUFDQTJFLElBQUF6QyxJQUdBaUcsR0FBQSxFQUNBRSxFQUFBckUsRUFBQW1FLEVBQUF4RCxFQUFBMkMsRUFBQUMsR0FFQWMsRUFBQXJFLEVBQUEsV0FBQW1FLEVBQUEsRUFBQXhELEVBQUEyQyxFQUFBQyxJQVdBLFFBQUFrQixHQUFBekUsRUFBQW1FLEVBQUF4RCxFQUFBMkMsRUFBQUMsR0FDQUEsSUFDQXhDLEVBQUF5QyxTQUFBVyxHQUFBLE9BQUFBLEVBQUEsaUJBQ0FwRCxFQUFBLGlCQUFBdUMsR0FBQSw2QkFDQXZDLEVBQUF5QyxTQUFBN0MsR0FBQSxPQUFBQSxFQUFBLGtCQUNBSSxFQUFBSixFQUFBLEVBQUFYLEVBQUFoRSxPQUFBLHdDQUNBMEksRUFBQVAsRUFBQSw4Q0FHQSxJQUFBakcsR0FBQThCLEVBQUFoRSxNQUNBMkUsSUFBQXpDLEdBR0E2RixFQUFBdkQsTUFBQVIsRUFBQW1FLEVBQUF4RCxFQUFBMkMsRUFBQSxHQUFBLEdBV0EsUUFBQXFCLEdBQUEzRSxFQUFBbUUsRUFBQXhELEVBQUEyQyxFQUFBQyxHQUNBQSxJQUNBeEMsRUFBQXlDLFNBQUFXLEdBQUEsT0FBQUEsRUFBQSxpQkFDQXBELEVBQUEsaUJBQUF1QyxHQUFBLDZCQUNBdkMsRUFBQXlDLFNBQUE3QyxHQUFBLE9BQUFBLEVBQUEsa0JBQ0FJLEVBQUFKLEVBQUEsRUFBQVgsRUFBQWhFLE9BQ0Esd0NBQ0EwSSxFQUFBUCxFQUFBLGdEQUdBLElBQUFqRyxHQUFBOEIsRUFBQWhFLE1BQ0EyRSxJQUFBekMsR0FHQTZGLEVBQUF2RCxNQUFBUixFQUFBbUUsRUFBQXhELEVBQUEyQyxFQUFBLEdBQUEsR0F1RUEsUUFBQXpELEdBQUErRSxHQUNBLE1BQUFBLEdBQUFDLEtBQUFELEVBQUFDLE9BQ0FELEVBQUFFLFFBQUEsYUFBQSxJQTZEQSxRQUFBQyxHQUFBQyxFQUFBOUcsRUFBQStHLEdBQ0EsTUFBQSxnQkFBQUQsR0FBQUMsR0FDQUQsSUFBQUEsRUFDQUEsR0FBQTlHLEVBQUFBLEVBQ0E4RyxHQUFBLEVBQUFBLEdBQ0FBLEdBQUE5RyxFQUNBOEcsR0FBQSxFQUFBQSxFQUNBLElBR0EsUUFBQWxGLEdBQUE5RCxHQUtBLE1BREFBLEtBQUF1RyxLQUFBMkMsTUFBQWxKLEdBQ0FBLEVBQUEsRUFBQSxFQUFBQSxFQUdBLFFBQUFtSixHQUFBMUYsR0FDQSxPQUFBWCxNQUFBcUcsU0FBQSxTQUFBMUYsR0FDQSxNQUFBLG1CQUFBMkYsT0FBQUMsVUFBQXpDLFNBQUE3RyxLQUFBMEQsS0FDQUEsR0FHQSxRQUFBWSxHQUFBWixHQUNBLE1BQUEwRixHQUFBMUYsSUFBQXBELEVBQUFpRSxTQUFBYixJQUNBQSxHQUFBLGdCQUFBQSxJQUNBLGdCQUFBQSxHQUFBekQsT0FHQSxRQUFBa0gsR0FBQTlILEdBQ0EsTUFBQUEsR0FBQSxHQUFBLElBQUFBLEVBQUF3SCxTQUFBLElBQ0F4SCxFQUFBd0gsU0FBQSxJQUdBLFFBQUFwQixHQUFBb0QsR0FFQSxJQUFBLEdBREFVLE1BQ0EzSixFQUFBLEVBQUFBLEVBQUFpSixFQUFBNUksT0FBQUwsSUFBQSxDQUNBLEdBQUE0SixHQUFBWCxFQUFBNUgsV0FBQXJCLEVBQ0EsSUFBQTRKLEdBQUEsSUFDQUQsRUFBQTVILEtBQUFrSCxFQUFBNUgsV0FBQXJCLFFBQ0EsQ0FDQSxHQUFBc0csR0FBQXRHLENBQ0E0SixJQUFBLE9BQUFBLEdBQUEsT0FBQTVKLEdBRUEsS0FBQSxHQURBNkosR0FBQUMsbUJBQUFiLEVBQUF4QyxNQUFBSCxFQUFBdEcsRUFBQSxJQUFBdUYsT0FBQSxHQUFBd0UsTUFBQSxLQUNBNUgsRUFBQSxFQUFBQSxFQUFBMEgsRUFBQXhKLE9BQUE4QixJQUNBd0gsRUFBQTVILEtBQUF1RCxTQUFBdUUsRUFBQTFILEdBQUEsTUFHQSxNQUFBd0gsR0FHQSxRQUFBNUQsR0FBQWtELEdBRUEsSUFBQSxHQURBVSxNQUNBM0osRUFBQSxFQUFBQSxFQUFBaUosRUFBQTVJLE9BQUFMLElBRUEySixFQUFBNUgsS0FBQSxJQUFBa0gsRUFBQTVILFdBQUFyQixHQUVBLE9BQUEySixHQUdBLFFBQUF2RCxHQUFBNkMsR0FHQSxJQUFBLEdBRkFlLEdBQUFDLEVBQUFDLEVBQ0FQLEtBQ0EzSixFQUFBLEVBQUFBLEVBQUFpSixFQUFBNUksT0FBQUwsSUFDQWdLLEVBQUFmLEVBQUE1SCxXQUFBckIsR0FDQWlLLEVBQUFELEdBQUEsRUFDQUUsRUFBQUYsRUFBQSxJQUNBTCxFQUFBNUgsS0FBQW1JLEdBQ0FQLEVBQUE1SCxLQUFBa0ksRUFHQSxPQUFBTixHQUdBLFFBQUF6RCxHQUFBK0MsR0FDQSxNQUFBekMsR0FBQXBELFlBQUE2RixHQUdBLFFBQUFyRCxHQUFBdUUsRUFBQUMsRUFBQXBGLEVBQUEzRSxHQUVBLElBQUEsR0FBQUwsR0FBQSxFQUFBQSxFQUFBSyxLQUNBTCxFQUFBZ0YsR0FBQW9GLEVBQUEvSixRQUFBTCxHQUFBbUssRUFBQTlKLFFBREFMLElBR0FvSyxFQUFBcEssRUFBQWdGLEdBQUFtRixFQUFBbkssRUFFQSxPQUFBQSxHQUdBLFFBQUE4RyxHQUFBbUMsR0FDQSxJQUNBLE1BQUFvQixvQkFBQXBCLEdBQ0EsTUFBQXFCLEdBQ0EsTUFBQXZELFFBQUFDLGFBQUEsUUFTQSxRQUFBeUIsR0FBQUQsRUFBQStCLEdBQ0FuRixFQUFBLGdCQUFBb0QsR0FBQSx5Q0FDQXBELEVBQUFvRCxHQUFBLEVBQUEsNERBQ0FwRCxFQUFBb0QsR0FBQStCLEVBQUEsK0NBQ0FuRixFQUFBd0IsS0FBQTRELE1BQUFoQyxLQUFBQSxFQUFBLG9DQUdBLFFBQUFJLEdBQUFKLEVBQUErQixFQUFBMUQsR0FDQXpCLEVBQUEsZ0JBQUFvRCxHQUFBLHlDQUNBcEQsRUFBQW9ELEdBQUErQixFQUFBLDJDQUNBbkYsRUFBQW9ELEdBQUEzQixFQUFBLDRDQUNBekIsRUFBQXdCLEtBQUE0RCxNQUFBaEMsS0FBQUEsRUFBQSxvQ0FHQSxRQUFBTyxHQUFBUCxFQUFBK0IsRUFBQTFELEdBQ0F6QixFQUFBLGdCQUFBb0QsR0FBQSx5Q0FDQXBELEVBQUFvRCxHQUFBK0IsRUFBQSwyQ0FDQW5GLEVBQUFvRCxHQUFBM0IsRUFBQSw0Q0FHQSxRQUFBekIsR0FBQXFGLEVBQUFDLEdBQ0EsSUFBQUQsRUFBQSxLQUFBLElBQUF4SyxPQUFBeUssR0FBQSxvQkE1a0NBLEdBQUFsRSxHQUFBekcsRUFBQSxhQUNBcUksRUFBQXJJLEVBQUEsVUFFQUksR0FBQU8sT0FBQUEsRUFDQVAsRUFBQXdLLFdBQUFqSyxFQUNBUCxFQUFBeUssa0JBQUEsR0FDQWxLLEVBQUFtSyxTQUFBLEtBT0FuSyxFQUFBNEQsZ0JBQUEsV0FNQSxJQUNBLEdBQUFELEdBQUEsR0FBQXlHLGFBQUEsR0FDQTdJLEVBQUEsR0FBQWlCLFlBQUFtQixFQUVBLE9BREFwQyxHQUFBOEksSUFBQSxXQUFBLE1BQUEsS0FDQSxLQUFBOUksRUFBQThJLE9BQ0Esa0JBQUE5SSxHQUFBK0ksU0FDQSxNQUFBekwsR0FDQSxPQUFBLE1BK0VBbUIsRUFBQXVLLFdBQUEsU0FBQWxILEdBQ0EsT0FBQWdELE9BQUFoRCxHQUFBbUgsZUFDQSxJQUFBLE1BQ0EsSUFBQSxPQUNBLElBQUEsUUFDQSxJQUFBLFFBQ0EsSUFBQSxTQUNBLElBQUEsU0FDQSxJQUFBLE1BQ0EsSUFBQSxPQUNBLElBQUEsUUFDQSxJQUFBLFVBQ0EsSUFBQSxXQUNBLE9BQUEsQ0FDQSxTQUNBLE9BQUEsSUFJQXhLLEVBQUFpRSxTQUFBLFNBQUFpRixHQUNBLFFBQUEsT0FBQUEsR0FBQS9CLFNBQUErQixJQUFBQSxFQUFBcEYsWUFHQTlELEVBQUEwRCxXQUFBLFNBQUE2RSxFQUFBbEYsR0FDQSxHQUFBb0QsRUFFQSxRQURBOEIsR0FBQSxHQUNBbEYsR0FBQSxRQUNBLElBQUEsTUFDQW9ELEVBQUE4QixFQUFBNUksT0FBQSxDQUNBLE1BQ0EsS0FBQSxPQUNBLElBQUEsUUFDQThHLEVBQUF0QixFQUFBb0QsR0FBQTVJLE1BQ0EsTUFDQSxLQUFBLFFBQ0EsSUFBQSxTQUNBLElBQUEsTUFDQThHLEVBQUE4QixFQUFBNUksTUFDQSxNQUNBLEtBQUEsU0FDQThHLEVBQUFqQixFQUFBK0MsR0FBQTVJLE1BQ0EsTUFDQSxLQUFBLE9BQ0EsSUFBQSxRQUNBLElBQUEsVUFDQSxJQUFBLFdBQ0E4RyxFQUFBLEVBQUE4QixFQUFBNUksTUFDQSxNQUNBLFNBQ0EsS0FBQSxJQUFBSixPQUFBLG9CQUVBLE1BQUFrSCxJQUdBekcsRUFBQXlLLE9BQUEsU0FBQUMsRUFBQUMsR0FJQSxHQUhBakcsRUFBQW9FLEVBQUE0QixHQUFBLHVFQUdBLElBQUFBLEVBQUEvSyxPQUNBLE1BQUEsSUFBQUssR0FBQSxFQUNBLElBQUEsSUFBQTBLLEVBQUEvSyxPQUNBLE1BQUErSyxHQUFBLEVBR0EsSUFBQXBMLEVBQ0EsSUFBQSxnQkFBQXFMLEdBRUEsSUFEQUEsRUFBQSxFQUNBckwsRUFBQSxFQUFBQSxFQUFBb0wsRUFBQS9LLE9BQUFMLElBQ0FxTCxHQUFBRCxFQUFBcEwsR0FBQUssTUFJQSxJQUFBZ0UsR0FBQSxHQUFBM0QsR0FBQTJLLEdBQ0FDLEVBQUEsQ0FDQSxLQUFBdEwsRUFBQSxFQUFBQSxFQUFBb0wsRUFBQS9LLE9BQUFMLElBQUEsQ0FDQSxHQUFBdUwsR0FBQUgsRUFBQXBMLEVBQ0F1TCxHQUFBQyxLQUFBbkgsRUFBQWlILEdBQ0FBLEdBQUFDLEVBQUFsTCxPQUVBLE1BQUFnRSxJQThEQTNELEVBQUFnSixVQUFBN0UsTUFBQSxTQUFBRSxFQUFBQyxFQUFBM0UsRUFBQTBELEdBR0EsR0FBQTBILFNBQUF6RyxHQUNBeUcsU0FBQXBMLEtBQ0EwRCxFQUFBMUQsRUFDQUEsRUFBQXdILFlBRUEsQ0FDQSxHQUFBNkQsR0FBQTNILENBQ0FBLEdBQUFpQixFQUNBQSxFQUFBM0UsRUFDQUEsRUFBQXFMLEVBR0ExRyxFQUFBQyxPQUFBRCxJQUFBLENBQ0EsSUFBQUUsR0FBQTVCLEtBQUFqRCxPQUFBMkUsQ0FDQTNFLElBR0FBLEVBQUE0RSxPQUFBNUUsR0FDQUEsRUFBQTZFLElBQ0E3RSxFQUFBNkUsSUFKQTdFLEVBQUE2RSxFQU9BbkIsRUFBQWdELE9BQUFoRCxHQUFBLFFBQUFtSCxhQUVBLElBQUEvRCxFQUNBLFFBQUFwRCxHQUNBLElBQUEsTUFDQW9ELEVBQUFyQyxFQUFBeEIsS0FBQXlCLEVBQUFDLEVBQUEzRSxFQUNBLE1BQ0EsS0FBQSxPQUNBLElBQUEsUUFDQThHLEVBQUF6QixFQUFBcEMsS0FBQXlCLEVBQUFDLEVBQUEzRSxFQUNBLE1BQ0EsS0FBQSxRQUNBOEcsRUFBQXJCLEVBQUF4QyxLQUFBeUIsRUFBQUMsRUFBQTNFLEVBQ0EsTUFDQSxLQUFBLFNBQ0E4RyxFQUFBbkIsRUFBQTFDLEtBQUF5QixFQUFBQyxFQUFBM0UsRUFDQSxNQUNBLEtBQUEsU0FDQThHLEVBQUFsQixFQUFBM0MsS0FBQXlCLEVBQUFDLEVBQUEzRSxFQUNBLE1BQ0EsS0FBQSxPQUNBLElBQUEsUUFDQSxJQUFBLFVBQ0EsSUFBQSxXQUNBOEcsRUFBQWhCLEVBQUE3QyxLQUFBeUIsRUFBQUMsRUFBQTNFLEVBQ0EsTUFDQSxTQUNBLEtBQUEsSUFBQUosT0FBQSxvQkFFQSxNQUFBa0gsSUFHQXpHLEVBQUFnSixVQUFBekMsU0FBQSxTQUFBbEQsRUFBQXVDLEVBQUFDLEdBQ0EsR0FBQS9DLEdBQUFGLElBU0EsSUFQQVMsRUFBQWdELE9BQUFoRCxHQUFBLFFBQUFtSCxjQUNBNUUsRUFBQXJCLE9BQUFxQixJQUFBLEVBQ0FDLEVBQUFzQixTQUFBdEIsRUFDQXRCLE9BQUFzQixHQUNBQSxFQUFBL0MsRUFBQW5ELE9BR0FrRyxJQUFBRCxFQUNBLE1BQUEsRUFFQSxJQUFBYSxFQUNBLFFBQUFwRCxHQUNBLElBQUEsTUFDQW9ELEVBQUFFLEVBQUE3RCxFQUFBOEMsRUFBQUMsRUFDQSxNQUNBLEtBQUEsT0FDQSxJQUFBLFFBQ0FZLEVBQUFULEVBQUFsRCxFQUFBOEMsRUFBQUMsRUFDQSxNQUNBLEtBQUEsUUFDQVksRUFBQUQsRUFBQTFELEVBQUE4QyxFQUFBQyxFQUNBLE1BQ0EsS0FBQSxTQUNBWSxFQUFBQyxFQUFBNUQsRUFBQThDLEVBQUFDLEVBQ0EsTUFDQSxLQUFBLFNBQ0FZLEVBQUFkLEVBQUE3QyxFQUFBOEMsRUFBQUMsRUFDQSxNQUNBLEtBQUEsT0FDQSxJQUFBLFFBQ0EsSUFBQSxVQUNBLElBQUEsV0FDQVksRUFBQUssRUFBQWhFLEVBQUE4QyxFQUFBQyxFQUNBLE1BQ0EsU0FDQSxLQUFBLElBQUF0RyxPQUFBLG9CQUVBLE1BQUFrSCxJQUdBekcsRUFBQWdKLFVBQUFpQyxPQUFBLFdBQ0EsT0FDQTFILEtBQUEsU0FDQTJILEtBQUF6SSxNQUFBdUcsVUFBQWpELE1BQUFyRyxLQUFBa0QsS0FBQXVJLE1BQUF2SSxLQUFBLEtBS0E1QyxFQUFBZ0osVUFBQThCLEtBQUEsU0FBQU0sRUFBQUMsRUFBQXpGLEVBQUFDLEdBQ0EsR0FBQXlGLEdBQUExSSxJQU9BLElBTEFnRCxJQUFBQSxFQUFBLEdBQ0FDLEdBQUEsSUFBQUEsSUFBQUEsRUFBQWpELEtBQUFqRCxRQUNBMEwsSUFBQUEsRUFBQSxHQUdBeEYsSUFBQUQsR0FDQSxJQUFBd0YsRUFBQXpMLFFBQUEsSUFBQTJMLEVBQUEzTCxPQUFBLENBR0ErRSxFQUFBbUIsR0FBQUQsRUFBQSwyQkFDQWxCLEVBQUEyRyxHQUFBLEdBQUFBLEVBQUFELEVBQUF6TCxPQUNBLDZCQUNBK0UsRUFBQWtCLEdBQUEsR0FBQUEsRUFBQTBGLEVBQUEzTCxPQUFBLDZCQUNBK0UsRUFBQW1CLEdBQUEsR0FBQUEsR0FBQXlGLEVBQUEzTCxPQUFBLDJCQUdBa0csRUFBQWpELEtBQUFqRCxTQUNBa0csRUFBQWpELEtBQUFqRCxRQUNBeUwsRUFBQXpMLE9BQUEwTCxFQUFBeEYsRUFBQUQsSUFDQUMsRUFBQXVGLEVBQUF6TCxPQUFBMEwsRUFBQXpGLEVBRUEsSUFBQS9ELEdBQUFnRSxFQUFBRCxDQUVBLElBQUEvRCxFQUFBLE1BQUE3QixFQUFBNEQsZ0JBQ0EsSUFBQSxHQUFBdEUsR0FBQSxFQUFBQSxFQUFBdUMsRUFBQXZDLElBQ0E4TCxFQUFBOUwsRUFBQStMLEdBQUF6SSxLQUFBdEQsRUFBQXNHLE9BRUF3RixHQUFBckgsS0FBQW5CLEtBQUEwSCxTQUFBMUUsRUFBQUEsRUFBQS9ELEdBQUF3SixLQWdFQXJMLEVBQUFnSixVQUFBakQsTUFBQSxTQUFBSCxFQUFBQyxHQUNBLEdBQUFoRSxHQUFBZSxLQUFBakQsTUFJQSxJQUhBaUcsRUFBQThDLEVBQUE5QyxFQUFBL0QsRUFBQSxHQUNBZ0UsRUFBQTZDLEVBQUE3QyxFQUFBaEUsRUFBQUEsR0FFQTdCLEVBQUE0RCxnQkFDQSxNQUFBNUQsR0FBQTZELFNBQUFqQixLQUFBMEgsU0FBQTFFLEVBQUFDLEdBSUEsS0FBQSxHQUZBMEYsR0FBQTFGLEVBQUFELEVBQ0E0RixFQUFBLEdBQUF4TCxHQUFBdUwsR0FBQXBFLFVBQUEsSUFDQTdILEVBQUEsRUFBQUEsRUFBQWlNLEVBQUFqTSxJQUNBa00sRUFBQWxNLEdBQUFzRCxLQUFBdEQsRUFBQXNHLEVBRUEsT0FBQTRGLElBS0F4TCxFQUFBZ0osVUFBQXlDLElBQUEsU0FBQW5ILEdBRUEsTUFEQW9ILFNBQUFDLElBQUEsNkRBQ0EvSSxLQUFBc0IsVUFBQUksSUFJQXRFLEVBQUFnSixVQUFBNEMsSUFBQSxTQUFBdEssRUFBQWdELEdBRUEsTUFEQW9ILFNBQUFDLElBQUEsNkRBQ0EvSSxLQUFBaUosV0FBQXZLLEVBQUFnRCxJQUdBdEUsRUFBQWdKLFVBQUE5RSxVQUFBLFNBQUFJLEVBQUE0QyxHQU1BLEdBTEFBLElBQ0F4QyxFQUFBeUMsU0FBQTdDLEdBQUEsT0FBQUEsRUFBQSxrQkFDQUksRUFBQUosRUFBQTFCLEtBQUFqRCxPQUFBLDBDQUdBMkUsR0FBQTFCLEtBQUFqRCxRQUdBLE1BQUFpRCxNQUFBMEIsSUEyQkF0RSxFQUFBZ0osVUFBQThDLGFBQUEsU0FBQXhILEVBQUE0QyxHQUNBLE1BQUFGLEdBQUFwRSxLQUFBMEIsR0FBQSxFQUFBNEMsSUFHQWxILEVBQUFnSixVQUFBK0MsYUFBQSxTQUFBekgsRUFBQTRDLEdBQ0EsTUFBQUYsR0FBQXBFLEtBQUEwQixHQUFBLEVBQUE0QyxJQW1DQWxILEVBQUFnSixVQUFBZ0QsYUFBQSxTQUFBMUgsRUFBQTRDLEdBQ0EsTUFBQUcsR0FBQXpFLEtBQUEwQixHQUFBLEVBQUE0QyxJQUdBbEgsRUFBQWdKLFVBQUFpRCxhQUFBLFNBQUEzSCxFQUFBNEMsR0FDQSxNQUFBRyxHQUFBekUsS0FBQTBCLEdBQUEsRUFBQTRDLElBR0FsSCxFQUFBZ0osVUFBQWtELFNBQUEsU0FBQTVILEVBQUE0QyxHQU9BLEdBTkFBLElBQ0F4QyxFQUFBeUMsU0FBQTdDLEdBQUEsT0FBQUEsRUFDQSxrQkFDQUksRUFBQUosRUFBQTFCLEtBQUFqRCxPQUFBLDBDQUdBMkUsR0FBQTFCLEtBQUFqRCxRQUFBLENBR0EsR0FBQTRILEdBQUEsSUFBQTNFLEtBQUEwQixFQUNBLE9BQUFpRCxJQUNBLElBQUEzRSxLQUFBMEIsR0FBQSxNQUVBMUIsS0FBQTBCLEtBc0JBdEUsRUFBQWdKLFVBQUFtRCxZQUFBLFNBQUE3SCxFQUFBNEMsR0FDQSxNQUFBSSxHQUFBMUUsS0FBQTBCLEdBQUEsRUFBQTRDLElBR0FsSCxFQUFBZ0osVUFBQW9ELFlBQUEsU0FBQTlILEVBQUE0QyxHQUNBLE1BQUFJLEdBQUExRSxLQUFBMEIsR0FBQSxFQUFBNEMsSUFzQkFsSCxFQUFBZ0osVUFBQXFELFlBQUEsU0FBQS9ILEVBQUE0QyxHQUNBLE1BQUFNLEdBQUE1RSxLQUFBMEIsR0FBQSxFQUFBNEMsSUFHQWxILEVBQUFnSixVQUFBc0QsWUFBQSxTQUFBaEksRUFBQTRDLEdBQ0EsTUFBQU0sR0FBQTVFLEtBQUEwQixHQUFBLEVBQUE0QyxJQVlBbEgsRUFBQWdKLFVBQUF1RCxZQUFBLFNBQUFqSSxFQUFBNEMsR0FDQSxNQUFBTyxHQUFBN0UsS0FBQTBCLEdBQUEsRUFBQTRDLElBR0FsSCxFQUFBZ0osVUFBQXdELFlBQUEsU0FBQWxJLEVBQUE0QyxHQUNBLE1BQUFPLEdBQUE3RSxLQUFBMEIsR0FBQSxFQUFBNEMsSUFZQWxILEVBQUFnSixVQUFBeUQsYUFBQSxTQUFBbkksRUFBQTRDLEdBQ0EsTUFBQVUsR0FBQWhGLEtBQUEwQixHQUFBLEVBQUE0QyxJQUdBbEgsRUFBQWdKLFVBQUEwRCxhQUFBLFNBQUFwSSxFQUFBNEMsR0FDQSxNQUFBVSxHQUFBaEYsS0FBQTBCLEdBQUEsRUFBQTRDLElBR0FsSCxFQUFBZ0osVUFBQTZDLFdBQUEsU0FBQS9ELEVBQUF4RCxFQUFBNEMsR0FDQUEsSUFDQXhDLEVBQUF5QyxTQUFBVyxHQUFBLE9BQUFBLEVBQUEsaUJBQ0FwRCxFQUFBeUMsU0FBQTdDLEdBQUEsT0FBQUEsRUFBQSxrQkFDQUksRUFBQUosRUFBQTFCLEtBQUFqRCxPQUFBLHdDQUNBb0ksRUFBQUQsRUFBQSxNQUdBeEQsR0FBQTFCLEtBQUFqRCxTQUVBaUQsS0FBQTBCLEdBQUF3RCxJQXVCQTlILEVBQUFnSixVQUFBMkQsY0FBQSxTQUFBN0UsRUFBQXhELEVBQUE0QyxHQUNBVyxFQUFBakYsS0FBQWtGLEVBQUF4RCxHQUFBLEVBQUE0QyxJQUdBbEgsRUFBQWdKLFVBQUE0RCxjQUFBLFNBQUE5RSxFQUFBeEQsRUFBQTRDLEdBQ0FXLEVBQUFqRixLQUFBa0YsRUFBQXhELEdBQUEsRUFBQTRDLElBc0JBbEgsRUFBQWdKLFVBQUE2RCxjQUFBLFNBQUEvRSxFQUFBeEQsRUFBQTRDLEdBQ0FjLEVBQUFwRixLQUFBa0YsRUFBQXhELEdBQUEsRUFBQTRDLElBR0FsSCxFQUFBZ0osVUFBQThELGNBQUEsU0FBQWhGLEVBQUF4RCxFQUFBNEMsR0FDQWMsRUFBQXBGLEtBQUFrRixFQUFBeEQsR0FBQSxFQUFBNEMsSUFHQWxILEVBQUFnSixVQUFBK0QsVUFBQSxTQUFBakYsRUFBQXhELEVBQUE0QyxHQUNBQSxJQUNBeEMsRUFBQXlDLFNBQUFXLEdBQUEsT0FBQUEsRUFBQSxpQkFDQXBELEVBQUF5QyxTQUFBN0MsR0FBQSxPQUFBQSxFQUFBLGtCQUNBSSxFQUFBSixFQUFBMUIsS0FBQWpELE9BQUEsd0NBQ0F1SSxFQUFBSixFQUFBLFdBR0F4RCxHQUFBMUIsS0FBQWpELFNBR0FtSSxHQUFBLEVBQ0FsRixLQUFBaUosV0FBQS9ELEVBQUF4RCxFQUFBNEMsR0FFQXRFLEtBQUFpSixXQUFBLElBQUEvRCxFQUFBLEVBQUF4RCxFQUFBNEMsS0FzQkFsSCxFQUFBZ0osVUFBQWdFLGFBQUEsU0FBQWxGLEVBQUF4RCxFQUFBNEMsR0FDQWUsRUFBQXJGLEtBQUFrRixFQUFBeEQsR0FBQSxFQUFBNEMsSUFHQWxILEVBQUFnSixVQUFBaUUsYUFBQSxTQUFBbkYsRUFBQXhELEVBQUE0QyxHQUNBZSxFQUFBckYsS0FBQWtGLEVBQUF4RCxHQUFBLEVBQUE0QyxJQXNCQWxILEVBQUFnSixVQUFBa0UsYUFBQSxTQUFBcEYsRUFBQXhELEVBQUE0QyxHQUNBaUIsRUFBQXZGLEtBQUFrRixFQUFBeEQsR0FBQSxFQUFBNEMsSUFHQWxILEVBQUFnSixVQUFBbUUsYUFBQSxTQUFBckYsRUFBQXhELEVBQUE0QyxHQUNBaUIsRUFBQXZGLEtBQUFrRixFQUFBeEQsR0FBQSxFQUFBNEMsSUFtQkFsSCxFQUFBZ0osVUFBQW9FLGFBQUEsU0FBQXRGLEVBQUF4RCxFQUFBNEMsR0FDQWtCLEVBQUF4RixLQUFBa0YsRUFBQXhELEdBQUEsRUFBQTRDLElBR0FsSCxFQUFBZ0osVUFBQXFFLGFBQUEsU0FBQXZGLEVBQUF4RCxFQUFBNEMsR0FDQWtCLEVBQUF4RixLQUFBa0YsRUFBQXhELEdBQUEsRUFBQTRDLElBb0JBbEgsRUFBQWdKLFVBQUFzRSxjQUFBLFNBQUF4RixFQUFBeEQsRUFBQTRDLEdBQ0FvQixFQUFBMUYsS0FBQWtGLEVBQUF4RCxHQUFBLEVBQUE0QyxJQUdBbEgsRUFBQWdKLFVBQUF1RSxjQUFBLFNBQUF6RixFQUFBeEQsRUFBQTRDLEdBQ0FvQixFQUFBMUYsS0FBQWtGLEVBQUF4RCxHQUFBLEVBQUE0QyxJQUlBbEgsRUFBQWdKLFVBQUF3RSxLQUFBLFNBQUExRixFQUFBbEMsRUFBQUMsR0FhQSxHQVpBaUMsSUFBQUEsRUFBQSxHQUNBbEMsSUFBQUEsRUFBQSxHQUNBQyxJQUFBQSxFQUFBakQsS0FBQWpELFFBRUEsZ0JBQUFtSSxLQUNBQSxFQUFBQSxFQUFBbkgsV0FBQSxJQUdBK0QsRUFBQSxnQkFBQW9ELEtBQUFoRCxNQUFBZ0QsR0FBQSx5QkFDQXBELEVBQUFtQixHQUFBRCxFQUFBLGVBR0FDLElBQUFELEdBQ0EsSUFBQWhELEtBQUFqRCxPQUFBLENBRUErRSxFQUFBa0IsR0FBQSxHQUFBQSxFQUFBaEQsS0FBQWpELE9BQUEsdUJBQ0ErRSxFQUFBbUIsR0FBQSxHQUFBQSxHQUFBakQsS0FBQWpELE9BQUEsb0JBRUEsS0FBQSxHQUFBTCxHQUFBc0csRUFBQXRHLEVBQUF1RyxFQUFBdkcsSUFDQXNELEtBQUF0RCxHQUFBd0ksSUFJQTlILEVBQUFnSixVQUFBeUUsUUFBQSxXQUdBLElBQUEsR0FGQTdHLE1BQ0EvRSxFQUFBZSxLQUFBakQsT0FDQUwsRUFBQSxFQUFBQSxFQUFBdUMsRUFBQXZDLElBRUEsR0FEQXNILEVBQUF0SCxHQUFBdUgsRUFBQWpFLEtBQUF0RCxJQUNBQSxJQUFBRyxFQUFBeUssa0JBQUEsQ0FDQXRELEVBQUF0SCxFQUFBLEdBQUEsS0FDQSxPQUdBLE1BQUEsV0FBQXNILEVBQUE4RyxLQUFBLEtBQUEsS0FPQTFOLEVBQUFnSixVQUFBMkUsY0FBQSxXQUNBLEdBQUEsbUJBQUFuTCxZQUFBLENBQ0EsR0FBQXhDLEVBQUE0RCxnQkFDQSxNQUFBLElBQUE1RCxHQUFBNEMsTUFBQUssTUFHQSxLQUFBLEdBREFVLEdBQUEsR0FBQW5CLFlBQUFJLEtBQUFqRCxRQUNBTCxFQUFBLEVBQUF1QyxFQUFBOEIsRUFBQWhFLE9BQUFMLEVBQUF1QyxFQUFBdkMsR0FBQSxFQUNBcUUsRUFBQXJFLEdBQUFzRCxLQUFBdEQsRUFDQSxPQUFBcUUsR0FBQVYsT0FHQSxLQUFBLElBQUExRCxPQUFBLHNEQVlBLElBQUFxTyxHQUFBNU4sRUFBQWdKLFNBS0FoSixHQUFBNkQsU0FBQSxTQUFBdEMsR0FpREEsTUFoREFBLEdBQUF1QyxXQUFBLEVBR0F2QyxFQUFBc00sS0FBQXRNLEVBQUFrSyxJQUNBbEssRUFBQXdDLEtBQUF4QyxFQUFBcUssSUFHQXJLLEVBQUFrSyxJQUFBbUMsRUFBQW5DLElBQ0FsSyxFQUFBcUssSUFBQWdDLEVBQUFoQyxJQUVBckssRUFBQTRDLE1BQUF5SixFQUFBekosTUFDQTVDLEVBQUFnRixTQUFBcUgsRUFBQXJILFNBQ0FoRixFQUFBdU0sZUFBQUYsRUFBQXJILFNBQ0FoRixFQUFBMEosT0FBQTJDLEVBQUEzQyxPQUNBMUosRUFBQXVKLEtBQUE4QyxFQUFBOUMsS0FDQXZKLEVBQUF3RSxNQUFBNkgsRUFBQTdILE1BQ0F4RSxFQUFBMkMsVUFBQTBKLEVBQUExSixVQUNBM0MsRUFBQXVLLGFBQUE4QixFQUFBOUIsYUFDQXZLLEVBQUF3SyxhQUFBNkIsRUFBQTdCLGFBQ0F4SyxFQUFBeUssYUFBQTRCLEVBQUE1QixhQUNBekssRUFBQTBLLGFBQUEyQixFQUFBM0IsYUFDQTFLLEVBQUEySyxTQUFBMEIsRUFBQTFCLFNBQ0EzSyxFQUFBNEssWUFBQXlCLEVBQUF6QixZQUNBNUssRUFBQTZLLFlBQUF3QixFQUFBeEIsWUFDQTdLLEVBQUE4SyxZQUFBdUIsRUFBQXZCLFlBQ0E5SyxFQUFBK0ssWUFBQXNCLEVBQUF0QixZQUNBL0ssRUFBQWdMLFlBQUFxQixFQUFBckIsWUFDQWhMLEVBQUFpTCxZQUFBb0IsRUFBQXBCLFlBQ0FqTCxFQUFBa0wsYUFBQW1CLEVBQUFuQixhQUNBbEwsRUFBQW1MLGFBQUFrQixFQUFBbEIsYUFDQW5MLEVBQUFzSyxXQUFBK0IsRUFBQS9CLFdBQ0F0SyxFQUFBb0wsY0FBQWlCLEVBQUFqQixjQUNBcEwsRUFBQXFMLGNBQUFnQixFQUFBaEIsY0FDQXJMLEVBQUFzTCxjQUFBZSxFQUFBZixjQUNBdEwsRUFBQXVMLGNBQUFjLEVBQUFkLGNBQ0F2TCxFQUFBd0wsVUFBQWEsRUFBQWIsVUFDQXhMLEVBQUF5TCxhQUFBWSxFQUFBWixhQUNBekwsRUFBQTBMLGFBQUFXLEVBQUFYLGFBQ0ExTCxFQUFBMkwsYUFBQVUsRUFBQVYsYUFDQTNMLEVBQUE0TCxhQUFBUyxFQUFBVCxhQUNBNUwsRUFBQTZMLGFBQUFRLEVBQUFSLGFBQ0E3TCxFQUFBOEwsYUFBQU8sRUFBQVAsYUFDQTlMLEVBQUErTCxjQUFBTSxFQUFBTixjQUNBL0wsRUFBQWdNLGNBQUFLLEVBQUFMLGNBQ0FoTSxFQUFBaU0sS0FBQUksRUFBQUosS0FDQWpNLEVBQUFrTSxRQUFBRyxFQUFBSCxRQUNBbE0sRUFBQW9NLGNBQUFDLEVBQUFELGNBRUFwTSxLQWtJQTdCLEtBQUFrRCxLQUFBdkQsRUFBQSxVQUFBLG1CQUFBeUQsTUFBQUEsS0FBQSxtQkFBQUMsUUFBQUEsVUFBQTFELEVBQUEsVUFBQVcsT0FBQWdELFVBQUEsR0FBQUEsVUFBQSxHQUFBQSxVQUFBLEdBQUFBLFVBQUEsR0FBQSwwQ0FBQSxtQ0FDQStLLFlBQUEsRUFBQTlLLE9BQUEsRUFBQUMsU0FBQSxFQUFBd0UsUUFBQSxJQUFBc0csR0FBQSxTQUFBM08sRUFBQVEsRUFBQUosSUFDQSxTQUFBSyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxHQUNBYixFQUFBa0ksS0FBQSxTQUFBMUUsRUFBQXFCLEVBQUEySixFQUFBQyxFQUFBQyxHQUNBLEdBQUF0UCxHQUFBdVAsRUFDQUMsRUFBQSxFQUFBRixFQUFBRCxFQUFBLEVBQ0FJLEdBQUEsR0FBQUQsR0FBQSxFQUNBRSxFQUFBRCxHQUFBLEVBQ0FFLEtBQ0FsUCxFQUFBMk8sRUFBQUUsRUFBQSxFQUFBLEVBQ0FNLEVBQUFSLEtBQUEsRUFDQWhQLEVBQUFnRSxFQUFBcUIsRUFBQWhGLEVBT0EsS0FMQUEsR0FBQW1QLEVBRUE1UCxFQUFBSSxHQUFBLElBQUF1UCxHQUFBLEVBQ0F2UCxLQUFBdVAsRUFDQUEsR0FBQUgsRUFDQUcsRUFBQSxFQUFBM1AsRUFBQSxJQUFBQSxFQUFBb0UsRUFBQXFCLEVBQUFoRixHQUFBQSxHQUFBbVAsRUFBQUQsR0FBQSxHQUtBLElBSEFKLEVBQUF2UCxHQUFBLElBQUEyUCxHQUFBLEVBQ0EzUCxLQUFBMlAsRUFDQUEsR0FBQU4sRUFDQU0sRUFBQSxFQUFBSixFQUFBLElBQUFBLEVBQUFuTCxFQUFBcUIsRUFBQWhGLEdBQUFBLEdBQUFtUCxFQUFBRCxHQUFBLEdBRUEsR0FBQSxJQUFBM1AsRUFDQUEsRUFBQSxFQUFBMFAsTUFDQSxDQUFBLEdBQUExUCxJQUFBeVAsRUFDQSxNQUFBRixHQUFBTSxLQUFBelAsS0FBQSxJQUFBMFAsRUFBQUEsRUFFQVAsSUFBQWxJLEtBQUEwSSxJQUFBLEVBQUFWLEdBQ0FyUCxHQUFBMFAsRUFFQSxPQUFBdFAsS0FBQSxHQUFBbVAsRUFBQWxJLEtBQUEwSSxJQUFBLEVBQUEvUCxFQUFBcVAsSUFHQXpPLEVBQUEwRSxNQUFBLFNBQUFsQixFQUFBNkUsRUFBQXhELEVBQUEySixFQUFBQyxFQUFBQyxHQUNBLEdBQUF0UCxHQUFBdVAsRUFBQTlFLEVBQ0ErRSxFQUFBLEVBQUFGLEVBQUFELEVBQUEsRUFDQUksR0FBQSxHQUFBRCxHQUFBLEVBQ0FFLEVBQUFELEdBQUEsRUFDQU8sRUFBQSxLQUFBWCxFQUFBaEksS0FBQTBJLElBQUEsT0FBQTFJLEtBQUEwSSxJQUFBLE9BQUEsRUFDQXRQLEVBQUEyTyxFQUFBLEVBQUFFLEVBQUEsRUFDQU0sRUFBQVIsRUFBQSxLQUNBaFAsRUFBQTZJLEVBQUEsR0FBQSxJQUFBQSxHQUFBLEVBQUFBLEVBQUEsRUFBQSxFQUFBLENBbUNBLEtBakNBQSxFQUFBNUIsS0FBQTRJLElBQUFoSCxHQUVBaEQsTUFBQWdELElBQUFBLElBQUE2RyxFQUFBQSxHQUNBUCxFQUFBdEosTUFBQWdELEdBQUEsRUFBQSxFQUNBakosRUFBQXlQLElBRUF6UCxFQUFBcUgsS0FBQTRELE1BQUE1RCxLQUFBeUYsSUFBQTdELEdBQUE1QixLQUFBNkksS0FDQWpILEdBQUF3QixFQUFBcEQsS0FBQTBJLElBQUEsR0FBQS9QLElBQUEsSUFDQUEsSUFDQXlLLEdBQUEsR0FHQXhCLEdBREFqSixFQUFBMFAsR0FBQSxFQUNBTSxFQUFBdkYsRUFFQXVGLEVBQUEzSSxLQUFBMEksSUFBQSxFQUFBLEVBQUFMLEdBRUF6RyxFQUFBd0IsR0FBQSxJQUNBekssSUFDQXlLLEdBQUEsR0FHQXpLLEVBQUEwUCxHQUFBRCxHQUNBRixFQUFBLEVBQ0F2UCxFQUFBeVAsR0FDQXpQLEVBQUEwUCxHQUFBLEdBQ0FILEdBQUF0RyxFQUFBd0IsRUFBQSxHQUFBcEQsS0FBQTBJLElBQUEsRUFBQVYsR0FDQXJQLEdBQUEwUCxJQUVBSCxFQUFBdEcsRUFBQTVCLEtBQUEwSSxJQUFBLEVBQUFMLEVBQUEsR0FBQXJJLEtBQUEwSSxJQUFBLEVBQUFWLEdBQ0FyUCxFQUFBLElBSUFxUCxHQUFBLEVBQUFqTCxFQUFBcUIsRUFBQWhGLEdBQUEsSUFBQThPLEVBQUE5TyxHQUFBbVAsRUFBQUwsR0FBQSxJQUFBRixHQUFBLEdBSUEsSUFGQXJQLEVBQUFBLEdBQUFxUCxFQUFBRSxFQUNBQyxHQUFBSCxFQUNBRyxFQUFBLEVBQUFwTCxFQUFBcUIsRUFBQWhGLEdBQUEsSUFBQVQsRUFBQVMsR0FBQW1QLEVBQUE1UCxHQUFBLElBQUF3UCxHQUFBLEdBRUFwTCxFQUFBcUIsRUFBQWhGLEVBQUFtUCxJQUFBLElBQUF4UCxLQUdBUyxLQUFBa0QsS0FBQXZELEVBQUEsVUFBQSxtQkFBQXlELE1BQUFBLEtBQUEsbUJBQUFDLFFBQUFBLFVBQUExRCxFQUFBLFVBQUFXLE9BQUFnRCxVQUFBLEdBQUFBLFVBQUEsR0FBQUEsVUFBQSxHQUFBQSxVQUFBLEdBQUEsMkNBQUEsb0NBQ0FDLE9BQUEsRUFBQUMsU0FBQSxJQUFBOEwsR0FBQSxTQUFBM1AsRUFBQVEsRUFBQUosSUFDQSxTQUFBSyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxHQTZDQSxRQUFBMk8sTUExQ0EsR0FBQW5QLEdBQUFELEVBQUFKLFVBRUFLLEdBQUFvUCxTQUFBLFdBQ0EsR0FBQUMsR0FBQSxtQkFBQXBNLFNBQ0FBLE9BQUFxTSxhQUNBQyxFQUFBLG1CQUFBdE0sU0FDQUEsT0FBQXVNLGFBQUF2TSxPQUFBd00sZ0JBR0EsSUFBQUosRUFDQSxNQUFBLFVBQUEzUCxHQUFBLE1BQUF1RCxRQUFBcU0sYUFBQTVQLEdBR0EsSUFBQTZQLEVBQUEsQ0FDQSxHQUFBRyxLQVlBLE9BWEF6TSxRQUFBd00saUJBQUEsVUFBQSxTQUFBRSxHQUNBLEdBQUFuRSxHQUFBbUUsRUFBQW5FLE1BQ0EsS0FBQUEsSUFBQXZJLFFBQUEsT0FBQXVJLElBQUEsaUJBQUFtRSxFQUFBdkUsT0FDQXVFLEVBQUFDLGtCQUNBRixFQUFBN1AsT0FBQSxHQUFBLENBQ0EsR0FBQWdRLEdBQUFILEVBQUFJLE9BQ0FELFFBR0EsR0FFQSxTQUFBQSxHQUNBSCxFQUFBbk8sS0FBQXNPLEdBQ0E1TSxPQUFBdU0sWUFBQSxlQUFBLE1BSUEsTUFBQSxVQUFBSyxHQUNBRSxXQUFBRixFQUFBLE9BSUE3UCxFQUFBZ1EsTUFBQSxVQUNBaFEsRUFBQWlRLFNBQUEsRUFDQWpRLEVBQUFrUSxPQUNBbFEsRUFBQW1RLFFBSUFuUSxFQUFBb1EsR0FBQWpCLEVBQ0FuUCxFQUFBcVEsWUFBQWxCLEVBQ0FuUCxFQUFBc1EsS0FBQW5CLEVBQ0FuUCxFQUFBdVEsSUFBQXBCLEVBQ0FuUCxFQUFBd1EsZUFBQXJCLEVBQ0FuUCxFQUFBeVEsbUJBQUF0QixFQUNBblAsRUFBQTBRLEtBQUF2QixFQUVBblAsRUFBQTJRLFFBQUEsU0FBQUMsR0FDQSxLQUFBLElBQUFuUixPQUFBLHFDQUlBTyxFQUFBNlEsSUFBQSxXQUFBLE1BQUEsS0FDQTdRLEVBQUE4USxNQUFBLFNBQUFDLEdBQ0EsS0FBQSxJQUFBdFIsT0FBQSxxQ0FHQUcsS0FBQWtELEtBQUF2RCxFQUFBLFVBQUEsbUJBQUF5RCxNQUFBQSxLQUFBLG1CQUFBQyxRQUFBQSxVQUFBMUQsRUFBQSxVQUFBVyxPQUFBZ0QsVUFBQSxHQUFBQSxVQUFBLEdBQUFBLFVBQUEsR0FBQUEsVUFBQSxHQUFBLDZDQUFBLG9DQUNBQyxPQUFBLEVBQUFDLFNBQUEsSUFBQTROLEdBQUEsU0FBQXpSLEVBQUFRLEVBQUFKLElBQ0EsU0FBQUssRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsR0FDQSxjQUVBLFdBQ0EsR0FBQXlRLE1BR0FDLEVBQUEsU0FBQUMsRUFBQUMsR0FDQUEsRUFHQUQsRUFBQUUsV0FBQUMsVUFBQUMsT0FBQU4sRUFBQU8sWUFGQUwsRUFBQUUsV0FBQUMsVUFBQUcsSUFBQVIsRUFBQU8sYUFNQUUsRUFBQSxTQUFBUCxHQUNBLEdBQUFDLElBQUEsRUFDQU8sRUFBQVIsRUFBQVMsYUFBQSxVQUVBLElBQUEsTUFBQUQsRUFBQSxDQUNBLEdBQUFFLEdBQUEsR0FBQUMsUUFBQUgsRUFBQSxLQUNBRSxHQUFBNUgsS0FBQWtILEVBQUFuSixTQUNBb0osR0FBQSxPQUdBLElBQUFELEVBQUFuSixRQUNBb0osR0FBQSxFQUlBLE9BQUFBLElBQ0FGLEVBQUFDLEdBQUEsSUFDQSxJQUVBRCxFQUFBQyxHQUFBLElBQ0EsSUFJQVksRUFBQSxTQUFBWixHQUNBLEdBQUFhLEdBQUEsR0FBQUYsUUFBQSxpREFBQSxLQUVBLE9BQUFFLEdBQUEvSCxLQUFBa0gsRUFBQW5KLFFBSUFrSixFQUFBQyxHQUFBLElBQ0EsSUFKQUQsRUFBQUMsR0FBQSxJQUNBLElBT0FjLEVBQUEsU0FBQWQsR0FDQSxHQUFBZSxHQUFBLEdBQUFKLFFBQUEsYUFBQSxJQUNBLE9BQUFJLEdBQUFqSSxLQUFBa0gsRUFBQW5KLFFBSUFrSixFQUFBQyxHQUFBLElBQ0EsSUFKQUQsRUFBQUMsR0FBQSxJQUNBLElBT0FnQixFQUFBLFNBQUFDLEdBQ0EsTUFBQSxJQUFBQSxFQUFBbkIsUUFBQW1CLEVBQUFDLGVBQUFySyxPQUFBLE1BQUFvSyxFQUFBbkIsUUFBQW1CLEVBQUFDLGVBQUFySyxPQUNBa0osRUFBQWtCLEdBQUEsSUFDQSxJQUVBbEIsRUFBQWtCLEdBQUEsSUFDQSxJQUlBRSxFQUFBLFNBQUFuQixHQUNBLEdBQUFQLEdBQUFPLEVBQUFTLGFBQUEsUUFDQVcsRUFBQXBCLEVBQUFxQixLQUFBQyxpQkFBQSxzQkFBQTdCLEVBQUEsYUFFQSxPQUFBMkIsR0FBQTFTLFFBQ0FxUixFQUFBQyxHQUFBLElBQ0EsSUFFQUQsRUFBQUMsR0FBQSxJQUNBLElBSUF1QixFQUFBLFNBQUF2QixHQUNBLE1BQUEsS0FBQUEsRUFBQW5KLE9BQ0FrSixFQUFBQyxHQUFBLElBQ0EsSUFFQUQsRUFBQUMsR0FBQSxJQUNBLElBSUF3QixFQUFBLFdBQ0EsR0FBQUMsR0FBQTNCLEVBQUF1QixLQUFBQyxpQkFBQSx3QkFFQUksUUFBQWpULEtBQUFnVCxFQUFBLFNBQUFFLEdBQ0EsR0FBQSxTQUFBQSxFQUFBQyxTQUFBQyxjQUFBLENBQ0EsR0FBQXZQLEdBQUFxUCxFQUFBclAsS0FBQXVQLGFBRUEsU0FBQXZQLElBQ0FxUCxFQUFBckQsaUJBQUEsUUFBQSxXQUNBaUMsRUFBQW9CLEtBRUFBLEVBQUFyRCxpQkFBQSxPQUFBLFdBQ0FpQyxFQUFBb0IsTUFHQSxRQUFBclAsSUFDQXFQLEVBQUFyRCxpQkFBQSxRQUFBLFdBQ0FpQyxFQUFBb0IsS0FFQUEsRUFBQXJELGlCQUFBLE9BQUEsV0FDQWlDLEVBQUFvQixLQUVBQSxFQUFBckQsaUJBQUEsUUFBQSxXQUNBaUQsRUFBQUksTUFHQSxTQUFBclAsSUFDQXFQLEVBQUFyRCxpQkFBQSxRQUFBLFdBQ0FzQyxFQUFBZSxLQUVBQSxFQUFBckQsaUJBQUEsT0FBQSxXQUNBc0MsRUFBQWUsTUFHQSxPQUFBclAsSUFDQXFQLEVBQUFyRCxpQkFBQSxRQUFBLFdBQ0F3QyxFQUFBYSxLQUVBQSxFQUFBckQsaUJBQUEsT0FBQSxXQUNBd0MsRUFBQWEsTUFHQSxZQUFBclAsR0FDQXFQLEVBQUFyRCxpQkFBQSxRQUFBLFdBQ0E2QyxFQUFBUSxLQUdBLFNBQUFyUCxHQUNBcVAsRUFBQXJELGlCQUFBLFFBQUEsV0FDQTZDLEVBQUFRLEtBSUEsWUFBQUEsRUFBQUMsU0FBQUMsZ0JBQ0FGLEVBQUFyRCxpQkFBQSxRQUFBLFdBQ0FpQyxFQUFBb0IsS0FFQUEsRUFBQXJELGlCQUFBLE9BQUEsV0FDQWlDLEVBQUFvQixNQUdBLFVBQUFBLEVBQUFDLFNBQUFDLGVBQ0FGLEVBQUFyRCxpQkFBQSxTQUFBLFdBQ0EwQyxFQUFBVyxRQU1BRyxFQUFBLFdBQ0FoQyxFQUFBdUIsS0FBQS9DLGlCQUFBLFNBQUEsU0FBQTFRLEdBQ0FBLEVBQUFtVSxnQkFFQSxJQUFBQyxJQUFBLEVBR0FQLEVBQUEzQixFQUFBdUIsS0FBQUMsaUJBQUEscUJBR0FXLEdBQUEsRUFDQUMsR0FBQSxFQUNBQyxFQUFBak0sTUFFQSxLQUNBLElBQUEsR0FBQWtNLEdBQUFDLEVBQUFaLEVBQUFhLE9BQUFDLGNBQUFOLEdBQUFHLEVBQUFDLEVBQUFHLFFBQUFDLE1BQUFSLEdBQUEsRUFBQSxDQUNBLEdBQUFOLEdBQUFTLEVBQUF2TCxLQUVBLElBQUEsU0FBQThLLEVBQUFDLFNBQUFDLGNBQUEsQ0FDQSxHQUFBdlAsR0FBQXFQLEVBQUFyUCxLQUFBdVAsYUFDQSxVQUFBdlAsSUFDQXNPLEVBQUFlLEtBQUFLLEdBQUEsSUFFQSxPQUFBMVAsSUFDQXdPLEVBQUFhLEtBQUFLLEdBQUEsSUFFQSxRQUFBMVAsSUFDQWlPLEVBQUFvQixLQUFBSyxHQUFBLElBRUEsWUFBQTFQLElBQ0E2TyxFQUFBUSxLQUFBSyxHQUFBLElBRUEsU0FBQTFQLElBQ0E2TyxFQUFBUSxLQUFBSyxHQUFBLElBRUEsUUFBQTFQLElBQ0FpUCxFQUFBSSxLQUFBSyxHQUFBLElBR0EsWUFBQUwsRUFBQUMsU0FBQUMsZ0JBQ0F0QixFQUFBb0IsS0FBQUssR0FBQSxJQUVBLFVBQUFMLEVBQUFDLFNBQUFDLGdCQUNBYixFQUFBVyxLQUFBSyxHQUFBLEtBR0EsTUFBQXJKLEdBQ0F1SixHQUFBLEVBQ0FDLEVBQUF4SixFQUNBLFFBQ0EsS0FDQXNKLEdBQUFJLEVBQUFBLFdBQ0FBLEVBQUFBLFlBRUEsUUFDQSxHQUFBSCxFQUNBLEtBQUFDLFFBZUFPLEVBQUEsU0FBQUMsR0FNQSxNQUpBN0MsSUFDQXVCLEtBQUFzQixFQUFBdEIsTUFBQSxLQUNBaEIsV0FBQXNDLEVBQUF0QyxZQUFBLFNBRUEsT0FBQVAsRUFBQXVCLE1BQUFuTCxTQUFBNEosRUFBQXVCLE1BQUEsR0FBQXZCLEVBQUF1QixLQUFBM1MsUUFDQStMLFFBQUFtSSxLQUFBLDJDQUNBLElBSUE5QyxFQUFBdUIsS0FBQXdCLGFBQUEsYUFBQSxjQUVBckIsUUFDQU0sTUFHQSxRQUNBWSxLQUFBQSxTQUdBalUsS0FBQWtELEtBQUF2RCxFQUFBLFVBQUEsbUJBQUF5RCxNQUFBQSxLQUFBLG1CQUFBQyxRQUFBQSxVQUFBMUQsRUFBQSxVQUFBVyxPQUFBZ0QsVUFBQSxHQUFBQSxVQUFBLEdBQUFBLFVBQUEsR0FBQUEsVUFBQSxHQUFBLG9CQUFBLE9BQ0FDLE9BQUEsRUFBQUMsU0FBQSxTQUFBIiwiZmlsZSI6InZhbGlkYXRlLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKX12YXIgZj1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwoZi5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxmLGYuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pKHsxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwsQnVmZmVyLF9fYXJndW1lbnQwLF9fYXJndW1lbnQxLF9fYXJndW1lbnQyLF9fYXJndW1lbnQzLF9fZmlsZW5hbWUsX19kaXJuYW1lKXtcbnZhciBsb29rdXAgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLyc7XG5cbjsoZnVuY3Rpb24gKGV4cG9ydHMpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG4gIHZhciBBcnIgPSAodHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnKVxuICAgID8gVWludDhBcnJheVxuICAgIDogQXJyYXlcblxuXHR2YXIgUExVUyAgID0gJysnLmNoYXJDb2RlQXQoMClcblx0dmFyIFNMQVNIICA9ICcvJy5jaGFyQ29kZUF0KDApXG5cdHZhciBOVU1CRVIgPSAnMCcuY2hhckNvZGVBdCgwKVxuXHR2YXIgTE9XRVIgID0gJ2EnLmNoYXJDb2RlQXQoMClcblx0dmFyIFVQUEVSICA9ICdBJy5jaGFyQ29kZUF0KDApXG5cdHZhciBQTFVTX1VSTF9TQUZFID0gJy0nLmNoYXJDb2RlQXQoMClcblx0dmFyIFNMQVNIX1VSTF9TQUZFID0gJ18nLmNoYXJDb2RlQXQoMClcblxuXHRmdW5jdGlvbiBkZWNvZGUgKGVsdCkge1xuXHRcdHZhciBjb2RlID0gZWx0LmNoYXJDb2RlQXQoMClcblx0XHRpZiAoY29kZSA9PT0gUExVUyB8fFxuXHRcdCAgICBjb2RlID09PSBQTFVTX1VSTF9TQUZFKVxuXHRcdFx0cmV0dXJuIDYyIC8vICcrJ1xuXHRcdGlmIChjb2RlID09PSBTTEFTSCB8fFxuXHRcdCAgICBjb2RlID09PSBTTEFTSF9VUkxfU0FGRSlcblx0XHRcdHJldHVybiA2MyAvLyAnLydcblx0XHRpZiAoY29kZSA8IE5VTUJFUilcblx0XHRcdHJldHVybiAtMSAvL25vIG1hdGNoXG5cdFx0aWYgKGNvZGUgPCBOVU1CRVIgKyAxMClcblx0XHRcdHJldHVybiBjb2RlIC0gTlVNQkVSICsgMjYgKyAyNlxuXHRcdGlmIChjb2RlIDwgVVBQRVIgKyAyNilcblx0XHRcdHJldHVybiBjb2RlIC0gVVBQRVJcblx0XHRpZiAoY29kZSA8IExPV0VSICsgMjYpXG5cdFx0XHRyZXR1cm4gY29kZSAtIExPV0VSICsgMjZcblx0fVxuXG5cdGZ1bmN0aW9uIGI2NFRvQnl0ZUFycmF5IChiNjQpIHtcblx0XHR2YXIgaSwgaiwgbCwgdG1wLCBwbGFjZUhvbGRlcnMsIGFyclxuXG5cdFx0aWYgKGI2NC5sZW5ndGggJSA0ID4gMCkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHN0cmluZy4gTGVuZ3RoIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA0Jylcblx0XHR9XG5cblx0XHQvLyB0aGUgbnVtYmVyIG9mIGVxdWFsIHNpZ25zIChwbGFjZSBob2xkZXJzKVxuXHRcdC8vIGlmIHRoZXJlIGFyZSB0d28gcGxhY2Vob2xkZXJzLCB0aGFuIHRoZSB0d28gY2hhcmFjdGVycyBiZWZvcmUgaXRcblx0XHQvLyByZXByZXNlbnQgb25lIGJ5dGVcblx0XHQvLyBpZiB0aGVyZSBpcyBvbmx5IG9uZSwgdGhlbiB0aGUgdGhyZWUgY2hhcmFjdGVycyBiZWZvcmUgaXQgcmVwcmVzZW50IDIgYnl0ZXNcblx0XHQvLyB0aGlzIGlzIGp1c3QgYSBjaGVhcCBoYWNrIHRvIG5vdCBkbyBpbmRleE9mIHR3aWNlXG5cdFx0dmFyIGxlbiA9IGI2NC5sZW5ndGhcblx0XHRwbGFjZUhvbGRlcnMgPSAnPScgPT09IGI2NC5jaGFyQXQobGVuIC0gMikgPyAyIDogJz0nID09PSBiNjQuY2hhckF0KGxlbiAtIDEpID8gMSA6IDBcblxuXHRcdC8vIGJhc2U2NCBpcyA0LzMgKyB1cCB0byB0d28gY2hhcmFjdGVycyBvZiB0aGUgb3JpZ2luYWwgZGF0YVxuXHRcdGFyciA9IG5ldyBBcnIoYjY0Lmxlbmd0aCAqIDMgLyA0IC0gcGxhY2VIb2xkZXJzKVxuXG5cdFx0Ly8gaWYgdGhlcmUgYXJlIHBsYWNlaG9sZGVycywgb25seSBnZXQgdXAgdG8gdGhlIGxhc3QgY29tcGxldGUgNCBjaGFyc1xuXHRcdGwgPSBwbGFjZUhvbGRlcnMgPiAwID8gYjY0Lmxlbmd0aCAtIDQgOiBiNjQubGVuZ3RoXG5cblx0XHR2YXIgTCA9IDBcblxuXHRcdGZ1bmN0aW9uIHB1c2ggKHYpIHtcblx0XHRcdGFycltMKytdID0gdlxuXHRcdH1cblxuXHRcdGZvciAoaSA9IDAsIGogPSAwOyBpIDwgbDsgaSArPSA0LCBqICs9IDMpIHtcblx0XHRcdHRtcCA9IChkZWNvZGUoYjY0LmNoYXJBdChpKSkgPDwgMTgpIHwgKGRlY29kZShiNjQuY2hhckF0KGkgKyAxKSkgPDwgMTIpIHwgKGRlY29kZShiNjQuY2hhckF0KGkgKyAyKSkgPDwgNikgfCBkZWNvZGUoYjY0LmNoYXJBdChpICsgMykpXG5cdFx0XHRwdXNoKCh0bXAgJiAweEZGMDAwMCkgPj4gMTYpXG5cdFx0XHRwdXNoKCh0bXAgJiAweEZGMDApID4+IDgpXG5cdFx0XHRwdXNoKHRtcCAmIDB4RkYpXG5cdFx0fVxuXG5cdFx0aWYgKHBsYWNlSG9sZGVycyA9PT0gMikge1xuXHRcdFx0dG1wID0gKGRlY29kZShiNjQuY2hhckF0KGkpKSA8PCAyKSB8IChkZWNvZGUoYjY0LmNoYXJBdChpICsgMSkpID4+IDQpXG5cdFx0XHRwdXNoKHRtcCAmIDB4RkYpXG5cdFx0fSBlbHNlIGlmIChwbGFjZUhvbGRlcnMgPT09IDEpIHtcblx0XHRcdHRtcCA9IChkZWNvZGUoYjY0LmNoYXJBdChpKSkgPDwgMTApIHwgKGRlY29kZShiNjQuY2hhckF0KGkgKyAxKSkgPDwgNCkgfCAoZGVjb2RlKGI2NC5jaGFyQXQoaSArIDIpKSA+PiAyKVxuXHRcdFx0cHVzaCgodG1wID4+IDgpICYgMHhGRilcblx0XHRcdHB1c2godG1wICYgMHhGRilcblx0XHR9XG5cblx0XHRyZXR1cm4gYXJyXG5cdH1cblxuXHRmdW5jdGlvbiB1aW50OFRvQmFzZTY0ICh1aW50OCkge1xuXHRcdHZhciBpLFxuXHRcdFx0ZXh0cmFCeXRlcyA9IHVpbnQ4Lmxlbmd0aCAlIDMsIC8vIGlmIHdlIGhhdmUgMSBieXRlIGxlZnQsIHBhZCAyIGJ5dGVzXG5cdFx0XHRvdXRwdXQgPSBcIlwiLFxuXHRcdFx0dGVtcCwgbGVuZ3RoXG5cblx0XHRmdW5jdGlvbiBlbmNvZGUgKG51bSkge1xuXHRcdFx0cmV0dXJuIGxvb2t1cC5jaGFyQXQobnVtKVxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIHRyaXBsZXRUb0Jhc2U2NCAobnVtKSB7XG5cdFx0XHRyZXR1cm4gZW5jb2RlKG51bSA+PiAxOCAmIDB4M0YpICsgZW5jb2RlKG51bSA+PiAxMiAmIDB4M0YpICsgZW5jb2RlKG51bSA+PiA2ICYgMHgzRikgKyBlbmNvZGUobnVtICYgMHgzRilcblx0XHR9XG5cblx0XHQvLyBnbyB0aHJvdWdoIHRoZSBhcnJheSBldmVyeSB0aHJlZSBieXRlcywgd2UnbGwgZGVhbCB3aXRoIHRyYWlsaW5nIHN0dWZmIGxhdGVyXG5cdFx0Zm9yIChpID0gMCwgbGVuZ3RoID0gdWludDgubGVuZ3RoIC0gZXh0cmFCeXRlczsgaSA8IGxlbmd0aDsgaSArPSAzKSB7XG5cdFx0XHR0ZW1wID0gKHVpbnQ4W2ldIDw8IDE2KSArICh1aW50OFtpICsgMV0gPDwgOCkgKyAodWludDhbaSArIDJdKVxuXHRcdFx0b3V0cHV0ICs9IHRyaXBsZXRUb0Jhc2U2NCh0ZW1wKVxuXHRcdH1cblxuXHRcdC8vIHBhZCB0aGUgZW5kIHdpdGggemVyb3MsIGJ1dCBtYWtlIHN1cmUgdG8gbm90IGZvcmdldCB0aGUgZXh0cmEgYnl0ZXNcblx0XHRzd2l0Y2ggKGV4dHJhQnl0ZXMpIHtcblx0XHRcdGNhc2UgMTpcblx0XHRcdFx0dGVtcCA9IHVpbnQ4W3VpbnQ4Lmxlbmd0aCAtIDFdXG5cdFx0XHRcdG91dHB1dCArPSBlbmNvZGUodGVtcCA+PiAyKVxuXHRcdFx0XHRvdXRwdXQgKz0gZW5jb2RlKCh0ZW1wIDw8IDQpICYgMHgzRilcblx0XHRcdFx0b3V0cHV0ICs9ICc9PSdcblx0XHRcdFx0YnJlYWtcblx0XHRcdGNhc2UgMjpcblx0XHRcdFx0dGVtcCA9ICh1aW50OFt1aW50OC5sZW5ndGggLSAyXSA8PCA4KSArICh1aW50OFt1aW50OC5sZW5ndGggLSAxXSlcblx0XHRcdFx0b3V0cHV0ICs9IGVuY29kZSh0ZW1wID4+IDEwKVxuXHRcdFx0XHRvdXRwdXQgKz0gZW5jb2RlKCh0ZW1wID4+IDQpICYgMHgzRilcblx0XHRcdFx0b3V0cHV0ICs9IGVuY29kZSgodGVtcCA8PCAyKSAmIDB4M0YpXG5cdFx0XHRcdG91dHB1dCArPSAnPSdcblx0XHRcdFx0YnJlYWtcblx0XHR9XG5cblx0XHRyZXR1cm4gb3V0cHV0XG5cdH1cblxuXHRleHBvcnRzLnRvQnl0ZUFycmF5ID0gYjY0VG9CeXRlQXJyYXlcblx0ZXhwb3J0cy5mcm9tQnl0ZUFycmF5ID0gdWludDhUb0Jhc2U2NFxufSh0eXBlb2YgZXhwb3J0cyA9PT0gJ3VuZGVmaW5lZCcgPyAodGhpcy5iYXNlNjRqcyA9IHt9KSA6IGV4cG9ydHMpKVxuXG59KS5jYWxsKHRoaXMscmVxdWlyZShcImUvVSs5N1wiKSx0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30scmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIsYXJndW1lbnRzWzNdLGFyZ3VtZW50c1s0XSxhcmd1bWVudHNbNV0sYXJndW1lbnRzWzZdLFwiLy4uXFxcXC4uXFxcXG5vZGVfbW9kdWxlc1xcXFxiYXNlNjQtanNcXFxcbGliXFxcXGI2NC5qc1wiLFwiLy4uXFxcXC4uXFxcXG5vZGVfbW9kdWxlc1xcXFxiYXNlNjQtanNcXFxcbGliXCIpXG59LHtcImJ1ZmZlclwiOjIsXCJlL1UrOTdcIjo0fV0sMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3MsZ2xvYmFsLEJ1ZmZlcixfX2FyZ3VtZW50MCxfX2FyZ3VtZW50MSxfX2FyZ3VtZW50MixfX2FyZ3VtZW50MyxfX2ZpbGVuYW1lLF9fZGlybmFtZSl7XG4vKiFcbiAqIFRoZSBidWZmZXIgbW9kdWxlIGZyb20gbm9kZS5qcywgZm9yIHRoZSBicm93c2VyLlxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxmZXJvc3NAZmVyb3NzLm9yZz4gPGh0dHA6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG5cbnZhciBiYXNlNjQgPSByZXF1aXJlKCdiYXNlNjQtanMnKVxudmFyIGllZWU3NTQgPSByZXF1aXJlKCdpZWVlNzU0JylcblxuZXhwb3J0cy5CdWZmZXIgPSBCdWZmZXJcbmV4cG9ydHMuU2xvd0J1ZmZlciA9IEJ1ZmZlclxuZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFUyA9IDUwXG5CdWZmZXIucG9vbFNpemUgPSA4MTkyXG5cbi8qKlxuICogSWYgYEJ1ZmZlci5fdXNlVHlwZWRBcnJheXNgOlxuICogICA9PT0gdHJ1ZSAgICBVc2UgVWludDhBcnJheSBpbXBsZW1lbnRhdGlvbiAoZmFzdGVzdClcbiAqICAgPT09IGZhbHNlICAgVXNlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiAoY29tcGF0aWJsZSBkb3duIHRvIElFNilcbiAqL1xuQnVmZmVyLl91c2VUeXBlZEFycmF5cyA9IChmdW5jdGlvbiAoKSB7XG4gIC8vIERldGVjdCBpZiBicm93c2VyIHN1cHBvcnRzIFR5cGVkIEFycmF5cy4gU3VwcG9ydGVkIGJyb3dzZXJzIGFyZSBJRSAxMCssIEZpcmVmb3ggNCssXG4gIC8vIENocm9tZSA3KywgU2FmYXJpIDUuMSssIE9wZXJhIDExLjYrLCBpT1MgNC4yKy4gSWYgdGhlIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBhZGRpbmdcbiAgLy8gcHJvcGVydGllcyB0byBgVWludDhBcnJheWAgaW5zdGFuY2VzLCB0aGVuIHRoYXQncyB0aGUgc2FtZSBhcyBubyBgVWludDhBcnJheWAgc3VwcG9ydFxuICAvLyBiZWNhdXNlIHdlIG5lZWQgdG8gYmUgYWJsZSB0byBhZGQgYWxsIHRoZSBub2RlIEJ1ZmZlciBBUEkgbWV0aG9kcy4gVGhpcyBpcyBhbiBpc3N1ZVxuICAvLyBpbiBGaXJlZm94IDQtMjkuIE5vdyBmaXhlZDogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njk1NDM4XG4gIHRyeSB7XG4gICAgdmFyIGJ1ZiA9IG5ldyBBcnJheUJ1ZmZlcigwKVxuICAgIHZhciBhcnIgPSBuZXcgVWludDhBcnJheShidWYpXG4gICAgYXJyLmZvbyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDQyIH1cbiAgICByZXR1cm4gNDIgPT09IGFyci5mb28oKSAmJlxuICAgICAgICB0eXBlb2YgYXJyLnN1YmFycmF5ID09PSAnZnVuY3Rpb24nIC8vIENocm9tZSA5LTEwIGxhY2sgYHN1YmFycmF5YFxuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn0pKClcblxuLyoqXG4gKiBDbGFzczogQnVmZmVyXG4gKiA9PT09PT09PT09PT09XG4gKlxuICogVGhlIEJ1ZmZlciBjb25zdHJ1Y3RvciByZXR1cm5zIGluc3RhbmNlcyBvZiBgVWludDhBcnJheWAgdGhhdCBhcmUgYXVnbWVudGVkXG4gKiB3aXRoIGZ1bmN0aW9uIHByb3BlcnRpZXMgZm9yIGFsbCB0aGUgbm9kZSBgQnVmZmVyYCBBUEkgZnVuY3Rpb25zLiBXZSB1c2VcbiAqIGBVaW50OEFycmF5YCBzbyB0aGF0IHNxdWFyZSBicmFja2V0IG5vdGF0aW9uIHdvcmtzIGFzIGV4cGVjdGVkIC0tIGl0IHJldHVybnNcbiAqIGEgc2luZ2xlIG9jdGV0LlxuICpcbiAqIEJ5IGF1Z21lbnRpbmcgdGhlIGluc3RhbmNlcywgd2UgY2FuIGF2b2lkIG1vZGlmeWluZyB0aGUgYFVpbnQ4QXJyYXlgXG4gKiBwcm90b3R5cGUuXG4gKi9cbmZ1bmN0aW9uIEJ1ZmZlciAoc3ViamVjdCwgZW5jb2RpbmcsIG5vWmVybykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgQnVmZmVyKSlcbiAgICByZXR1cm4gbmV3IEJ1ZmZlcihzdWJqZWN0LCBlbmNvZGluZywgbm9aZXJvKVxuXG4gIHZhciB0eXBlID0gdHlwZW9mIHN1YmplY3RcblxuICAvLyBXb3JrYXJvdW5kOiBub2RlJ3MgYmFzZTY0IGltcGxlbWVudGF0aW9uIGFsbG93cyBmb3Igbm9uLXBhZGRlZCBzdHJpbmdzXG4gIC8vIHdoaWxlIGJhc2U2NC1qcyBkb2VzIG5vdC5cbiAgaWYgKGVuY29kaW5nID09PSAnYmFzZTY0JyAmJiB0eXBlID09PSAnc3RyaW5nJykge1xuICAgIHN1YmplY3QgPSBzdHJpbmd0cmltKHN1YmplY3QpXG4gICAgd2hpbGUgKHN1YmplY3QubGVuZ3RoICUgNCAhPT0gMCkge1xuICAgICAgc3ViamVjdCA9IHN1YmplY3QgKyAnPSdcbiAgICB9XG4gIH1cblxuICAvLyBGaW5kIHRoZSBsZW5ndGhcbiAgdmFyIGxlbmd0aFxuICBpZiAodHlwZSA9PT0gJ251bWJlcicpXG4gICAgbGVuZ3RoID0gY29lcmNlKHN1YmplY3QpXG4gIGVsc2UgaWYgKHR5cGUgPT09ICdzdHJpbmcnKVxuICAgIGxlbmd0aCA9IEJ1ZmZlci5ieXRlTGVuZ3RoKHN1YmplY3QsIGVuY29kaW5nKVxuICBlbHNlIGlmICh0eXBlID09PSAnb2JqZWN0JylcbiAgICBsZW5ndGggPSBjb2VyY2Uoc3ViamVjdC5sZW5ndGgpIC8vIGFzc3VtZSB0aGF0IG9iamVjdCBpcyBhcnJheS1saWtlXG4gIGVsc2VcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZpcnN0IGFyZ3VtZW50IG5lZWRzIHRvIGJlIGEgbnVtYmVyLCBhcnJheSBvciBzdHJpbmcuJylcblxuICB2YXIgYnVmXG4gIGlmIChCdWZmZXIuX3VzZVR5cGVkQXJyYXlzKSB7XG4gICAgLy8gUHJlZmVycmVkOiBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZSBmb3IgYmVzdCBwZXJmb3JtYW5jZVxuICAgIGJ1ZiA9IEJ1ZmZlci5fYXVnbWVudChuZXcgVWludDhBcnJheShsZW5ndGgpKVxuICB9IGVsc2Uge1xuICAgIC8vIEZhbGxiYWNrOiBSZXR1cm4gVEhJUyBpbnN0YW5jZSBvZiBCdWZmZXIgKGNyZWF0ZWQgYnkgYG5ld2ApXG4gICAgYnVmID0gdGhpc1xuICAgIGJ1Zi5sZW5ndGggPSBsZW5ndGhcbiAgICBidWYuX2lzQnVmZmVyID0gdHJ1ZVxuICB9XG5cbiAgdmFyIGlcbiAgaWYgKEJ1ZmZlci5fdXNlVHlwZWRBcnJheXMgJiYgdHlwZW9mIHN1YmplY3QuYnl0ZUxlbmd0aCA9PT0gJ251bWJlcicpIHtcbiAgICAvLyBTcGVlZCBvcHRpbWl6YXRpb24gLS0gdXNlIHNldCBpZiB3ZSdyZSBjb3B5aW5nIGZyb20gYSB0eXBlZCBhcnJheVxuICAgIGJ1Zi5fc2V0KHN1YmplY3QpXG4gIH0gZWxzZSBpZiAoaXNBcnJheWlzaChzdWJqZWN0KSkge1xuICAgIC8vIFRyZWF0IGFycmF5LWlzaCBvYmplY3RzIGFzIGEgYnl0ZSBhcnJheVxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihzdWJqZWN0KSlcbiAgICAgICAgYnVmW2ldID0gc3ViamVjdC5yZWFkVUludDgoaSlcbiAgICAgIGVsc2VcbiAgICAgICAgYnVmW2ldID0gc3ViamVjdFtpXVxuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlID09PSAnc3RyaW5nJykge1xuICAgIGJ1Zi53cml0ZShzdWJqZWN0LCAwLCBlbmNvZGluZylcbiAgfSBlbHNlIGlmICh0eXBlID09PSAnbnVtYmVyJyAmJiAhQnVmZmVyLl91c2VUeXBlZEFycmF5cyAmJiAhbm9aZXJvKSB7XG4gICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBidWZbaV0gPSAwXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ1ZlxufVxuXG4vLyBTVEFUSUMgTUVUSE9EU1xuLy8gPT09PT09PT09PT09PT1cblxuQnVmZmVyLmlzRW5jb2RpbmcgPSBmdW5jdGlvbiAoZW5jb2RpbmcpIHtcbiAgc3dpdGNoIChTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKCkpIHtcbiAgICBjYXNlICdoZXgnOlxuICAgIGNhc2UgJ3V0ZjgnOlxuICAgIGNhc2UgJ3V0Zi04JzpcbiAgICBjYXNlICdhc2NpaSc6XG4gICAgY2FzZSAnYmluYXJ5JzpcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgIGNhc2UgJ3Jhdyc6XG4gICAgY2FzZSAndWNzMic6XG4gICAgY2FzZSAndWNzLTInOlxuICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgIHJldHVybiB0cnVlXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbkJ1ZmZlci5pc0J1ZmZlciA9IGZ1bmN0aW9uIChiKSB7XG4gIHJldHVybiAhIShiICE9PSBudWxsICYmIGIgIT09IHVuZGVmaW5lZCAmJiBiLl9pc0J1ZmZlcilcbn1cblxuQnVmZmVyLmJ5dGVMZW5ndGggPSBmdW5jdGlvbiAoc3RyLCBlbmNvZGluZykge1xuICB2YXIgcmV0XG4gIHN0ciA9IHN0ciArICcnXG4gIHN3aXRjaCAoZW5jb2RpbmcgfHwgJ3V0ZjgnKSB7XG4gICAgY2FzZSAnaGV4JzpcbiAgICAgIHJldCA9IHN0ci5sZW5ndGggLyAyXG4gICAgICBicmVha1xuICAgIGNhc2UgJ3V0ZjgnOlxuICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgIHJldCA9IHV0ZjhUb0J5dGVzKHN0cikubGVuZ3RoXG4gICAgICBicmVha1xuICAgIGNhc2UgJ2FzY2lpJzpcbiAgICBjYXNlICdiaW5hcnknOlxuICAgIGNhc2UgJ3Jhdyc6XG4gICAgICByZXQgPSBzdHIubGVuZ3RoXG4gICAgICBicmVha1xuICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICByZXQgPSBiYXNlNjRUb0J5dGVzKHN0cikubGVuZ3RoXG4gICAgICBicmVha1xuICAgIGNhc2UgJ3VjczInOlxuICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICByZXQgPSBzdHIubGVuZ3RoICogMlxuICAgICAgYnJlYWtcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIGVuY29kaW5nJylcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbkJ1ZmZlci5jb25jYXQgPSBmdW5jdGlvbiAobGlzdCwgdG90YWxMZW5ndGgpIHtcbiAgYXNzZXJ0KGlzQXJyYXkobGlzdCksICdVc2FnZTogQnVmZmVyLmNvbmNhdChsaXN0LCBbdG90YWxMZW5ndGhdKVxcbicgK1xuICAgICAgJ2xpc3Qgc2hvdWxkIGJlIGFuIEFycmF5LicpXG5cbiAgaWYgKGxpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIG5ldyBCdWZmZXIoMClcbiAgfSBlbHNlIGlmIChsaXN0Lmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBsaXN0WzBdXG4gIH1cblxuICB2YXIgaVxuICBpZiAodHlwZW9mIHRvdGFsTGVuZ3RoICE9PSAnbnVtYmVyJykge1xuICAgIHRvdGFsTGVuZ3RoID0gMFxuICAgIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICB0b3RhbExlbmd0aCArPSBsaXN0W2ldLmxlbmd0aFxuICAgIH1cbiAgfVxuXG4gIHZhciBidWYgPSBuZXcgQnVmZmVyKHRvdGFsTGVuZ3RoKVxuICB2YXIgcG9zID0gMFxuICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXVxuICAgIGl0ZW0uY29weShidWYsIHBvcylcbiAgICBwb3MgKz0gaXRlbS5sZW5ndGhcbiAgfVxuICByZXR1cm4gYnVmXG59XG5cbi8vIEJVRkZFUiBJTlNUQU5DRSBNRVRIT0RTXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PVxuXG5mdW5jdGlvbiBfaGV4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICBvZmZzZXQgPSBOdW1iZXIob2Zmc2V0KSB8fCAwXG4gIHZhciByZW1haW5pbmcgPSBidWYubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmICghbGVuZ3RoKSB7XG4gICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gIH0gZWxzZSB7XG4gICAgbGVuZ3RoID0gTnVtYmVyKGxlbmd0aClcbiAgICBpZiAobGVuZ3RoID4gcmVtYWluaW5nKSB7XG4gICAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgICB9XG4gIH1cblxuICAvLyBtdXN0IGJlIGFuIGV2ZW4gbnVtYmVyIG9mIGRpZ2l0c1xuICB2YXIgc3RyTGVuID0gc3RyaW5nLmxlbmd0aFxuICBhc3NlcnQoc3RyTGVuICUgMiA9PT0gMCwgJ0ludmFsaWQgaGV4IHN0cmluZycpXG5cbiAgaWYgKGxlbmd0aCA+IHN0ckxlbiAvIDIpIHtcbiAgICBsZW5ndGggPSBzdHJMZW4gLyAyXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIHZhciBieXRlID0gcGFyc2VJbnQoc3RyaW5nLnN1YnN0cihpICogMiwgMiksIDE2KVxuICAgIGFzc2VydCghaXNOYU4oYnl0ZSksICdJbnZhbGlkIGhleCBzdHJpbmcnKVxuICAgIGJ1ZltvZmZzZXQgKyBpXSA9IGJ5dGVcbiAgfVxuICBCdWZmZXIuX2NoYXJzV3JpdHRlbiA9IGkgKiAyXG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIF91dGY4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICB2YXIgY2hhcnNXcml0dGVuID0gQnVmZmVyLl9jaGFyc1dyaXR0ZW4gPVxuICAgIGJsaXRCdWZmZXIodXRmOFRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbiAgcmV0dXJuIGNoYXJzV3JpdHRlblxufVxuXG5mdW5jdGlvbiBfYXNjaWlXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHZhciBjaGFyc1dyaXR0ZW4gPSBCdWZmZXIuX2NoYXJzV3JpdHRlbiA9XG4gICAgYmxpdEJ1ZmZlcihhc2NpaVRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbiAgcmV0dXJuIGNoYXJzV3JpdHRlblxufVxuXG5mdW5jdGlvbiBfYmluYXJ5V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gX2FzY2lpV3JpdGUoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBfYmFzZTY0V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICB2YXIgY2hhcnNXcml0dGVuID0gQnVmZmVyLl9jaGFyc1dyaXR0ZW4gPVxuICAgIGJsaXRCdWZmZXIoYmFzZTY0VG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxuICByZXR1cm4gY2hhcnNXcml0dGVuXG59XG5cbmZ1bmN0aW9uIF91dGYxNmxlV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICB2YXIgY2hhcnNXcml0dGVuID0gQnVmZmVyLl9jaGFyc1dyaXR0ZW4gPVxuICAgIGJsaXRCdWZmZXIodXRmMTZsZVRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbiAgcmV0dXJuIGNoYXJzV3JpdHRlblxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKHN0cmluZywgb2Zmc2V0LCBsZW5ndGgsIGVuY29kaW5nKSB7XG4gIC8vIFN1cHBvcnQgYm90aCAoc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCwgZW5jb2RpbmcpXG4gIC8vIGFuZCB0aGUgbGVnYWN5IChzdHJpbmcsIGVuY29kaW5nLCBvZmZzZXQsIGxlbmd0aClcbiAgaWYgKGlzRmluaXRlKG9mZnNldCkpIHtcbiAgICBpZiAoIWlzRmluaXRlKGxlbmd0aCkpIHtcbiAgICAgIGVuY29kaW5nID0gbGVuZ3RoXG4gICAgICBsZW5ndGggPSB1bmRlZmluZWRcbiAgICB9XG4gIH0gZWxzZSB7ICAvLyBsZWdhY3lcbiAgICB2YXIgc3dhcCA9IGVuY29kaW5nXG4gICAgZW5jb2RpbmcgPSBvZmZzZXRcbiAgICBvZmZzZXQgPSBsZW5ndGhcbiAgICBsZW5ndGggPSBzd2FwXG4gIH1cblxuICBvZmZzZXQgPSBOdW1iZXIob2Zmc2V0KSB8fCAwXG4gIHZhciByZW1haW5pbmcgPSB0aGlzLmxlbmd0aCAtIG9mZnNldFxuICBpZiAoIWxlbmd0aCkge1xuICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICB9IGVsc2Uge1xuICAgIGxlbmd0aCA9IE51bWJlcihsZW5ndGgpXG4gICAgaWYgKGxlbmd0aCA+IHJlbWFpbmluZykge1xuICAgICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gICAgfVxuICB9XG4gIGVuY29kaW5nID0gU3RyaW5nKGVuY29kaW5nIHx8ICd1dGY4JykudG9Mb3dlckNhc2UoKVxuXG4gIHZhciByZXRcbiAgc3dpdGNoIChlbmNvZGluZykge1xuICAgIGNhc2UgJ2hleCc6XG4gICAgICByZXQgPSBfaGV4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAndXRmOCc6XG4gICAgY2FzZSAndXRmLTgnOlxuICAgICAgcmV0ID0gX3V0ZjhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdhc2NpaSc6XG4gICAgICByZXQgPSBfYXNjaWlXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdiaW5hcnknOlxuICAgICAgcmV0ID0gX2JpbmFyeVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG4gICAgICBicmVha1xuICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICByZXQgPSBfYmFzZTY0V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAndWNzMic6XG4gICAgY2FzZSAndWNzLTInOlxuICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgIHJldCA9IF91dGYxNmxlV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcbiAgICAgIGJyZWFrXG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBlbmNvZGluZycpXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKGVuY29kaW5nLCBzdGFydCwgZW5kKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuXG4gIGVuY29kaW5nID0gU3RyaW5nKGVuY29kaW5nIHx8ICd1dGY4JykudG9Mb3dlckNhc2UoKVxuICBzdGFydCA9IE51bWJlcihzdGFydCkgfHwgMFxuICBlbmQgPSAoZW5kICE9PSB1bmRlZmluZWQpXG4gICAgPyBOdW1iZXIoZW5kKVxuICAgIDogZW5kID0gc2VsZi5sZW5ndGhcblxuICAvLyBGYXN0cGF0aCBlbXB0eSBzdHJpbmdzXG4gIGlmIChlbmQgPT09IHN0YXJ0KVxuICAgIHJldHVybiAnJ1xuXG4gIHZhciByZXRcbiAgc3dpdGNoIChlbmNvZGluZykge1xuICAgIGNhc2UgJ2hleCc6XG4gICAgICByZXQgPSBfaGV4U2xpY2Uoc2VsZiwgc3RhcnQsIGVuZClcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAndXRmOCc6XG4gICAgY2FzZSAndXRmLTgnOlxuICAgICAgcmV0ID0gX3V0ZjhTbGljZShzZWxmLCBzdGFydCwgZW5kKVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdhc2NpaSc6XG4gICAgICByZXQgPSBfYXNjaWlTbGljZShzZWxmLCBzdGFydCwgZW5kKVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdiaW5hcnknOlxuICAgICAgcmV0ID0gX2JpbmFyeVNsaWNlKHNlbGYsIHN0YXJ0LCBlbmQpXG4gICAgICBicmVha1xuICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICByZXQgPSBfYmFzZTY0U2xpY2Uoc2VsZiwgc3RhcnQsIGVuZClcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAndWNzMic6XG4gICAgY2FzZSAndWNzLTInOlxuICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgIHJldCA9IF91dGYxNmxlU2xpY2Uoc2VsZiwgc3RhcnQsIGVuZClcbiAgICAgIGJyZWFrXG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBlbmNvZGluZycpXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnQnVmZmVyJyxcbiAgICBkYXRhOiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0aGlzLl9hcnIgfHwgdGhpcywgMClcbiAgfVxufVxuXG4vLyBjb3B5KHRhcmdldEJ1ZmZlciwgdGFyZ2V0U3RhcnQ9MCwgc291cmNlU3RhcnQ9MCwgc291cmNlRW5kPWJ1ZmZlci5sZW5ndGgpXG5CdWZmZXIucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAodGFyZ2V0LCB0YXJnZXRfc3RhcnQsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHNvdXJjZSA9IHRoaXNcblxuICBpZiAoIXN0YXJ0KSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgJiYgZW5kICE9PSAwKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAoIXRhcmdldF9zdGFydCkgdGFyZ2V0X3N0YXJ0ID0gMFxuXG4gIC8vIENvcHkgMCBieXRlczsgd2UncmUgZG9uZVxuICBpZiAoZW5kID09PSBzdGFydCkgcmV0dXJuXG4gIGlmICh0YXJnZXQubGVuZ3RoID09PSAwIHx8IHNvdXJjZS5sZW5ndGggPT09IDApIHJldHVyblxuXG4gIC8vIEZhdGFsIGVycm9yIGNvbmRpdGlvbnNcbiAgYXNzZXJ0KGVuZCA+PSBzdGFydCwgJ3NvdXJjZUVuZCA8IHNvdXJjZVN0YXJ0JylcbiAgYXNzZXJ0KHRhcmdldF9zdGFydCA+PSAwICYmIHRhcmdldF9zdGFydCA8IHRhcmdldC5sZW5ndGgsXG4gICAgICAndGFyZ2V0U3RhcnQgb3V0IG9mIGJvdW5kcycpXG4gIGFzc2VydChzdGFydCA+PSAwICYmIHN0YXJ0IDwgc291cmNlLmxlbmd0aCwgJ3NvdXJjZVN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICBhc3NlcnQoZW5kID49IDAgJiYgZW5kIDw9IHNvdXJjZS5sZW5ndGgsICdzb3VyY2VFbmQgb3V0IG9mIGJvdW5kcycpXG5cbiAgLy8gQXJlIHdlIG9vYj9cbiAgaWYgKGVuZCA+IHRoaXMubGVuZ3RoKVxuICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0X3N0YXJ0IDwgZW5kIC0gc3RhcnQpXG4gICAgZW5kID0gdGFyZ2V0Lmxlbmd0aCAtIHRhcmdldF9zdGFydCArIHN0YXJ0XG5cbiAgdmFyIGxlbiA9IGVuZCAtIHN0YXJ0XG5cbiAgaWYgKGxlbiA8IDEwMCB8fCAhQnVmZmVyLl91c2VUeXBlZEFycmF5cykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspXG4gICAgICB0YXJnZXRbaSArIHRhcmdldF9zdGFydF0gPSB0aGlzW2kgKyBzdGFydF1cbiAgfSBlbHNlIHtcbiAgICB0YXJnZXQuX3NldCh0aGlzLnN1YmFycmF5KHN0YXJ0LCBzdGFydCArIGxlbiksIHRhcmdldF9zdGFydClcbiAgfVxufVxuXG5mdW5jdGlvbiBfYmFzZTY0U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBpZiAoc3RhcnQgPT09IDAgJiYgZW5kID09PSBidWYubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1ZilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmLnNsaWNlKHN0YXJ0LCBlbmQpKVxuICB9XG59XG5cbmZ1bmN0aW9uIF91dGY4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmVzID0gJydcbiAgdmFyIHRtcCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKykge1xuICAgIGlmIChidWZbaV0gPD0gMHg3Rikge1xuICAgICAgcmVzICs9IGRlY29kZVV0ZjhDaGFyKHRtcCkgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSlcbiAgICAgIHRtcCA9ICcnXG4gICAgfSBlbHNlIHtcbiAgICAgIHRtcCArPSAnJScgKyBidWZbaV0udG9TdHJpbmcoMTYpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlcyArIGRlY29kZVV0ZjhDaGFyKHRtcClcbn1cblxuZnVuY3Rpb24gX2FzY2lpU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSsrKVxuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSlcbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBfYmluYXJ5U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICByZXR1cm4gX2FzY2lpU2xpY2UoYnVmLCBzdGFydCwgZW5kKVxufVxuXG5mdW5jdGlvbiBfaGV4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gYnVmLmxlbmd0aFxuXG4gIGlmICghc3RhcnQgfHwgc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgfHwgZW5kIDwgMCB8fCBlbmQgPiBsZW4pIGVuZCA9IGxlblxuXG4gIHZhciBvdXQgPSAnJ1xuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKykge1xuICAgIG91dCArPSB0b0hleChidWZbaV0pXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuXG5mdW5jdGlvbiBfdXRmMTZsZVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGJ5dGVzID0gYnVmLnNsaWNlKHN0YXJ0LCBlbmQpXG4gIHZhciByZXMgPSAnJ1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0gKyBieXRlc1tpKzFdICogMjU2KVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uIChzdGFydCwgZW5kKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBzdGFydCA9IGNsYW1wKHN0YXJ0LCBsZW4sIDApXG4gIGVuZCA9IGNsYW1wKGVuZCwgbGVuLCBsZW4pXG5cbiAgaWYgKEJ1ZmZlci5fdXNlVHlwZWRBcnJheXMpIHtcbiAgICByZXR1cm4gQnVmZmVyLl9hdWdtZW50KHRoaXMuc3ViYXJyYXkoc3RhcnQsIGVuZCkpXG4gIH0gZWxzZSB7XG4gICAgdmFyIHNsaWNlTGVuID0gZW5kIC0gc3RhcnRcbiAgICB2YXIgbmV3QnVmID0gbmV3IEJ1ZmZlcihzbGljZUxlbiwgdW5kZWZpbmVkLCB0cnVlKVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpY2VMZW47IGkrKykge1xuICAgICAgbmV3QnVmW2ldID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICAgIHJldHVybiBuZXdCdWZcbiAgfVxufVxuXG4vLyBgZ2V0YCB3aWxsIGJlIHJlbW92ZWQgaW4gTm9kZSAwLjEzK1xuQnVmZmVyLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAob2Zmc2V0KSB7XG4gIGNvbnNvbGUubG9nKCcuZ2V0KCkgaXMgZGVwcmVjYXRlZC4gQWNjZXNzIHVzaW5nIGFycmF5IGluZGV4ZXMgaW5zdGVhZC4nKVxuICByZXR1cm4gdGhpcy5yZWFkVUludDgob2Zmc2V0KVxufVxuXG4vLyBgc2V0YCB3aWxsIGJlIHJlbW92ZWQgaW4gTm9kZSAwLjEzK1xuQnVmZmVyLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAodiwgb2Zmc2V0KSB7XG4gIGNvbnNvbGUubG9nKCcuc2V0KCkgaXMgZGVwcmVjYXRlZC4gQWNjZXNzIHVzaW5nIGFycmF5IGluZGV4ZXMgaW5zdGVhZC4nKVxuICByZXR1cm4gdGhpcy53cml0ZVVJbnQ4KHYsIG9mZnNldClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDggPSBmdW5jdGlvbiAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgYXNzZXJ0KG9mZnNldCAhPT0gdW5kZWZpbmVkICYmIG9mZnNldCAhPT0gbnVsbCwgJ21pc3Npbmcgb2Zmc2V0JylcbiAgICBhc3NlcnQob2Zmc2V0IDwgdGhpcy5sZW5ndGgsICdUcnlpbmcgdG8gcmVhZCBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG4gIH1cblxuICBpZiAob2Zmc2V0ID49IHRoaXMubGVuZ3RoKVxuICAgIHJldHVyblxuXG4gIHJldHVybiB0aGlzW29mZnNldF1cbn1cblxuZnVuY3Rpb24gX3JlYWRVSW50MTYgKGJ1Ziwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBhc3NlcnQodHlwZW9mIGxpdHRsZUVuZGlhbiA9PT0gJ2Jvb2xlYW4nLCAnbWlzc2luZyBvciBpbnZhbGlkIGVuZGlhbicpXG4gICAgYXNzZXJ0KG9mZnNldCAhPT0gdW5kZWZpbmVkICYmIG9mZnNldCAhPT0gbnVsbCwgJ21pc3Npbmcgb2Zmc2V0JylcbiAgICBhc3NlcnQob2Zmc2V0ICsgMSA8IGJ1Zi5sZW5ndGgsICdUcnlpbmcgdG8gcmVhZCBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG4gIH1cblxuICB2YXIgbGVuID0gYnVmLmxlbmd0aFxuICBpZiAob2Zmc2V0ID49IGxlbilcbiAgICByZXR1cm5cblxuICB2YXIgdmFsXG4gIGlmIChsaXR0bGVFbmRpYW4pIHtcbiAgICB2YWwgPSBidWZbb2Zmc2V0XVxuICAgIGlmIChvZmZzZXQgKyAxIDwgbGVuKVxuICAgICAgdmFsIHw9IGJ1ZltvZmZzZXQgKyAxXSA8PCA4XG4gIH0gZWxzZSB7XG4gICAgdmFsID0gYnVmW29mZnNldF0gPDwgOFxuICAgIGlmIChvZmZzZXQgKyAxIDwgbGVuKVxuICAgICAgdmFsIHw9IGJ1ZltvZmZzZXQgKyAxXVxuICB9XG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2TEUgPSBmdW5jdGlvbiAob2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gX3JlYWRVSW50MTYodGhpcywgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2QkUgPSBmdW5jdGlvbiAob2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gX3JlYWRVSW50MTYodGhpcywgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbmZ1bmN0aW9uIF9yZWFkVUludDMyIChidWYsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBsaXR0bGVFbmRpYW4gPT09ICdib29sZWFuJywgJ21pc3Npbmcgb3IgaW52YWxpZCBlbmRpYW4nKVxuICAgIGFzc2VydChvZmZzZXQgIT09IHVuZGVmaW5lZCAmJiBvZmZzZXQgIT09IG51bGwsICdtaXNzaW5nIG9mZnNldCcpXG4gICAgYXNzZXJ0KG9mZnNldCArIDMgPCBidWYubGVuZ3RoLCAnVHJ5aW5nIHRvIHJlYWQgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKVxuICB9XG5cbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGhcbiAgaWYgKG9mZnNldCA+PSBsZW4pXG4gICAgcmV0dXJuXG5cbiAgdmFyIHZhbFxuICBpZiAobGl0dGxlRW5kaWFuKSB7XG4gICAgaWYgKG9mZnNldCArIDIgPCBsZW4pXG4gICAgICB2YWwgPSBidWZbb2Zmc2V0ICsgMl0gPDwgMTZcbiAgICBpZiAob2Zmc2V0ICsgMSA8IGxlbilcbiAgICAgIHZhbCB8PSBidWZbb2Zmc2V0ICsgMV0gPDwgOFxuICAgIHZhbCB8PSBidWZbb2Zmc2V0XVxuICAgIGlmIChvZmZzZXQgKyAzIDwgbGVuKVxuICAgICAgdmFsID0gdmFsICsgKGJ1ZltvZmZzZXQgKyAzXSA8PCAyNCA+Pj4gMClcbiAgfSBlbHNlIHtcbiAgICBpZiAob2Zmc2V0ICsgMSA8IGxlbilcbiAgICAgIHZhbCA9IGJ1ZltvZmZzZXQgKyAxXSA8PCAxNlxuICAgIGlmIChvZmZzZXQgKyAyIDwgbGVuKVxuICAgICAgdmFsIHw9IGJ1ZltvZmZzZXQgKyAyXSA8PCA4XG4gICAgaWYgKG9mZnNldCArIDMgPCBsZW4pXG4gICAgICB2YWwgfD0gYnVmW29mZnNldCArIDNdXG4gICAgdmFsID0gdmFsICsgKGJ1ZltvZmZzZXRdIDw8IDI0ID4+PiAwKVxuICB9XG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyTEUgPSBmdW5jdGlvbiAob2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gX3JlYWRVSW50MzIodGhpcywgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyQkUgPSBmdW5jdGlvbiAob2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gX3JlYWRVSW50MzIodGhpcywgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDggPSBmdW5jdGlvbiAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgYXNzZXJ0KG9mZnNldCAhPT0gdW5kZWZpbmVkICYmIG9mZnNldCAhPT0gbnVsbCxcbiAgICAgICAgJ21pc3Npbmcgb2Zmc2V0JylcbiAgICBhc3NlcnQob2Zmc2V0IDwgdGhpcy5sZW5ndGgsICdUcnlpbmcgdG8gcmVhZCBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG4gIH1cblxuICBpZiAob2Zmc2V0ID49IHRoaXMubGVuZ3RoKVxuICAgIHJldHVyblxuXG4gIHZhciBuZWcgPSB0aGlzW29mZnNldF0gJiAweDgwXG4gIGlmIChuZWcpXG4gICAgcmV0dXJuICgweGZmIC0gdGhpc1tvZmZzZXRdICsgMSkgKiAtMVxuICBlbHNlXG4gICAgcmV0dXJuIHRoaXNbb2Zmc2V0XVxufVxuXG5mdW5jdGlvbiBfcmVhZEludDE2IChidWYsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBsaXR0bGVFbmRpYW4gPT09ICdib29sZWFuJywgJ21pc3Npbmcgb3IgaW52YWxpZCBlbmRpYW4nKVxuICAgIGFzc2VydChvZmZzZXQgIT09IHVuZGVmaW5lZCAmJiBvZmZzZXQgIT09IG51bGwsICdtaXNzaW5nIG9mZnNldCcpXG4gICAgYXNzZXJ0KG9mZnNldCArIDEgPCBidWYubGVuZ3RoLCAnVHJ5aW5nIHRvIHJlYWQgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKVxuICB9XG5cbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGhcbiAgaWYgKG9mZnNldCA+PSBsZW4pXG4gICAgcmV0dXJuXG5cbiAgdmFyIHZhbCA9IF9yZWFkVUludDE2KGJ1Ziwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIHRydWUpXG4gIHZhciBuZWcgPSB2YWwgJiAweDgwMDBcbiAgaWYgKG5lZylcbiAgICByZXR1cm4gKDB4ZmZmZiAtIHZhbCArIDEpICogLTFcbiAgZWxzZVxuICAgIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZMRSA9IGZ1bmN0aW9uIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiBfcmVhZEludDE2KHRoaXMsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2QkUgPSBmdW5jdGlvbiAob2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gX3JlYWRJbnQxNih0aGlzLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuZnVuY3Rpb24gX3JlYWRJbnQzMiAoYnVmLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGFzc2VydCh0eXBlb2YgbGl0dGxlRW5kaWFuID09PSAnYm9vbGVhbicsICdtaXNzaW5nIG9yIGludmFsaWQgZW5kaWFuJylcbiAgICBhc3NlcnQob2Zmc2V0ICE9PSB1bmRlZmluZWQgJiYgb2Zmc2V0ICE9PSBudWxsLCAnbWlzc2luZyBvZmZzZXQnKVxuICAgIGFzc2VydChvZmZzZXQgKyAzIDwgYnVmLmxlbmd0aCwgJ1RyeWluZyB0byByZWFkIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbiAgfVxuXG4gIHZhciBsZW4gPSBidWYubGVuZ3RoXG4gIGlmIChvZmZzZXQgPj0gbGVuKVxuICAgIHJldHVyblxuXG4gIHZhciB2YWwgPSBfcmVhZFVJbnQzMihidWYsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCB0cnVlKVxuICB2YXIgbmVnID0gdmFsICYgMHg4MDAwMDAwMFxuICBpZiAobmVnKVxuICAgIHJldHVybiAoMHhmZmZmZmZmZiAtIHZhbCArIDEpICogLTFcbiAgZWxzZVxuICAgIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJMRSA9IGZ1bmN0aW9uIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiBfcmVhZEludDMyKHRoaXMsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyQkUgPSBmdW5jdGlvbiAob2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gX3JlYWRJbnQzMih0aGlzLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuZnVuY3Rpb24gX3JlYWRGbG9hdCAoYnVmLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGFzc2VydCh0eXBlb2YgbGl0dGxlRW5kaWFuID09PSAnYm9vbGVhbicsICdtaXNzaW5nIG9yIGludmFsaWQgZW5kaWFuJylcbiAgICBhc3NlcnQob2Zmc2V0ICsgMyA8IGJ1Zi5sZW5ndGgsICdUcnlpbmcgdG8gcmVhZCBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG4gIH1cblxuICByZXR1cm4gaWVlZTc1NC5yZWFkKGJ1Ziwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdExFID0gZnVuY3Rpb24gKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIF9yZWFkRmxvYXQodGhpcywgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRCRSA9IGZ1bmN0aW9uIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiBfcmVhZEZsb2F0KHRoaXMsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG5mdW5jdGlvbiBfcmVhZERvdWJsZSAoYnVmLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGFzc2VydCh0eXBlb2YgbGl0dGxlRW5kaWFuID09PSAnYm9vbGVhbicsICdtaXNzaW5nIG9yIGludmFsaWQgZW5kaWFuJylcbiAgICBhc3NlcnQob2Zmc2V0ICsgNyA8IGJ1Zi5sZW5ndGgsICdUcnlpbmcgdG8gcmVhZCBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG4gIH1cblxuICByZXR1cm4gaWVlZTc1NC5yZWFkKGJ1Ziwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDUyLCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVMRSA9IGZ1bmN0aW9uIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiBfcmVhZERvdWJsZSh0aGlzLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVCRSA9IGZ1bmN0aW9uIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiBfcmVhZERvdWJsZSh0aGlzLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQ4ID0gZnVuY3Rpb24gKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBhc3NlcnQodmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZSAhPT0gbnVsbCwgJ21pc3NpbmcgdmFsdWUnKVxuICAgIGFzc2VydChvZmZzZXQgIT09IHVuZGVmaW5lZCAmJiBvZmZzZXQgIT09IG51bGwsICdtaXNzaW5nIG9mZnNldCcpXG4gICAgYXNzZXJ0KG9mZnNldCA8IHRoaXMubGVuZ3RoLCAndHJ5aW5nIHRvIHdyaXRlIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbiAgICB2ZXJpZnVpbnQodmFsdWUsIDB4ZmYpXG4gIH1cblxuICBpZiAob2Zmc2V0ID49IHRoaXMubGVuZ3RoKSByZXR1cm5cblxuICB0aGlzW29mZnNldF0gPSB2YWx1ZVxufVxuXG5mdW5jdGlvbiBfd3JpdGVVSW50MTYgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgYXNzZXJ0KHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IG51bGwsICdtaXNzaW5nIHZhbHVlJylcbiAgICBhc3NlcnQodHlwZW9mIGxpdHRsZUVuZGlhbiA9PT0gJ2Jvb2xlYW4nLCAnbWlzc2luZyBvciBpbnZhbGlkIGVuZGlhbicpXG4gICAgYXNzZXJ0KG9mZnNldCAhPT0gdW5kZWZpbmVkICYmIG9mZnNldCAhPT0gbnVsbCwgJ21pc3Npbmcgb2Zmc2V0JylcbiAgICBhc3NlcnQob2Zmc2V0ICsgMSA8IGJ1Zi5sZW5ndGgsICd0cnlpbmcgdG8gd3JpdGUgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKVxuICAgIHZlcmlmdWludCh2YWx1ZSwgMHhmZmZmKVxuICB9XG5cbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGhcbiAgaWYgKG9mZnNldCA+PSBsZW4pXG4gICAgcmV0dXJuXG5cbiAgZm9yICh2YXIgaSA9IDAsIGogPSBNYXRoLm1pbihsZW4gLSBvZmZzZXQsIDIpOyBpIDwgajsgaSsrKSB7XG4gICAgYnVmW29mZnNldCArIGldID1cbiAgICAgICAgKHZhbHVlICYgKDB4ZmYgPDwgKDggKiAobGl0dGxlRW5kaWFuID8gaSA6IDEgLSBpKSkpKSA+Pj5cbiAgICAgICAgICAgIChsaXR0bGVFbmRpYW4gPyBpIDogMSAtIGkpICogOFxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZMRSA9IGZ1bmN0aW9uICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICBfd3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZCRSA9IGZ1bmN0aW9uICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICBfd3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG5mdW5jdGlvbiBfd3JpdGVVSW50MzIgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgYXNzZXJ0KHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IG51bGwsICdtaXNzaW5nIHZhbHVlJylcbiAgICBhc3NlcnQodHlwZW9mIGxpdHRsZUVuZGlhbiA9PT0gJ2Jvb2xlYW4nLCAnbWlzc2luZyBvciBpbnZhbGlkIGVuZGlhbicpXG4gICAgYXNzZXJ0KG9mZnNldCAhPT0gdW5kZWZpbmVkICYmIG9mZnNldCAhPT0gbnVsbCwgJ21pc3Npbmcgb2Zmc2V0JylcbiAgICBhc3NlcnQob2Zmc2V0ICsgMyA8IGJ1Zi5sZW5ndGgsICd0cnlpbmcgdG8gd3JpdGUgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKVxuICAgIHZlcmlmdWludCh2YWx1ZSwgMHhmZmZmZmZmZilcbiAgfVxuXG4gIHZhciBsZW4gPSBidWYubGVuZ3RoXG4gIGlmIChvZmZzZXQgPj0gbGVuKVxuICAgIHJldHVyblxuXG4gIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4obGVuIC0gb2Zmc2V0LCA0KTsgaSA8IGo7IGkrKykge1xuICAgIGJ1ZltvZmZzZXQgKyBpXSA9XG4gICAgICAgICh2YWx1ZSA+Pj4gKGxpdHRsZUVuZGlhbiA/IGkgOiAzIC0gaSkgKiA4KSAmIDB4ZmZcbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyTEUgPSBmdW5jdGlvbiAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgX3dyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyQkUgPSBmdW5jdGlvbiAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgX3dyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDggPSBmdW5jdGlvbiAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGFzc2VydCh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlICE9PSBudWxsLCAnbWlzc2luZyB2YWx1ZScpXG4gICAgYXNzZXJ0KG9mZnNldCAhPT0gdW5kZWZpbmVkICYmIG9mZnNldCAhPT0gbnVsbCwgJ21pc3Npbmcgb2Zmc2V0JylcbiAgICBhc3NlcnQob2Zmc2V0IDwgdGhpcy5sZW5ndGgsICdUcnlpbmcgdG8gd3JpdGUgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKVxuICAgIHZlcmlmc2ludCh2YWx1ZSwgMHg3ZiwgLTB4ODApXG4gIH1cblxuICBpZiAob2Zmc2V0ID49IHRoaXMubGVuZ3RoKVxuICAgIHJldHVyblxuXG4gIGlmICh2YWx1ZSA+PSAwKVxuICAgIHRoaXMud3JpdGVVSW50OCh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydClcbiAgZWxzZVxuICAgIHRoaXMud3JpdGVVSW50OCgweGZmICsgdmFsdWUgKyAxLCBvZmZzZXQsIG5vQXNzZXJ0KVxufVxuXG5mdW5jdGlvbiBfd3JpdGVJbnQxNiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBhc3NlcnQodmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZSAhPT0gbnVsbCwgJ21pc3NpbmcgdmFsdWUnKVxuICAgIGFzc2VydCh0eXBlb2YgbGl0dGxlRW5kaWFuID09PSAnYm9vbGVhbicsICdtaXNzaW5nIG9yIGludmFsaWQgZW5kaWFuJylcbiAgICBhc3NlcnQob2Zmc2V0ICE9PSB1bmRlZmluZWQgJiYgb2Zmc2V0ICE9PSBudWxsLCAnbWlzc2luZyBvZmZzZXQnKVxuICAgIGFzc2VydChvZmZzZXQgKyAxIDwgYnVmLmxlbmd0aCwgJ1RyeWluZyB0byB3cml0ZSBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG4gICAgdmVyaWZzaW50KHZhbHVlLCAweDdmZmYsIC0weDgwMDApXG4gIH1cblxuICB2YXIgbGVuID0gYnVmLmxlbmd0aFxuICBpZiAob2Zmc2V0ID49IGxlbilcbiAgICByZXR1cm5cblxuICBpZiAodmFsdWUgPj0gMClcbiAgICBfd3JpdGVVSW50MTYoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KVxuICBlbHNlXG4gICAgX3dyaXRlVUludDE2KGJ1ZiwgMHhmZmZmICsgdmFsdWUgKyAxLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkxFID0gZnVuY3Rpb24gKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIF93cml0ZUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZCRSA9IGZ1bmN0aW9uICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICBfd3JpdGVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbmZ1bmN0aW9uIF93cml0ZUludDMyIChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGFzc2VydCh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlICE9PSBudWxsLCAnbWlzc2luZyB2YWx1ZScpXG4gICAgYXNzZXJ0KHR5cGVvZiBsaXR0bGVFbmRpYW4gPT09ICdib29sZWFuJywgJ21pc3Npbmcgb3IgaW52YWxpZCBlbmRpYW4nKVxuICAgIGFzc2VydChvZmZzZXQgIT09IHVuZGVmaW5lZCAmJiBvZmZzZXQgIT09IG51bGwsICdtaXNzaW5nIG9mZnNldCcpXG4gICAgYXNzZXJ0KG9mZnNldCArIDMgPCBidWYubGVuZ3RoLCAnVHJ5aW5nIHRvIHdyaXRlIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbiAgICB2ZXJpZnNpbnQodmFsdWUsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxuICB9XG5cbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGhcbiAgaWYgKG9mZnNldCA+PSBsZW4pXG4gICAgcmV0dXJuXG5cbiAgaWYgKHZhbHVlID49IDApXG4gICAgX3dyaXRlVUludDMyKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydClcbiAgZWxzZVxuICAgIF93cml0ZVVJbnQzMihidWYsIDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDEsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyTEUgPSBmdW5jdGlvbiAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgX3dyaXRlSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkJFID0gZnVuY3Rpb24gKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIF93cml0ZUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuZnVuY3Rpb24gX3dyaXRlRmxvYXQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgYXNzZXJ0KHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IG51bGwsICdtaXNzaW5nIHZhbHVlJylcbiAgICBhc3NlcnQodHlwZW9mIGxpdHRsZUVuZGlhbiA9PT0gJ2Jvb2xlYW4nLCAnbWlzc2luZyBvciBpbnZhbGlkIGVuZGlhbicpXG4gICAgYXNzZXJ0KG9mZnNldCAhPT0gdW5kZWZpbmVkICYmIG9mZnNldCAhPT0gbnVsbCwgJ21pc3Npbmcgb2Zmc2V0JylcbiAgICBhc3NlcnQob2Zmc2V0ICsgMyA8IGJ1Zi5sZW5ndGgsICdUcnlpbmcgdG8gd3JpdGUgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKVxuICAgIHZlcmlmSUVFRTc1NCh2YWx1ZSwgMy40MDI4MjM0NjYzODUyODg2ZSszOCwgLTMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgpXG4gIH1cblxuICB2YXIgbGVuID0gYnVmLmxlbmd0aFxuICBpZiAob2Zmc2V0ID49IGxlbilcbiAgICByZXR1cm5cblxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0TEUgPSBmdW5jdGlvbiAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgX3dyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdEJFID0gZnVuY3Rpb24gKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIF93cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuZnVuY3Rpb24gX3dyaXRlRG91YmxlIChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGFzc2VydCh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlICE9PSBudWxsLCAnbWlzc2luZyB2YWx1ZScpXG4gICAgYXNzZXJ0KHR5cGVvZiBsaXR0bGVFbmRpYW4gPT09ICdib29sZWFuJywgJ21pc3Npbmcgb3IgaW52YWxpZCBlbmRpYW4nKVxuICAgIGFzc2VydChvZmZzZXQgIT09IHVuZGVmaW5lZCAmJiBvZmZzZXQgIT09IG51bGwsICdtaXNzaW5nIG9mZnNldCcpXG4gICAgYXNzZXJ0KG9mZnNldCArIDcgPCBidWYubGVuZ3RoLFxuICAgICAgICAnVHJ5aW5nIHRvIHdyaXRlIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbiAgICB2ZXJpZklFRUU3NTQodmFsdWUsIDEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4LCAtMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgpXG4gIH1cblxuICB2YXIgbGVuID0gYnVmLmxlbmd0aFxuICBpZiAob2Zmc2V0ID49IGxlbilcbiAgICByZXR1cm5cblxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCA1MiwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUxFID0gZnVuY3Rpb24gKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIF93cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUJFID0gZnVuY3Rpb24gKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIF93cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbi8vIGZpbGwodmFsdWUsIHN0YXJ0PTAsIGVuZD1idWZmZXIubGVuZ3RoKVxuQnVmZmVyLnByb3RvdHlwZS5maWxsID0gZnVuY3Rpb24gKHZhbHVlLCBzdGFydCwgZW5kKSB7XG4gIGlmICghdmFsdWUpIHZhbHVlID0gMFxuICBpZiAoIXN0YXJ0KSBzdGFydCA9IDBcbiAgaWYgKCFlbmQpIGVuZCA9IHRoaXMubGVuZ3RoXG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICB2YWx1ZSA9IHZhbHVlLmNoYXJDb2RlQXQoMClcbiAgfVxuXG4gIGFzc2VydCh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInICYmICFpc05hTih2YWx1ZSksICd2YWx1ZSBpcyBub3QgYSBudW1iZXInKVxuICBhc3NlcnQoZW5kID49IHN0YXJ0LCAnZW5kIDwgc3RhcnQnKVxuXG4gIC8vIEZpbGwgMCBieXRlczsgd2UncmUgZG9uZVxuICBpZiAoZW5kID09PSBzdGFydCkgcmV0dXJuXG4gIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuXG5cbiAgYXNzZXJ0KHN0YXJ0ID49IDAgJiYgc3RhcnQgPCB0aGlzLmxlbmd0aCwgJ3N0YXJ0IG91dCBvZiBib3VuZHMnKVxuICBhc3NlcnQoZW5kID49IDAgJiYgZW5kIDw9IHRoaXMubGVuZ3RoLCAnZW5kIG91dCBvZiBib3VuZHMnKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSsrKSB7XG4gICAgdGhpc1tpXSA9IHZhbHVlXG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgb3V0ID0gW11cbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBvdXRbaV0gPSB0b0hleCh0aGlzW2ldKVxuICAgIGlmIChpID09PSBleHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTKSB7XG4gICAgICBvdXRbaSArIDFdID0gJy4uLidcbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG4gIHJldHVybiAnPEJ1ZmZlciAnICsgb3V0LmpvaW4oJyAnKSArICc+J1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgYEFycmF5QnVmZmVyYCB3aXRoIHRoZSAqY29waWVkKiBtZW1vcnkgb2YgdGhlIGJ1ZmZlciBpbnN0YW5jZS5cbiAqIEFkZGVkIGluIE5vZGUgMC4xMi4gT25seSBhdmFpbGFibGUgaW4gYnJvd3NlcnMgdGhhdCBzdXBwb3J0IEFycmF5QnVmZmVyLlxuICovXG5CdWZmZXIucHJvdG90eXBlLnRvQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAoQnVmZmVyLl91c2VUeXBlZEFycmF5cykge1xuICAgICAgcmV0dXJuIChuZXcgQnVmZmVyKHRoaXMpKS5idWZmZXJcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGJ1ZiA9IG5ldyBVaW50OEFycmF5KHRoaXMubGVuZ3RoKVxuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGJ1Zi5sZW5ndGg7IGkgPCBsZW47IGkgKz0gMSlcbiAgICAgICAgYnVmW2ldID0gdGhpc1tpXVxuICAgICAgcmV0dXJuIGJ1Zi5idWZmZXJcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdCdWZmZXIudG9BcnJheUJ1ZmZlciBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlcicpXG4gIH1cbn1cblxuLy8gSEVMUEVSIEZVTkNUSU9OU1xuLy8gPT09PT09PT09PT09PT09PVxuXG5mdW5jdGlvbiBzdHJpbmd0cmltIChzdHIpIHtcbiAgaWYgKHN0ci50cmltKSByZXR1cm4gc3RyLnRyaW0oKVxuICByZXR1cm4gc3RyLnJlcGxhY2UoL15cXHMrfFxccyskL2csICcnKVxufVxuXG52YXIgQlAgPSBCdWZmZXIucHJvdG90eXBlXG5cbi8qKlxuICogQXVnbWVudCBhIFVpbnQ4QXJyYXkgKmluc3RhbmNlKiAobm90IHRoZSBVaW50OEFycmF5IGNsYXNzISkgd2l0aCBCdWZmZXIgbWV0aG9kc1xuICovXG5CdWZmZXIuX2F1Z21lbnQgPSBmdW5jdGlvbiAoYXJyKSB7XG4gIGFyci5faXNCdWZmZXIgPSB0cnVlXG5cbiAgLy8gc2F2ZSByZWZlcmVuY2UgdG8gb3JpZ2luYWwgVWludDhBcnJheSBnZXQvc2V0IG1ldGhvZHMgYmVmb3JlIG92ZXJ3cml0aW5nXG4gIGFyci5fZ2V0ID0gYXJyLmdldFxuICBhcnIuX3NldCA9IGFyci5zZXRcblxuICAvLyBkZXByZWNhdGVkLCB3aWxsIGJlIHJlbW92ZWQgaW4gbm9kZSAwLjEzK1xuICBhcnIuZ2V0ID0gQlAuZ2V0XG4gIGFyci5zZXQgPSBCUC5zZXRcblxuICBhcnIud3JpdGUgPSBCUC53cml0ZVxuICBhcnIudG9TdHJpbmcgPSBCUC50b1N0cmluZ1xuICBhcnIudG9Mb2NhbGVTdHJpbmcgPSBCUC50b1N0cmluZ1xuICBhcnIudG9KU09OID0gQlAudG9KU09OXG4gIGFyci5jb3B5ID0gQlAuY29weVxuICBhcnIuc2xpY2UgPSBCUC5zbGljZVxuICBhcnIucmVhZFVJbnQ4ID0gQlAucmVhZFVJbnQ4XG4gIGFyci5yZWFkVUludDE2TEUgPSBCUC5yZWFkVUludDE2TEVcbiAgYXJyLnJlYWRVSW50MTZCRSA9IEJQLnJlYWRVSW50MTZCRVxuICBhcnIucmVhZFVJbnQzMkxFID0gQlAucmVhZFVJbnQzMkxFXG4gIGFyci5yZWFkVUludDMyQkUgPSBCUC5yZWFkVUludDMyQkVcbiAgYXJyLnJlYWRJbnQ4ID0gQlAucmVhZEludDhcbiAgYXJyLnJlYWRJbnQxNkxFID0gQlAucmVhZEludDE2TEVcbiAgYXJyLnJlYWRJbnQxNkJFID0gQlAucmVhZEludDE2QkVcbiAgYXJyLnJlYWRJbnQzMkxFID0gQlAucmVhZEludDMyTEVcbiAgYXJyLnJlYWRJbnQzMkJFID0gQlAucmVhZEludDMyQkVcbiAgYXJyLnJlYWRGbG9hdExFID0gQlAucmVhZEZsb2F0TEVcbiAgYXJyLnJlYWRGbG9hdEJFID0gQlAucmVhZEZsb2F0QkVcbiAgYXJyLnJlYWREb3VibGVMRSA9IEJQLnJlYWREb3VibGVMRVxuICBhcnIucmVhZERvdWJsZUJFID0gQlAucmVhZERvdWJsZUJFXG4gIGFyci53cml0ZVVJbnQ4ID0gQlAud3JpdGVVSW50OFxuICBhcnIud3JpdGVVSW50MTZMRSA9IEJQLndyaXRlVUludDE2TEVcbiAgYXJyLndyaXRlVUludDE2QkUgPSBCUC53cml0ZVVJbnQxNkJFXG4gIGFyci53cml0ZVVJbnQzMkxFID0gQlAud3JpdGVVSW50MzJMRVxuICBhcnIud3JpdGVVSW50MzJCRSA9IEJQLndyaXRlVUludDMyQkVcbiAgYXJyLndyaXRlSW50OCA9IEJQLndyaXRlSW50OFxuICBhcnIud3JpdGVJbnQxNkxFID0gQlAud3JpdGVJbnQxNkxFXG4gIGFyci53cml0ZUludDE2QkUgPSBCUC53cml0ZUludDE2QkVcbiAgYXJyLndyaXRlSW50MzJMRSA9IEJQLndyaXRlSW50MzJMRVxuICBhcnIud3JpdGVJbnQzMkJFID0gQlAud3JpdGVJbnQzMkJFXG4gIGFyci53cml0ZUZsb2F0TEUgPSBCUC53cml0ZUZsb2F0TEVcbiAgYXJyLndyaXRlRmxvYXRCRSA9IEJQLndyaXRlRmxvYXRCRVxuICBhcnIud3JpdGVEb3VibGVMRSA9IEJQLndyaXRlRG91YmxlTEVcbiAgYXJyLndyaXRlRG91YmxlQkUgPSBCUC53cml0ZURvdWJsZUJFXG4gIGFyci5maWxsID0gQlAuZmlsbFxuICBhcnIuaW5zcGVjdCA9IEJQLmluc3BlY3RcbiAgYXJyLnRvQXJyYXlCdWZmZXIgPSBCUC50b0FycmF5QnVmZmVyXG5cbiAgcmV0dXJuIGFyclxufVxuXG4vLyBzbGljZShzdGFydCwgZW5kKVxuZnVuY3Rpb24gY2xhbXAgKGluZGV4LCBsZW4sIGRlZmF1bHRWYWx1ZSkge1xuICBpZiAodHlwZW9mIGluZGV4ICE9PSAnbnVtYmVyJykgcmV0dXJuIGRlZmF1bHRWYWx1ZVxuICBpbmRleCA9IH5+aW5kZXg7ICAvLyBDb2VyY2UgdG8gaW50ZWdlci5cbiAgaWYgKGluZGV4ID49IGxlbikgcmV0dXJuIGxlblxuICBpZiAoaW5kZXggPj0gMCkgcmV0dXJuIGluZGV4XG4gIGluZGV4ICs9IGxlblxuICBpZiAoaW5kZXggPj0gMCkgcmV0dXJuIGluZGV4XG4gIHJldHVybiAwXG59XG5cbmZ1bmN0aW9uIGNvZXJjZSAobGVuZ3RoKSB7XG4gIC8vIENvZXJjZSBsZW5ndGggdG8gYSBudW1iZXIgKHBvc3NpYmx5IE5hTiksIHJvdW5kIHVwXG4gIC8vIGluIGNhc2UgaXQncyBmcmFjdGlvbmFsIChlLmcuIDEyMy40NTYpIHRoZW4gZG8gYVxuICAvLyBkb3VibGUgbmVnYXRlIHRvIGNvZXJjZSBhIE5hTiB0byAwLiBFYXN5LCByaWdodD9cbiAgbGVuZ3RoID0gfn5NYXRoLmNlaWwoK2xlbmd0aClcbiAgcmV0dXJuIGxlbmd0aCA8IDAgPyAwIDogbGVuZ3RoXG59XG5cbmZ1bmN0aW9uIGlzQXJyYXkgKHN1YmplY3QpIHtcbiAgcmV0dXJuIChBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChzdWJqZWN0KSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChzdWJqZWN0KSA9PT0gJ1tvYmplY3QgQXJyYXldJ1xuICB9KShzdWJqZWN0KVxufVxuXG5mdW5jdGlvbiBpc0FycmF5aXNoIChzdWJqZWN0KSB7XG4gIHJldHVybiBpc0FycmF5KHN1YmplY3QpIHx8IEJ1ZmZlci5pc0J1ZmZlcihzdWJqZWN0KSB8fFxuICAgICAgc3ViamVjdCAmJiB0eXBlb2Ygc3ViamVjdCA9PT0gJ29iamVjdCcgJiZcbiAgICAgIHR5cGVvZiBzdWJqZWN0Lmxlbmd0aCA9PT0gJ251bWJlcidcbn1cblxuZnVuY3Rpb24gdG9IZXggKG4pIHtcbiAgaWYgKG4gPCAxNikgcmV0dXJuICcwJyArIG4udG9TdHJpbmcoMTYpXG4gIHJldHVybiBuLnRvU3RyaW5nKDE2KVxufVxuXG5mdW5jdGlvbiB1dGY4VG9CeXRlcyAoc3RyKSB7XG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgIHZhciBiID0gc3RyLmNoYXJDb2RlQXQoaSlcbiAgICBpZiAoYiA8PSAweDdGKVxuICAgICAgYnl0ZUFycmF5LnB1c2goc3RyLmNoYXJDb2RlQXQoaSkpXG4gICAgZWxzZSB7XG4gICAgICB2YXIgc3RhcnQgPSBpXG4gICAgICBpZiAoYiA+PSAweEQ4MDAgJiYgYiA8PSAweERGRkYpIGkrK1xuICAgICAgdmFyIGggPSBlbmNvZGVVUklDb21wb25lbnQoc3RyLnNsaWNlKHN0YXJ0LCBpKzEpKS5zdWJzdHIoMSkuc3BsaXQoJyUnKVxuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBoLmxlbmd0aDsgaisrKVxuICAgICAgICBieXRlQXJyYXkucHVzaChwYXJzZUludChoW2pdLCAxNikpXG4gICAgfVxuICB9XG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gYXNjaWlUb0J5dGVzIChzdHIpIHtcbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgLy8gTm9kZSdzIGNvZGUgc2VlbXMgdG8gYmUgZG9pbmcgdGhpcyBhbmQgbm90ICYgMHg3Ri4uXG4gICAgYnl0ZUFycmF5LnB1c2goc3RyLmNoYXJDb2RlQXQoaSkgJiAweEZGKVxuICB9XG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVRvQnl0ZXMgKHN0cikge1xuICB2YXIgYywgaGksIGxvXG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgIGMgPSBzdHIuY2hhckNvZGVBdChpKVxuICAgIGhpID0gYyA+PiA4XG4gICAgbG8gPSBjICUgMjU2XG4gICAgYnl0ZUFycmF5LnB1c2gobG8pXG4gICAgYnl0ZUFycmF5LnB1c2goaGkpXG4gIH1cblxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFRvQnl0ZXMgKHN0cikge1xuICByZXR1cm4gYmFzZTY0LnRvQnl0ZUFycmF5KHN0cilcbn1cblxuZnVuY3Rpb24gYmxpdEJ1ZmZlciAoc3JjLCBkc3QsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHZhciBwb3NcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIGlmICgoaSArIG9mZnNldCA+PSBkc3QubGVuZ3RoKSB8fCAoaSA+PSBzcmMubGVuZ3RoKSlcbiAgICAgIGJyZWFrXG4gICAgZHN0W2kgKyBvZmZzZXRdID0gc3JjW2ldXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuZnVuY3Rpb24gZGVjb2RlVXRmOENoYXIgKHN0cikge1xuICB0cnkge1xuICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoc3RyKVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZSgweEZGRkQpIC8vIFVURiA4IGludmFsaWQgY2hhclxuICB9XG59XG5cbi8qXG4gKiBXZSBoYXZlIHRvIG1ha2Ugc3VyZSB0aGF0IHRoZSB2YWx1ZSBpcyBhIHZhbGlkIGludGVnZXIuIFRoaXMgbWVhbnMgdGhhdCBpdFxuICogaXMgbm9uLW5lZ2F0aXZlLiBJdCBoYXMgbm8gZnJhY3Rpb25hbCBjb21wb25lbnQgYW5kIHRoYXQgaXQgZG9lcyBub3RcbiAqIGV4Y2VlZCB0aGUgbWF4aW11bSBhbGxvd2VkIHZhbHVlLlxuICovXG5mdW5jdGlvbiB2ZXJpZnVpbnQgKHZhbHVlLCBtYXgpIHtcbiAgYXNzZXJ0KHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicsICdjYW5ub3Qgd3JpdGUgYSBub24tbnVtYmVyIGFzIGEgbnVtYmVyJylcbiAgYXNzZXJ0KHZhbHVlID49IDAsICdzcGVjaWZpZWQgYSBuZWdhdGl2ZSB2YWx1ZSBmb3Igd3JpdGluZyBhbiB1bnNpZ25lZCB2YWx1ZScpXG4gIGFzc2VydCh2YWx1ZSA8PSBtYXgsICd2YWx1ZSBpcyBsYXJnZXIgdGhhbiBtYXhpbXVtIHZhbHVlIGZvciB0eXBlJylcbiAgYXNzZXJ0KE1hdGguZmxvb3IodmFsdWUpID09PSB2YWx1ZSwgJ3ZhbHVlIGhhcyBhIGZyYWN0aW9uYWwgY29tcG9uZW50Jylcbn1cblxuZnVuY3Rpb24gdmVyaWZzaW50ICh2YWx1ZSwgbWF4LCBtaW4pIHtcbiAgYXNzZXJ0KHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicsICdjYW5ub3Qgd3JpdGUgYSBub24tbnVtYmVyIGFzIGEgbnVtYmVyJylcbiAgYXNzZXJ0KHZhbHVlIDw9IG1heCwgJ3ZhbHVlIGxhcmdlciB0aGFuIG1heGltdW0gYWxsb3dlZCB2YWx1ZScpXG4gIGFzc2VydCh2YWx1ZSA+PSBtaW4sICd2YWx1ZSBzbWFsbGVyIHRoYW4gbWluaW11bSBhbGxvd2VkIHZhbHVlJylcbiAgYXNzZXJ0KE1hdGguZmxvb3IodmFsdWUpID09PSB2YWx1ZSwgJ3ZhbHVlIGhhcyBhIGZyYWN0aW9uYWwgY29tcG9uZW50Jylcbn1cblxuZnVuY3Rpb24gdmVyaWZJRUVFNzU0ICh2YWx1ZSwgbWF4LCBtaW4pIHtcbiAgYXNzZXJ0KHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicsICdjYW5ub3Qgd3JpdGUgYSBub24tbnVtYmVyIGFzIGEgbnVtYmVyJylcbiAgYXNzZXJ0KHZhbHVlIDw9IG1heCwgJ3ZhbHVlIGxhcmdlciB0aGFuIG1heGltdW0gYWxsb3dlZCB2YWx1ZScpXG4gIGFzc2VydCh2YWx1ZSA+PSBtaW4sICd2YWx1ZSBzbWFsbGVyIHRoYW4gbWluaW11bSBhbGxvd2VkIHZhbHVlJylcbn1cblxuZnVuY3Rpb24gYXNzZXJ0ICh0ZXN0LCBtZXNzYWdlKSB7XG4gIGlmICghdGVzdCkgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UgfHwgJ0ZhaWxlZCBhc3NlcnRpb24nKVxufVxuXG59KS5jYWxsKHRoaXMscmVxdWlyZShcImUvVSs5N1wiKSx0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30scmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIsYXJndW1lbnRzWzNdLGFyZ3VtZW50c1s0XSxhcmd1bWVudHNbNV0sYXJndW1lbnRzWzZdLFwiLy4uXFxcXC4uXFxcXG5vZGVfbW9kdWxlc1xcXFxidWZmZXJcXFxcaW5kZXguanNcIixcIi8uLlxcXFwuLlxcXFxub2RlX21vZHVsZXNcXFxcYnVmZmVyXCIpXG59LHtcImJhc2U2NC1qc1wiOjEsXCJidWZmZXJcIjoyLFwiZS9VKzk3XCI6NCxcImllZWU3NTRcIjozfV0sMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3MsZ2xvYmFsLEJ1ZmZlcixfX2FyZ3VtZW50MCxfX2FyZ3VtZW50MSxfX2FyZ3VtZW50MixfX2FyZ3VtZW50MyxfX2ZpbGVuYW1lLF9fZGlybmFtZSl7XG5leHBvcnRzLnJlYWQgPSBmdW5jdGlvbiAoYnVmZmVyLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbVxuICB2YXIgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIG5CaXRzID0gLTdcbiAgdmFyIGkgPSBpc0xFID8gKG5CeXRlcyAtIDEpIDogMFxuICB2YXIgZCA9IGlzTEUgPyAtMSA6IDFcbiAgdmFyIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV1cblxuICBpICs9IGRcblxuICBlID0gcyAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBzID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBlTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSBlICogMjU2ICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgbSA9IGUgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgZSA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gbUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBtID0gbSAqIDI1NiArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIGlmIChlID09PSAwKSB7XG4gICAgZSA9IDEgLSBlQmlhc1xuICB9IGVsc2UgaWYgKGUgPT09IGVNYXgpIHtcbiAgICByZXR1cm4gbSA/IE5hTiA6ICgocyA/IC0xIDogMSkgKiBJbmZpbml0eSlcbiAgfSBlbHNlIHtcbiAgICBtID0gbSArIE1hdGgucG93KDIsIG1MZW4pXG4gICAgZSA9IGUgLSBlQmlhc1xuICB9XG4gIHJldHVybiAocyA/IC0xIDogMSkgKiBtICogTWF0aC5wb3coMiwgZSAtIG1MZW4pXG59XG5cbmV4cG9ydHMud3JpdGUgPSBmdW5jdGlvbiAoYnVmZmVyLCB2YWx1ZSwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG0sIGNcbiAgdmFyIGVMZW4gPSBuQnl0ZXMgKiA4IC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBydCA9IChtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMClcbiAgdmFyIGkgPSBpc0xFID8gMCA6IChuQnl0ZXMgLSAxKVxuICB2YXIgZCA9IGlzTEUgPyAxIDogLTFcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgKHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDApID8gMSA6IDBcblxuICB2YWx1ZSA9IE1hdGguYWJzKHZhbHVlKVxuXG4gIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgbSA9IGlzTmFOKHZhbHVlKSA/IDEgOiAwXG4gICAgZSA9IGVNYXhcbiAgfSBlbHNlIHtcbiAgICBlID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMilcbiAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS1cbiAgICAgIGMgKj0gMlxuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gY1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIE1hdGgucG93KDIsIDEgLSBlQmlhcylcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKytcbiAgICAgIGMgLz0gMlxuICAgIH1cblxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDBcbiAgICAgIGUgPSBlTWF4XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICh2YWx1ZSAqIGMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gZSArIGVCaWFzXG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSB2YWx1ZSAqIE1hdGgucG93KDIsIGVCaWFzIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IDBcbiAgICB9XG4gIH1cblxuICBmb3IgKDsgbUxlbiA+PSA4OyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBtICYgMHhmZiwgaSArPSBkLCBtIC89IDI1NiwgbUxlbiAtPSA4KSB7fVxuXG4gIGUgPSAoZSA8PCBtTGVuKSB8IG1cbiAgZUxlbiArPSBtTGVuXG4gIGZvciAoOyBlTGVuID4gMDsgYnVmZmVyW29mZnNldCArIGldID0gZSAmIDB4ZmYsIGkgKz0gZCwgZSAvPSAyNTYsIGVMZW4gLT0gOCkge31cblxuICBidWZmZXJbb2Zmc2V0ICsgaSAtIGRdIHw9IHMgKiAxMjhcbn1cblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJlL1UrOTdcIiksdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9LHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyLGFyZ3VtZW50c1szXSxhcmd1bWVudHNbNF0sYXJndW1lbnRzWzVdLGFyZ3VtZW50c1s2XSxcIi8uLlxcXFwuLlxcXFxub2RlX21vZHVsZXNcXFxcaWVlZTc1NFxcXFxpbmRleC5qc1wiLFwiLy4uXFxcXC4uXFxcXG5vZGVfbW9kdWxlc1xcXFxpZWVlNzU0XCIpXG59LHtcImJ1ZmZlclwiOjIsXCJlL1UrOTdcIjo0fV0sNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3MsZ2xvYmFsLEJ1ZmZlcixfX2FyZ3VtZW50MCxfX2FyZ3VtZW50MSxfX2FyZ3VtZW50MixfX2FyZ3VtZW50MyxfX2ZpbGVuYW1lLF9fZGlybmFtZSl7XG4vLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcblxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG5wcm9jZXNzLm5leHRUaWNrID0gKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgY2FuU2V0SW1tZWRpYXRlID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCdcbiAgICAmJiB3aW5kb3cuc2V0SW1tZWRpYXRlO1xuICAgIHZhciBjYW5Qb3N0ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCdcbiAgICAmJiB3aW5kb3cucG9zdE1lc3NhZ2UgJiYgd2luZG93LmFkZEV2ZW50TGlzdGVuZXJcbiAgICA7XG5cbiAgICBpZiAoY2FuU2V0SW1tZWRpYXRlKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoZikgeyByZXR1cm4gd2luZG93LnNldEltbWVkaWF0ZShmKSB9O1xuICAgIH1cblxuICAgIGlmIChjYW5Qb3N0KSB7XG4gICAgICAgIHZhciBxdWV1ZSA9IFtdO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgdmFyIHNvdXJjZSA9IGV2LnNvdXJjZTtcbiAgICAgICAgICAgIGlmICgoc291cmNlID09PSB3aW5kb3cgfHwgc291cmNlID09PSBudWxsKSAmJiBldi5kYXRhID09PSAncHJvY2Vzcy10aWNrJykge1xuICAgICAgICAgICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgIGlmIChxdWV1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBmbiA9IHF1ZXVlLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgIGZuKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LCB0cnVlKTtcblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gbmV4dFRpY2soZm4pIHtcbiAgICAgICAgICAgIHF1ZXVlLnB1c2goZm4pO1xuICAgICAgICAgICAgd2luZG93LnBvc3RNZXNzYWdlKCdwcm9jZXNzLXRpY2snLCAnKicpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiBuZXh0VGljayhmbikge1xuICAgICAgICBzZXRUaW1lb3V0KGZuLCAwKTtcbiAgICB9O1xufSkoKTtcblxucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59XG5cbi8vIFRPRE8oc2h0eWxtYW4pXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJlL1UrOTdcIiksdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9LHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyLGFyZ3VtZW50c1szXSxhcmd1bWVudHNbNF0sYXJndW1lbnRzWzVdLGFyZ3VtZW50c1s2XSxcIi8uLlxcXFwuLlxcXFxub2RlX21vZHVsZXNcXFxccHJvY2Vzc1xcXFxicm93c2VyLmpzXCIsXCIvLi5cXFxcLi5cXFxcbm9kZV9tb2R1bGVzXFxcXHByb2Nlc3NcIilcbn0se1wiYnVmZmVyXCI6MixcImUvVSs5N1wiOjR9XSw1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwsQnVmZmVyLF9fYXJndW1lbnQwLF9fYXJndW1lbnQxLF9fYXJndW1lbnQyLF9fYXJndW1lbnQzLF9fZmlsZW5hbWUsX19kaXJuYW1lKXtcblwidXNlIHN0cmljdFwiO1xuXG52YXIgdmFsaWRhdGVGb3JtID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBvcHRpb25zID0ge307XG4gICAgdmFyIGNsYXNzRXJyb3IgPSAnZXJyb3InO1xuXG4gICAgdmFyIHNob3dGaWVsZFZhbGlkYXRpb24gPSBmdW5jdGlvbiBzaG93RmllbGRWYWxpZGF0aW9uKGlucHV0LCBpbnB1dElzVmFsaWQpIHtcbiAgICAgICAgaWYgKCFpbnB1dElzVmFsaWQpIHtcbiAgICAgICAgICAgIGlucHV0LnBhcmVudE5vZGUuY2xhc3NMaXN0LmFkZChvcHRpb25zLmNsYXNzRXJyb3IpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaW5wdXQucGFyZW50Tm9kZS5jbGFzc0xpc3QucmVtb3ZlKG9wdGlvbnMuY2xhc3NFcnJvcik7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIHRlc3RJbnB1dFRleHQgPSBmdW5jdGlvbiB0ZXN0SW5wdXRUZXh0KGlucHV0KSB7XG4gICAgICAgIHZhciBpbnB1dElzVmFsaWQgPSB0cnVlO1xuICAgICAgICB2YXIgcGF0dGVybiA9IGlucHV0LmdldEF0dHJpYnV0ZSgncGF0dGVybicpO1xuXG4gICAgICAgIGlmIChwYXR0ZXJuICE9IG51bGwpIHtcbiAgICAgICAgICAgIHZhciByZWcgPSBuZXcgUmVnRXhwKHBhdHRlcm4sICdnaScpO1xuICAgICAgICAgICAgaWYgKCFyZWcudGVzdChpbnB1dC52YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICBpbnB1dElzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChpbnB1dC52YWx1ZSA9PSAnJykge1xuICAgICAgICAgICAgICAgIGlucHV0SXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlucHV0SXNWYWxpZCkge1xuICAgICAgICAgICAgc2hvd0ZpZWxkVmFsaWRhdGlvbihpbnB1dCwgdHJ1ZSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNob3dGaWVsZFZhbGlkYXRpb24oaW5wdXQsIGZhbHNlKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgdGVzdElucHV0RW1haWwgPSBmdW5jdGlvbiB0ZXN0SW5wdXRFbWFpbChpbnB1dCkge1xuICAgICAgICB2YXIgbWFpbFJlZyA9IG5ldyBSZWdFeHAoJ15bMC05YS16QS1aXy4tXStAWzAtOWEtekEtWi4tXStcXC5bYS16QS1aXXsyLDN9JCcsICdnaScpO1xuXG4gICAgICAgIGlmICghbWFpbFJlZy50ZXN0KGlucHV0LnZhbHVlKSkge1xuICAgICAgICAgICAgc2hvd0ZpZWxkVmFsaWRhdGlvbihpbnB1dCwgZmFsc2UpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2hvd0ZpZWxkVmFsaWRhdGlvbihpbnB1dCwgdHJ1ZSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgdGVzdElucHV0VVJMID0gZnVuY3Rpb24gdGVzdElucHV0VVJMKGlucHV0KSB7XG4gICAgICAgIHZhciB1cmxSZWcgPSBuZXcgUmVnRXhwKCdeaHR0cDpcXC9cXC8uKycsICdpJyk7XG4gICAgICAgIGlmICghdXJsUmVnLnRlc3QoaW5wdXQudmFsdWUpKSB7XG4gICAgICAgICAgICBzaG93RmllbGRWYWxpZGF0aW9uKGlucHV0LCBmYWxzZSk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzaG93RmllbGRWYWxpZGF0aW9uKGlucHV0LCB0cnVlKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHZhciB0ZXN0SW5wdXRTZWxlY3QgPSBmdW5jdGlvbiB0ZXN0SW5wdXRTZWxlY3Qoc2VsZWN0KSB7XG4gICAgICAgIGlmIChzZWxlY3Qub3B0aW9uc1tzZWxlY3Quc2VsZWN0ZWRJbmRleF0udmFsdWUgPT0gJycgfHwgc2VsZWN0Lm9wdGlvbnNbc2VsZWN0LnNlbGVjdGVkSW5kZXhdLnZhbHVlID09ICctMScpIHtcbiAgICAgICAgICAgIHNob3dGaWVsZFZhbGlkYXRpb24oc2VsZWN0LCBmYWxzZSk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzaG93RmllbGRWYWxpZGF0aW9uKHNlbGVjdCwgdHJ1ZSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgdGVzdElucHV0Q2hlY2tib3ggPSBmdW5jdGlvbiB0ZXN0SW5wdXRDaGVja2JveChpbnB1dCkge1xuICAgICAgICB2YXIgbmFtZSA9IGlucHV0LmdldEF0dHJpYnV0ZSgnbmFtZScpO1xuICAgICAgICB2YXIgZ3JvdXAgPSBpbnB1dC5mb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoJzpzY29wZSBpbnB1dFtuYW1lPVwiJyArIG5hbWUgKyAnXCJdOmNoZWNrZWQnKTtcblxuICAgICAgICBpZiAoZ3JvdXAubGVuZ3RoKSB7XG4gICAgICAgICAgICBzaG93RmllbGRWYWxpZGF0aW9uKGlucHV0LCB0cnVlKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2hvd0ZpZWxkVmFsaWRhdGlvbihpbnB1dCwgZmFsc2UpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHZhciB0ZXN0SW5wdXREYXRlID0gZnVuY3Rpb24gdGVzdElucHV0RGF0ZShpbnB1dCkge1xuICAgICAgICBpZiAoIWlucHV0LnZhbHVlID09ICcnKSB7XG4gICAgICAgICAgICBzaG93RmllbGRWYWxpZGF0aW9uKGlucHV0LCB0cnVlKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2hvd0ZpZWxkVmFsaWRhdGlvbihpbnB1dCwgZmFsc2UpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHZhciBwcmVwYXJlRWxlbWVudHMgPSBmdW5jdGlvbiBwcmVwYXJlRWxlbWVudHMoKSB7XG4gICAgICAgIHZhciBlbGVtZW50cyA9IG9wdGlvbnMuZm9ybS5xdWVyeVNlbGVjdG9yQWxsKCc6c2NvcGUgW3JlcXVpcmVkXScpO1xuXG4gICAgICAgIFtdLmZvckVhY2guY2FsbChlbGVtZW50cywgZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgICAgIGlmIChlbGVtZW50Lm5vZGVOYW1lLnRvVXBwZXJDYXNlKCkgPT0gJ0lOUFVUJykge1xuICAgICAgICAgICAgICAgIHZhciB0eXBlID0gZWxlbWVudC50eXBlLnRvVXBwZXJDYXNlKCk7XG5cbiAgICAgICAgICAgICAgICBpZiAodHlwZSA9PSAnVEVYVCcpIHtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlc3RJbnB1dFRleHQoZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXN0SW5wdXRUZXh0KGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHR5cGUgPT0gJ0RBVEUnKSB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXN0SW5wdXRUZXh0KGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVzdElucHV0VGV4dChlbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXN0SW5wdXREYXRlKGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHR5cGUgPT0gJ0VNQUlMJykge1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVzdElucHV0RW1haWwoZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXN0SW5wdXRFbWFpbChlbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlID09ICdVUkwnKSB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXN0SW5wdXRVUkwoZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXN0SW5wdXRVUkwoZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZSA9PSAnQ0hFQ0tCT1gnKSB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXN0SW5wdXRDaGVja2JveChlbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlID09ICdSQURJTycpIHtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlc3RJbnB1dENoZWNrYm94KGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZWxlbWVudC5ub2RlTmFtZS50b1VwcGVyQ2FzZSgpID09ICdURVhUQVJFQScpIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB0ZXN0SW5wdXRUZXh0KGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGVzdElucHV0VGV4dChlbGVtZW50KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlbGVtZW50Lm5vZGVOYW1lLnRvVXBwZXJDYXNlKCkgPT0gJ1NFTEVDVCcpIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGVzdElucHV0U2VsZWN0KGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgdmFyIGZvcm1TdWJtaXQgPSBmdW5jdGlvbiBmb3JtU3VibWl0KCkge1xuICAgICAgICBvcHRpb25zLmZvcm0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgdmFyIHZhbGlkYXRlZCA9IHRydWU7XG5cbiAgICAgICAgICAgIC8vcG9iaWVyYW15IHdzenlzdGtpZSBwb2xhLCBrdMOzcnltIHdjemXFm25pZWogdXN0YXdpbGnFm215IGtsYXPEmSAucmVxdWlyZWRcbiAgICAgICAgICAgIHZhciBlbGVtZW50cyA9IG9wdGlvbnMuZm9ybS5xdWVyeVNlbGVjdG9yQWxsKCc6c2NvcGUgW3JlcXVpcmVkXScpO1xuXG4gICAgICAgICAgICAvL3BvZG9ibmUgZHppYcWCYW5pZSBqdcW8IHJvYmlsacWbbXkgcHJ6eSBwcnp5Z290b3d5d2FuaXUgcMOzbFxuICAgICAgICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlO1xuICAgICAgICAgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yID0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgX2l0ZXJhdG9yRXJyb3IgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yID0gZWxlbWVudHNbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gKF9zdGVwID0gX2l0ZXJhdG9yLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBlbGVtZW50ID0gX3N0ZXAudmFsdWU7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQubm9kZU5hbWUudG9VcHBlckNhc2UoKSA9PSAnSU5QVVQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdHlwZSA9IGVsZW1lbnQudHlwZS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGUgPT0gJ0VNQUlMJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGVzdElucHV0RW1haWwoZWxlbWVudCkpIHZhbGlkYXRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGUgPT0gJ1VSTCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRlc3RJbnB1dFVSTChlbGVtZW50KSkgdmFsaWRhdGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZSA9PSAnVEVYVCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRlc3RJbnB1dFRleHQoZWxlbWVudCkpIHZhbGlkYXRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGUgPT0gJ0NIRUNLQk9YJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGVzdElucHV0Q2hlY2tib3goZWxlbWVudCkpIHZhbGlkYXRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGUgPT0gJ1JBRElPJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGVzdElucHV0Q2hlY2tib3goZWxlbWVudCkpIHZhbGlkYXRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGUgPT0gJ0RBVEUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0ZXN0SW5wdXREYXRlKGVsZW1lbnQpKSB2YWxpZGF0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC5ub2RlTmFtZS50b1VwcGVyQ2FzZSgpID09ICdURVhUQVJFQScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGVzdElucHV0VGV4dChlbGVtZW50KSkgdmFsaWRhdGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQubm9kZU5hbWUudG9VcHBlckNhc2UoKSA9PSAnU0VMRUNUJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0ZXN0SW5wdXRTZWxlY3QoZWxlbWVudCkpIHZhbGlkYXRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgIF9pdGVyYXRvckVycm9yID0gZXJyO1xuICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gJiYgX2l0ZXJhdG9yLnJldHVybikge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yLnJldHVybigpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgO1xuXG4gICAgICAgICAgICAvLyBpZiAodmFsaWRhdGVkKSB7XG4gICAgICAgICAgICAvLyAgICAgdGhpcy5zdWJtaXQoKTtcbiAgICAgICAgICAgIC8vIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgLy8gfVxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgdmFyIGluaXQgPSBmdW5jdGlvbiBpbml0KF9vcHRpb25zKSB7XG4gICAgICAgIC8vZG8gbmFzemVnbyBtb2R1bHUgYmVkemllbXkgcHJ6ZWthenl3YWMgb3BjamVcbiAgICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIGZvcm06IF9vcHRpb25zLmZvcm0gfHwgbnVsbCxcbiAgICAgICAgICAgIGNsYXNzRXJyb3I6IF9vcHRpb25zLmNsYXNzRXJyb3IgfHwgJ2Vycm9yJ1xuICAgICAgICB9O1xuICAgICAgICBpZiAob3B0aW9ucy5mb3JtID09PSBudWxsIHx8IG9wdGlvbnMuZm9ybSA9PT0gdW5kZWZpbmVkIHx8IG9wdGlvbnMuZm9ybS5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCd2YWxpZGF0ZUZvcm06IMW5bGUgcHJ6ZWthemFueSBmb3JtdWxhcnonKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vdXN0YXdpYW15IGRsYSBmb3JtIG5vdmFsaWRhdGUgLSBkemlla2kgdGVtdSBuaWUgYmVkemllIGRvbXlzbG55Y2ggZHlta293IHdhbGlkYWNqaSBkbGEgcG9sIHJlcXVpcmVkXG4gICAgICAgIG9wdGlvbnMuZm9ybS5zZXRBdHRyaWJ1dGUoJ25vdmFsaWRhdGUnLCAnbm92YWxpZGF0ZScpO1xuXG4gICAgICAgIHByZXBhcmVFbGVtZW50cygpO1xuICAgICAgICBmb3JtU3VibWl0KCk7XG4gICAgfTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIGluaXQ6IGluaXRcbiAgICB9O1xufSgpO1xufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJlL1UrOTdcIiksdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9LHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyLGFyZ3VtZW50c1szXSxhcmd1bWVudHNbNF0sYXJndW1lbnRzWzVdLGFyZ3VtZW50c1s2XSxcIi9mYWtlX2FhMjFhNWM1LmpzXCIsXCIvXCIpXG59LHtcImJ1ZmZlclwiOjIsXCJlL1UrOTdcIjo0fV19LHt9LFs1XSlcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJa1E2WEZ4VFZGSlBUbGxjWEhab2MxeGNVSEp2YW1WamRITlFjbWwyWEZ4QmNtbGphSFJsYTNSMWNtRk5Wa05jWEU5UFVGeGNibTlrWlY5dGIyUjFiR1Z6WEZ4aWNtOTNjMlZ5TFhCaFkydGNYRjl3Y21Wc2RXUmxMbXB6SWl3aVJEb3ZVMVJTVDA1WkwzWm9jeTlRY205cVpXTjBjMUJ5YVhZdlFYSnBZMmgwWld0MGRYSmhUVlpETDA5UFVDOXViMlJsWDIxdlpIVnNaWE12WW1GelpUWTBMV3B6TDJ4cFlpOWlOalF1YW5NaUxDSkVPaTlUVkZKUFRsa3ZkbWh6TDFCeWIycGxZM1J6VUhKcGRpOUJjbWxqYUhSbGEzUjFjbUZOVmtNdlQwOVFMMjV2WkdWZmJXOWtkV3hsY3k5aWRXWm1aWEl2YVc1a1pYZ3Vhbk1pTENKRU9pOVRWRkpQVGxrdmRtaHpMMUJ5YjJwbFkzUnpVSEpwZGk5QmNtbGphSFJsYTNSMWNtRk5Wa012VDA5UUwyNXZaR1ZmYlc5a2RXeGxjeTlwWldWbE56VTBMMmx1WkdWNExtcHpJaXdpUkRvdlUxUlNUMDVaTDNab2N5OVFjbTlxWldOMGMxQnlhWFl2UVhKcFkyaDBaV3QwZFhKaFRWWkRMMDlQVUM5dWIyUmxYMjF2WkhWc1pYTXZjSEp2WTJWemN5OWljbTkzYzJWeUxtcHpJaXdpUkRvdlUxUlNUMDVaTDNab2N5OVFjbTlxWldOMGMxQnlhWFl2UVhKcFkyaDBaV3QwZFhKaFRWWkRMMDlQVUM5emNtTXZhbk12Wm1GclpWOWhZVEl4WVRWak5TNXFjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lRVUZCUVR0QlEwRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUXpsSVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTNac1EwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRM1JHUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRha1ZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU0lzSW1acGJHVWlPaUpuWlc1bGNtRjBaV1F1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaUtHWjFibU4wYVc5dUlHVW9kQ3h1TEhJcGUyWjFibU4wYVc5dUlITW9ieXgxS1h0cFppZ2hibHR2WFNsN2FXWW9JWFJiYjEwcGUzWmhjaUJoUFhSNWNHVnZaaUJ5WlhGMWFYSmxQVDFjSW1aMWJtTjBhVzl1WENJbUpuSmxjWFZwY21VN2FXWW9JWFVtSm1FcGNtVjBkWEp1SUdFb2J5d2hNQ2s3YVdZb2FTbHlaWFIxY200Z2FTaHZMQ0V3S1R0MGFISnZkeUJ1WlhjZ1JYSnliM0lvWENKRFlXNXViM1FnWm1sdVpDQnRiMlIxYkdVZ0oxd2lLMjhyWENJblhDSXBmWFpoY2lCbVBXNWJiMTA5ZTJWNGNHOXlkSE02ZTMxOU8zUmJiMTFiTUYwdVkyRnNiQ2htTG1WNGNHOXlkSE1zWm5WdVkzUnBiMjRvWlNsN2RtRnlJRzQ5ZEZ0dlhWc3hYVnRsWFR0eVpYUjFjbTRnY3lodVAyNDZaU2w5TEdZc1ppNWxlSEJ2Y25SekxHVXNkQ3h1TEhJcGZYSmxkSFZ5YmlCdVcyOWRMbVY0Y0c5eWRITjlkbUZ5SUdrOWRIbHdaVzltSUhKbGNYVnBjbVU5UFZ3aVpuVnVZM1JwYjI1Y0lpWW1jbVZ4ZFdseVpUdG1iM0lvZG1GeUlHODlNRHR2UEhJdWJHVnVaM1JvTzI4ckt5bHpLSEpiYjEwcE8zSmxkSFZ5YmlCemZTa2lMQ0lvWm5WdVkzUnBiMjRnS0hCeWIyTmxjM01zWjJ4dlltRnNMRUoxWm1abGNpeGZYMkZ5WjNWdFpXNTBNQ3hmWDJGeVozVnRaVzUwTVN4ZlgyRnlaM1Z0Wlc1ME1peGZYMkZ5WjNWdFpXNTBNeXhmWDJacGJHVnVZVzFsTEY5ZlpHbHlibUZ0WlNsN1hHNTJZWElnYkc5dmEzVndJRDBnSjBGQ1EwUkZSa2RJU1VwTFRFMU9UMUJSVWxOVVZWWlhXRmxhWVdKalpHVm1aMmhwYW10c2JXNXZjSEZ5YzNSMWRuZDRlWG93TVRJek5EVTJOemc1S3k4bk8xeHVYRzQ3S0daMWJtTjBhVzl1SUNobGVIQnZjblJ6S1NCN1hHNWNkQ2QxYzJVZ2MzUnlhV04wSnp0Y2JseHVJQ0IyWVhJZ1FYSnlJRDBnS0hSNWNHVnZaaUJWYVc1ME9FRnljbUY1SUNFOVBTQW5kVzVrWldacGJtVmtKeWxjYmlBZ0lDQS9JRlZwYm5RNFFYSnlZWGxjYmlBZ0lDQTZJRUZ5Y21GNVhHNWNibHgwZG1GeUlGQk1WVk1nSUNBOUlDY3JKeTVqYUdGeVEyOWtaVUYwS0RBcFhHNWNkSFpoY2lCVFRFRlRTQ0FnUFNBbkx5Y3VZMmhoY2tOdlpHVkJkQ2d3S1Z4dVhIUjJZWElnVGxWTlFrVlNJRDBnSnpBbkxtTm9ZWEpEYjJSbFFYUW9NQ2xjYmx4MGRtRnlJRXhQVjBWU0lDQTlJQ2RoSnk1amFHRnlRMjlrWlVGMEtEQXBYRzVjZEhaaGNpQlZVRkJGVWlBZ1BTQW5RU2N1WTJoaGNrTnZaR1ZCZENnd0tWeHVYSFIyWVhJZ1VFeFZVMTlWVWt4ZlUwRkdSU0E5SUNjdEp5NWphR0Z5UTI5a1pVRjBLREFwWEc1Y2RIWmhjaUJUVEVGVFNGOVZVa3hmVTBGR1JTQTlJQ2RmSnk1amFHRnlRMjlrWlVGMEtEQXBYRzVjYmx4MFpuVnVZM1JwYjI0Z1pHVmpiMlJsSUNobGJIUXBJSHRjYmx4MFhIUjJZWElnWTI5a1pTQTlJR1ZzZEM1amFHRnlRMjlrWlVGMEtEQXBYRzVjZEZ4MGFXWWdLR052WkdVZ1BUMDlJRkJNVlZNZ2ZIeGNibHgwWEhRZ0lDQWdZMjlrWlNBOVBUMGdVRXhWVTE5VlVreGZVMEZHUlNsY2JseDBYSFJjZEhKbGRIVnliaUEyTWlBdkx5QW5LeWRjYmx4MFhIUnBaaUFvWTI5a1pTQTlQVDBnVTB4QlUwZ2dmSHhjYmx4MFhIUWdJQ0FnWTI5a1pTQTlQVDBnVTB4QlUwaGZWVkpNWDFOQlJrVXBYRzVjZEZ4MFhIUnlaWFIxY200Z05qTWdMeThnSnk4blhHNWNkRngwYVdZZ0tHTnZaR1VnUENCT1ZVMUNSVklwWEc1Y2RGeDBYSFJ5WlhSMWNtNGdMVEVnTHk5dWJ5QnRZWFJqYUZ4dVhIUmNkR2xtSUNoamIyUmxJRHdnVGxWTlFrVlNJQ3NnTVRBcFhHNWNkRngwWEhSeVpYUjFjbTRnWTI5a1pTQXRJRTVWVFVKRlVpQXJJREkySUNzZ01qWmNibHgwWEhScFppQW9ZMjlrWlNBOElGVlFVRVZTSUNzZ01qWXBYRzVjZEZ4MFhIUnlaWFIxY200Z1kyOWtaU0F0SUZWUVVFVlNYRzVjZEZ4MGFXWWdLR052WkdVZ1BDQk1UMWRGVWlBcklESTJLVnh1WEhSY2RGeDBjbVYwZFhKdUlHTnZaR1VnTFNCTVQxZEZVaUFySURJMlhHNWNkSDFjYmx4dVhIUm1kVzVqZEdsdmJpQmlOalJVYjBKNWRHVkJjbkpoZVNBb1lqWTBLU0I3WEc1Y2RGeDBkbUZ5SUdrc0lHb3NJR3dzSUhSdGNDd2djR3hoWTJWSWIyeGtaWEp6TENCaGNuSmNibHh1WEhSY2RHbG1JQ2hpTmpRdWJHVnVaM1JvSUNVZ05DQStJREFwSUh0Y2JseDBYSFJjZEhSb2NtOTNJRzVsZHlCRmNuSnZjaWduU1c1MllXeHBaQ0J6ZEhKcGJtY3VJRXhsYm1kMGFDQnRkWE4wSUdKbElHRWdiWFZzZEdsd2JHVWdiMllnTkNjcFhHNWNkRngwZlZ4dVhHNWNkRngwTHk4Z2RHaGxJRzUxYldKbGNpQnZaaUJsY1hWaGJDQnphV2R1Y3lBb2NHeGhZMlVnYUc5c1pHVnljeWxjYmx4MFhIUXZMeUJwWmlCMGFHVnlaU0JoY21VZ2RIZHZJSEJzWVdObGFHOXNaR1Z5Y3l3Z2RHaGhiaUIwYUdVZ2RIZHZJR05vWVhKaFkzUmxjbk1nWW1WbWIzSmxJR2wwWEc1Y2RGeDBMeThnY21Wd2NtVnpaVzUwSUc5dVpTQmllWFJsWEc1Y2RGeDBMeThnYVdZZ2RHaGxjbVVnYVhNZ2IyNXNlU0J2Ym1Vc0lIUm9aVzRnZEdobElIUm9jbVZsSUdOb1lYSmhZM1JsY25NZ1ltVm1iM0psSUdsMElISmxjSEpsYzJWdWRDQXlJR0o1ZEdWelhHNWNkRngwTHk4Z2RHaHBjeUJwY3lCcWRYTjBJR0VnWTJobFlYQWdhR0ZqYXlCMGJ5QnViM1FnWkc4Z2FXNWtaWGhQWmlCMGQybGpaVnh1WEhSY2RIWmhjaUJzWlc0Z1BTQmlOalF1YkdWdVozUm9YRzVjZEZ4MGNHeGhZMlZJYjJ4a1pYSnpJRDBnSnowbklEMDlQU0JpTmpRdVkyaGhja0YwS0d4bGJpQXRJRElwSUQ4Z01pQTZJQ2M5SnlBOVBUMGdZalkwTG1Ob1lYSkJkQ2hzWlc0Z0xTQXhLU0EvSURFZ09pQXdYRzVjYmx4MFhIUXZMeUJpWVhObE5qUWdhWE1nTkM4eklDc2dkWEFnZEc4Z2RIZHZJR05vWVhKaFkzUmxjbk1nYjJZZ2RHaGxJRzl5YVdkcGJtRnNJR1JoZEdGY2JseDBYSFJoY25JZ1BTQnVaWGNnUVhKeUtHSTJOQzVzWlc1bmRHZ2dLaUF6SUM4Z05DQXRJSEJzWVdObFNHOXNaR1Z5Y3lsY2JseHVYSFJjZEM4dklHbG1JSFJvWlhKbElHRnlaU0J3YkdGalpXaHZiR1JsY25Nc0lHOXViSGtnWjJWMElIVndJSFJ2SUhSb1pTQnNZWE4wSUdOdmJYQnNaWFJsSURRZ1kyaGhjbk5jYmx4MFhIUnNJRDBnY0d4aFkyVkliMnhrWlhKeklENGdNQ0EvSUdJMk5DNXNaVzVuZEdnZ0xTQTBJRG9nWWpZMExteGxibWQwYUZ4dVhHNWNkRngwZG1GeUlFd2dQU0F3WEc1Y2JseDBYSFJtZFc1amRHbHZiaUJ3ZFhOb0lDaDJLU0I3WEc1Y2RGeDBYSFJoY25KYlRDc3JYU0E5SUhaY2JseDBYSFI5WEc1Y2JseDBYSFJtYjNJZ0tHa2dQU0F3TENCcUlEMGdNRHNnYVNBOElHdzdJR2tnS3owZ05Dd2dhaUFyUFNBektTQjdYRzVjZEZ4MFhIUjBiWEFnUFNBb1pHVmpiMlJsS0dJMk5DNWphR0Z5UVhRb2FTa3BJRHc4SURFNEtTQjhJQ2hrWldOdlpHVW9ZalkwTG1Ob1lYSkJkQ2hwSUNzZ01Ta3BJRHc4SURFeUtTQjhJQ2hrWldOdlpHVW9ZalkwTG1Ob1lYSkJkQ2hwSUNzZ01pa3BJRHc4SURZcElId2daR1ZqYjJSbEtHSTJOQzVqYUdGeVFYUW9hU0FySURNcEtWeHVYSFJjZEZ4MGNIVnphQ2dvZEcxd0lDWWdNSGhHUmpBd01EQXBJRDQrSURFMktWeHVYSFJjZEZ4MGNIVnphQ2dvZEcxd0lDWWdNSGhHUmpBd0tTQStQaUE0S1Z4dVhIUmNkRngwY0hWemFDaDBiWEFnSmlBd2VFWkdLVnh1WEhSY2RIMWNibHh1WEhSY2RHbG1JQ2h3YkdGalpVaHZiR1JsY25NZ1BUMDlJRElwSUh0Y2JseDBYSFJjZEhSdGNDQTlJQ2hrWldOdlpHVW9ZalkwTG1Ob1lYSkJkQ2hwS1NrZ1BEd2dNaWtnZkNBb1pHVmpiMlJsS0dJMk5DNWphR0Z5UVhRb2FTQXJJREVwS1NBK1BpQTBLVnh1WEhSY2RGeDBjSFZ6YUNoMGJYQWdKaUF3ZUVaR0tWeHVYSFJjZEgwZ1pXeHpaU0JwWmlBb2NHeGhZMlZJYjJ4a1pYSnpJRDA5UFNBeEtTQjdYRzVjZEZ4MFhIUjBiWEFnUFNBb1pHVmpiMlJsS0dJMk5DNWphR0Z5UVhRb2FTa3BJRHc4SURFd0tTQjhJQ2hrWldOdlpHVW9ZalkwTG1Ob1lYSkJkQ2hwSUNzZ01Ta3BJRHc4SURRcElId2dLR1JsWTI5a1pTaGlOalF1WTJoaGNrRjBLR2tnS3lBeUtTa2dQajRnTWlsY2JseDBYSFJjZEhCMWMyZ29LSFJ0Y0NBK1BpQTRLU0FtSURCNFJrWXBYRzVjZEZ4MFhIUndkWE5vS0hSdGNDQW1JREI0UmtZcFhHNWNkRngwZlZ4dVhHNWNkRngwY21WMGRYSnVJR0Z5Y2x4dVhIUjlYRzVjYmx4MFpuVnVZM1JwYjI0Z2RXbHVkRGhVYjBKaGMyVTJOQ0FvZFdsdWREZ3BJSHRjYmx4MFhIUjJZWElnYVN4Y2JseDBYSFJjZEdWNGRISmhRbmwwWlhNZ1BTQjFhVzUwT0M1c1pXNW5kR2dnSlNBekxDQXZMeUJwWmlCM1pTQm9ZWFpsSURFZ1lubDBaU0JzWldaMExDQndZV1FnTWlCaWVYUmxjMXh1WEhSY2RGeDBiM1YwY0hWMElEMGdYQ0pjSWl4Y2JseDBYSFJjZEhSbGJYQXNJR3hsYm1kMGFGeHVYRzVjZEZ4MFpuVnVZM1JwYjI0Z1pXNWpiMlJsSUNodWRXMHBJSHRjYmx4MFhIUmNkSEpsZEhWeWJpQnNiMjlyZFhBdVkyaGhja0YwS0c1MWJTbGNibHgwWEhSOVhHNWNibHgwWEhSbWRXNWpkR2x2YmlCMGNtbHdiR1YwVkc5Q1lYTmxOalFnS0c1MWJTa2dlMXh1WEhSY2RGeDBjbVYwZFhKdUlHVnVZMjlrWlNodWRXMGdQajRnTVRnZ0ppQXdlRE5HS1NBcklHVnVZMjlrWlNodWRXMGdQajRnTVRJZ0ppQXdlRE5HS1NBcklHVnVZMjlrWlNodWRXMGdQajRnTmlBbUlEQjRNMFlwSUNzZ1pXNWpiMlJsS0c1MWJTQW1JREI0TTBZcFhHNWNkRngwZlZ4dVhHNWNkRngwTHk4Z1oyOGdkR2h5YjNWbmFDQjBhR1VnWVhKeVlYa2daWFpsY25rZ2RHaHlaV1VnWW5sMFpYTXNJSGRsSjJ4c0lHUmxZV3dnZDJsMGFDQjBjbUZwYkdsdVp5QnpkSFZtWmlCc1lYUmxjbHh1WEhSY2RHWnZjaUFvYVNBOUlEQXNJR3hsYm1kMGFDQTlJSFZwYm5RNExteGxibWQwYUNBdElHVjRkSEpoUW5sMFpYTTdJR2tnUENCc1pXNW5kR2c3SUdrZ0t6MGdNeWtnZTF4dVhIUmNkRngwZEdWdGNDQTlJQ2gxYVc1ME9GdHBYU0E4UENBeE5pa2dLeUFvZFdsdWREaGJhU0FySURGZElEdzhJRGdwSUNzZ0tIVnBiblE0VzJrZ0t5QXlYU2xjYmx4MFhIUmNkRzkxZEhCMWRDQXJQU0IwY21sd2JHVjBWRzlDWVhObE5qUW9kR1Z0Y0NsY2JseDBYSFI5WEc1Y2JseDBYSFF2THlCd1lXUWdkR2hsSUdWdVpDQjNhWFJvSUhwbGNtOXpMQ0JpZFhRZ2JXRnJaU0J6ZFhKbElIUnZJRzV2ZENCbWIzSm5aWFFnZEdobElHVjRkSEpoSUdKNWRHVnpYRzVjZEZ4MGMzZHBkR05vSUNobGVIUnlZVUo1ZEdWektTQjdYRzVjZEZ4MFhIUmpZWE5sSURFNlhHNWNkRngwWEhSY2RIUmxiWEFnUFNCMWFXNTBPRnQxYVc1ME9DNXNaVzVuZEdnZ0xTQXhYVnh1WEhSY2RGeDBYSFJ2ZFhSd2RYUWdLejBnWlc1amIyUmxLSFJsYlhBZ1BqNGdNaWxjYmx4MFhIUmNkRngwYjNWMGNIVjBJQ3M5SUdWdVkyOWtaU2dvZEdWdGNDQThQQ0EwS1NBbUlEQjRNMFlwWEc1Y2RGeDBYSFJjZEc5MWRIQjFkQ0FyUFNBblBUMG5YRzVjZEZ4MFhIUmNkR0p5WldGclhHNWNkRngwWEhSallYTmxJREk2WEc1Y2RGeDBYSFJjZEhSbGJYQWdQU0FvZFdsdWREaGJkV2x1ZERndWJHVnVaM1JvSUMwZ01sMGdQRHdnT0NrZ0t5QW9kV2x1ZERoYmRXbHVkRGd1YkdWdVozUm9JQzBnTVYwcFhHNWNkRngwWEhSY2RHOTFkSEIxZENBclBTQmxibU52WkdVb2RHVnRjQ0ErUGlBeE1DbGNibHgwWEhSY2RGeDBiM1YwY0hWMElDczlJR1Z1WTI5a1pTZ29kR1Z0Y0NBK1BpQTBLU0FtSURCNE0wWXBYRzVjZEZ4MFhIUmNkRzkxZEhCMWRDQXJQU0JsYm1OdlpHVW9LSFJsYlhBZ1BEd2dNaWtnSmlBd2VETkdLVnh1WEhSY2RGeDBYSFJ2ZFhSd2RYUWdLejBnSnowblhHNWNkRngwWEhSY2RHSnlaV0ZyWEc1Y2RGeDBmVnh1WEc1Y2RGeDBjbVYwZFhKdUlHOTFkSEIxZEZ4dVhIUjlYRzVjYmx4MFpYaHdiM0owY3k1MGIwSjVkR1ZCY25KaGVTQTlJR0kyTkZSdlFubDBaVUZ5Y21GNVhHNWNkR1Y0Y0c5eWRITXVabkp2YlVKNWRHVkJjbkpoZVNBOUlIVnBiblE0Vkc5Q1lYTmxOalJjYm4wb2RIbHdaVzltSUdWNGNHOXlkSE1nUFQwOUlDZDFibVJsWm1sdVpXUW5JRDhnS0hSb2FYTXVZbUZ6WlRZMGFuTWdQU0I3ZlNrZ09pQmxlSEJ2Y25SektTbGNibHh1ZlNrdVkyRnNiQ2gwYUdsekxISmxjWFZwY21Vb1hDSmxMMVVyT1RkY0lpa3NkSGx3Wlc5bUlITmxiR1lnSVQwOUlGd2lkVzVrWldacGJtVmtYQ0lnUHlCelpXeG1JRG9nZEhsd1pXOW1JSGRwYm1SdmR5QWhQVDBnWENKMWJtUmxabWx1WldSY0lpQS9JSGRwYm1SdmR5QTZJSHQ5TEhKbGNYVnBjbVVvWENKaWRXWm1aWEpjSWlrdVFuVm1abVZ5TEdGeVozVnRaVzUwYzFzelhTeGhjbWQxYldWdWRITmJORjBzWVhKbmRXMWxiblJ6V3pWZExHRnlaM1Z0Wlc1MGMxczJYU3hjSWk4dUxseGNYRnd1TGx4Y1hGeHViMlJsWDIxdlpIVnNaWE5jWEZ4Y1ltRnpaVFkwTFdwelhGeGNYR3hwWWx4Y1hGeGlOalF1YW5OY0lpeGNJaTh1TGx4Y1hGd3VMbHhjWEZ4dWIyUmxYMjF2WkhWc1pYTmNYRnhjWW1GelpUWTBMV3B6WEZ4Y1hHeHBZbHdpS1NJc0lpaG1kVzVqZEdsdmJpQW9jSEp2WTJWemN5eG5iRzlpWVd3c1FuVm1abVZ5TEY5ZllYSm5kVzFsYm5Rd0xGOWZZWEpuZFcxbGJuUXhMRjlmWVhKbmRXMWxiblF5TEY5ZllYSm5kVzFsYm5RekxGOWZabWxzWlc1aGJXVXNYMTlrYVhKdVlXMWxLWHRjYmk4cUlWeHVJQ29nVkdobElHSjFabVpsY2lCdGIyUjFiR1VnWm5KdmJTQnViMlJsTG1wekxDQm1iM0lnZEdobElHSnliM2R6WlhJdVhHNGdLbHh1SUNvZ1FHRjFkR2h2Y2lBZ0lFWmxjbTl6Y3lCQlltOTFhMmhoWkdscVpXZ2dQR1psY205emMwQm1aWEp2YzNNdWIzSm5QaUE4YUhSMGNEb3ZMMlpsY205emN5NXZjbWMrWEc0Z0tpQkFiR2xqWlc1elpTQWdUVWxVWEc0Z0tpOWNibHh1ZG1GeUlHSmhjMlUyTkNBOUlISmxjWFZwY21Vb0oySmhjMlUyTkMxcWN5Y3BYRzUyWVhJZ2FXVmxaVGMxTkNBOUlISmxjWFZwY21Vb0oybGxaV1UzTlRRbktWeHVYRzVsZUhCdmNuUnpMa0oxWm1abGNpQTlJRUoxWm1abGNseHVaWGh3YjNKMGN5NVRiRzkzUW5WbVptVnlJRDBnUW5WbVptVnlYRzVsZUhCdmNuUnpMa2xPVTFCRlExUmZUVUZZWDBKWlZFVlRJRDBnTlRCY2JrSjFabVpsY2k1d2IyOXNVMmw2WlNBOUlEZ3hPVEpjYmx4dUx5b3FYRzRnS2lCSlppQmdRblZtWm1WeUxsOTFjMlZVZVhCbFpFRnljbUY1YzJBNlhHNGdLaUFnSUQwOVBTQjBjblZsSUNBZ0lGVnpaU0JWYVc1ME9FRnljbUY1SUdsdGNHeGxiV1Z1ZEdGMGFXOXVJQ2htWVhOMFpYTjBLVnh1SUNvZ0lDQTlQVDBnWm1Gc2MyVWdJQ0JWYzJVZ1QySnFaV04wSUdsdGNHeGxiV1Z1ZEdGMGFXOXVJQ2hqYjIxd1lYUnBZbXhsSUdSdmQyNGdkRzhnU1VVMktWeHVJQ292WEc1Q2RXWm1aWEl1WDNWelpWUjVjR1ZrUVhKeVlYbHpJRDBnS0daMWJtTjBhVzl1SUNncElIdGNiaUFnTHk4Z1JHVjBaV04wSUdsbUlHSnliM2R6WlhJZ2MzVndjRzl5ZEhNZ1ZIbHdaV1FnUVhKeVlYbHpMaUJUZFhCd2IzSjBaV1FnWW5KdmQzTmxjbk1nWVhKbElFbEZJREV3S3l3Z1JtbHlaV1p2ZUNBMEt5eGNiaUFnTHk4Z1EyaHliMjFsSURjckxDQlRZV1poY21rZ05TNHhLeXdnVDNCbGNtRWdNVEV1Tmlzc0lHbFBVeUEwTGpJckxpQkpaaUIwYUdVZ1luSnZkM05sY2lCa2IyVnpJRzV2ZENCemRYQndiM0owSUdGa1pHbHVaMXh1SUNBdkx5QndjbTl3WlhKMGFXVnpJSFJ2SUdCVmFXNTBPRUZ5Y21GNVlDQnBibk4wWVc1alpYTXNJSFJvWlc0Z2RHaGhkQ2R6SUhSb1pTQnpZVzFsSUdGeklHNXZJR0JWYVc1ME9FRnljbUY1WUNCemRYQndiM0owWEc0Z0lDOHZJR0psWTJGMWMyVWdkMlVnYm1WbFpDQjBieUJpWlNCaFlteGxJSFJ2SUdGa1pDQmhiR3dnZEdobElHNXZaR1VnUW5WbVptVnlJRUZRU1NCdFpYUm9iMlJ6TGlCVWFHbHpJR2x6SUdGdUlHbHpjM1ZsWEc0Z0lDOHZJR2x1SUVacGNtVm1iM2dnTkMweU9TNGdUbTkzSUdacGVHVmtPaUJvZEhSd2N6b3ZMMkoxWjNwcGJHeGhMbTF2ZW1sc2JHRXViM0puTDNOb2IzZGZZblZuTG1ObmFUOXBaRDAyT1RVME16aGNiaUFnZEhKNUlIdGNiaUFnSUNCMllYSWdZblZtSUQwZ2JtVjNJRUZ5Y21GNVFuVm1abVZ5S0RBcFhHNGdJQ0FnZG1GeUlHRnljaUE5SUc1bGR5QlZhVzUwT0VGeWNtRjVLR0oxWmlsY2JpQWdJQ0JoY25JdVptOXZJRDBnWm5WdVkzUnBiMjRnS0NrZ2V5QnlaWFIxY200Z05ESWdmVnh1SUNBZ0lISmxkSFZ5YmlBME1pQTlQVDBnWVhKeUxtWnZieWdwSUNZbVhHNGdJQ0FnSUNBZ0lIUjVjR1Z2WmlCaGNuSXVjM1ZpWVhKeVlYa2dQVDA5SUNkbWRXNWpkR2x2YmljZ0x5OGdRMmh5YjIxbElEa3RNVEFnYkdGamF5QmdjM1ZpWVhKeVlYbGdYRzRnSUgwZ1kyRjBZMmdnS0dVcElIdGNiaUFnSUNCeVpYUjFjbTRnWm1Gc2MyVmNiaUFnZlZ4dWZTa29LVnh1WEc0dktpcGNiaUFxSUVOc1lYTnpPaUJDZFdabVpYSmNiaUFxSUQwOVBUMDlQVDA5UFQwOVBUMWNiaUFxWEc0Z0tpQlVhR1VnUW5WbVptVnlJR052Ym5OMGNuVmpkRzl5SUhKbGRIVnlibk1nYVc1emRHRnVZMlZ6SUc5bUlHQlZhVzUwT0VGeWNtRjVZQ0IwYUdGMElHRnlaU0JoZFdkdFpXNTBaV1JjYmlBcUlIZHBkR2dnWm5WdVkzUnBiMjRnY0hKdmNHVnlkR2xsY3lCbWIzSWdZV3hzSUhSb1pTQnViMlJsSUdCQ2RXWm1aWEpnSUVGUVNTQm1kVzVqZEdsdmJuTXVJRmRsSUhWelpWeHVJQ29nWUZWcGJuUTRRWEp5WVhsZ0lITnZJSFJvWVhRZ2MzRjFZWEpsSUdKeVlXTnJaWFFnYm05MFlYUnBiMjRnZDI5eWEzTWdZWE1nWlhod1pXTjBaV1FnTFMwZ2FYUWdjbVYwZFhKdWMxeHVJQ29nWVNCemFXNW5iR1VnYjJOMFpYUXVYRzRnS2x4dUlDb2dRbmtnWVhWbmJXVnVkR2x1WnlCMGFHVWdhVzV6ZEdGdVkyVnpMQ0IzWlNCallXNGdZWFp2YVdRZ2JXOWthV1o1YVc1bklIUm9aU0JnVldsdWREaEJjbkpoZVdCY2JpQXFJSEJ5YjNSdmRIbHdaUzVjYmlBcUwxeHVablZ1WTNScGIyNGdRblZtWm1WeUlDaHpkV0pxWldOMExDQmxibU52WkdsdVp5d2dibTlhWlhKdktTQjdYRzRnSUdsbUlDZ2hLSFJvYVhNZ2FXNXpkR0Z1WTJWdlppQkNkV1ptWlhJcEtWeHVJQ0FnSUhKbGRIVnliaUJ1WlhjZ1FuVm1abVZ5S0hOMVltcGxZM1FzSUdWdVkyOWthVzVuTENCdWIxcGxjbThwWEc1Y2JpQWdkbUZ5SUhSNWNHVWdQU0IwZVhCbGIyWWdjM1ZpYW1WamRGeHVYRzRnSUM4dklGZHZjbXRoY205MWJtUTZJRzV2WkdVbmN5QmlZWE5sTmpRZ2FXMXdiR1Z0Wlc1MFlYUnBiMjRnWVd4c2IzZHpJR1p2Y2lCdWIyNHRjR0ZrWkdWa0lITjBjbWx1WjNOY2JpQWdMeThnZDJocGJHVWdZbUZ6WlRZMExXcHpJR1J2WlhNZ2JtOTBMbHh1SUNCcFppQW9aVzVqYjJScGJtY2dQVDA5SUNkaVlYTmxOalFuSUNZbUlIUjVjR1VnUFQwOUlDZHpkSEpwYm1jbktTQjdYRzRnSUNBZ2MzVmlhbVZqZENBOUlITjBjbWx1WjNSeWFXMG9jM1ZpYW1WamRDbGNiaUFnSUNCM2FHbHNaU0FvYzNWaWFtVmpkQzVzWlc1bmRHZ2dKU0EwSUNFOVBTQXdLU0I3WEc0Z0lDQWdJQ0J6ZFdKcVpXTjBJRDBnYzNWaWFtVmpkQ0FySUNjOUoxeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lDOHZJRVpwYm1RZ2RHaGxJR3hsYm1kMGFGeHVJQ0IyWVhJZ2JHVnVaM1JvWEc0Z0lHbG1JQ2gwZVhCbElEMDlQU0FuYm5WdFltVnlKeWxjYmlBZ0lDQnNaVzVuZEdnZ1BTQmpiMlZ5WTJVb2MzVmlhbVZqZENsY2JpQWdaV3h6WlNCcFppQW9kSGx3WlNBOVBUMGdKM04wY21sdVp5Y3BYRzRnSUNBZ2JHVnVaM1JvSUQwZ1FuVm1abVZ5TG1KNWRHVk1aVzVuZEdnb2MzVmlhbVZqZEN3Z1pXNWpiMlJwYm1jcFhHNGdJR1ZzYzJVZ2FXWWdLSFI1Y0dVZ1BUMDlJQ2R2WW1wbFkzUW5LVnh1SUNBZ0lHeGxibWQwYUNBOUlHTnZaWEpqWlNoemRXSnFaV04wTG14bGJtZDBhQ2tnTHk4Z1lYTnpkVzFsSUhSb1lYUWdiMkpxWldOMElHbHpJR0Z5Y21GNUxXeHBhMlZjYmlBZ1pXeHpaVnh1SUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnblJtbHljM1FnWVhKbmRXMWxiblFnYm1WbFpITWdkRzhnWW1VZ1lTQnVkVzFpWlhJc0lHRnljbUY1SUc5eUlITjBjbWx1Wnk0bktWeHVYRzRnSUhaaGNpQmlkV1pjYmlBZ2FXWWdLRUoxWm1abGNpNWZkWE5sVkhsd1pXUkJjbkpoZVhNcElIdGNiaUFnSUNBdkx5QlFjbVZtWlhKeVpXUTZJRkpsZEhWeWJpQmhiaUJoZFdkdFpXNTBaV1FnWUZWcGJuUTRRWEp5WVhsZ0lHbHVjM1JoYm1ObElHWnZjaUJpWlhOMElIQmxjbVp2Y20xaGJtTmxYRzRnSUNBZ1luVm1JRDBnUW5WbVptVnlMbDloZFdkdFpXNTBLRzVsZHlCVmFXNTBPRUZ5Y21GNUtHeGxibWQwYUNrcFhHNGdJSDBnWld4elpTQjdYRzRnSUNBZ0x5OGdSbUZzYkdKaFkyczZJRkpsZEhWeWJpQlVTRWxUSUdsdWMzUmhibU5sSUc5bUlFSjFabVpsY2lBb1kzSmxZWFJsWkNCaWVTQmdibVYzWUNsY2JpQWdJQ0JpZFdZZ1BTQjBhR2x6WEc0Z0lDQWdZblZtTG14bGJtZDBhQ0E5SUd4bGJtZDBhRnh1SUNBZ0lHSjFaaTVmYVhOQ2RXWm1aWElnUFNCMGNuVmxYRzRnSUgxY2JseHVJQ0IyWVhJZ2FWeHVJQ0JwWmlBb1FuVm1abVZ5TGw5MWMyVlVlWEJsWkVGeWNtRjVjeUFtSmlCMGVYQmxiMllnYzNWaWFtVmpkQzVpZVhSbFRHVnVaM1JvSUQwOVBTQW5iblZ0WW1WeUp5a2dlMXh1SUNBZ0lDOHZJRk53WldWa0lHOXdkR2x0YVhwaGRHbHZiaUF0TFNCMWMyVWdjMlYwSUdsbUlIZGxKM0psSUdOdmNIbHBibWNnWm5KdmJTQmhJSFI1Y0dWa0lHRnljbUY1WEc0Z0lDQWdZblZtTGw5elpYUW9jM1ZpYW1WamRDbGNiaUFnZlNCbGJITmxJR2xtSUNocGMwRnljbUY1YVhOb0tITjFZbXBsWTNRcEtTQjdYRzRnSUNBZ0x5OGdWSEpsWVhRZ1lYSnlZWGt0YVhOb0lHOWlhbVZqZEhNZ1lYTWdZU0JpZVhSbElHRnljbUY1WEc0Z0lDQWdabTl5SUNocElEMGdNRHNnYVNBOElHeGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0JwWmlBb1FuVm1abVZ5TG1selFuVm1abVZ5S0hOMVltcGxZM1FwS1Z4dUlDQWdJQ0FnSUNCaWRXWmJhVjBnUFNCemRXSnFaV04wTG5KbFlXUlZTVzUwT0NocEtWeHVJQ0FnSUNBZ1pXeHpaVnh1SUNBZ0lDQWdJQ0JpZFdaYmFWMGdQU0J6ZFdKcVpXTjBXMmxkWEc0Z0lDQWdmVnh1SUNCOUlHVnNjMlVnYVdZZ0tIUjVjR1VnUFQwOUlDZHpkSEpwYm1jbktTQjdYRzRnSUNBZ1luVm1MbmR5YVhSbEtITjFZbXBsWTNRc0lEQXNJR1Z1WTI5a2FXNW5LVnh1SUNCOUlHVnNjMlVnYVdZZ0tIUjVjR1VnUFQwOUlDZHVkVzFpWlhJbklDWW1JQ0ZDZFdabVpYSXVYM1Z6WlZSNWNHVmtRWEp5WVhseklDWW1JQ0Z1YjFwbGNtOHBJSHRjYmlBZ0lDQm1iM0lnS0drZ1BTQXdPeUJwSUR3Z2JHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJR0oxWmx0cFhTQTlJREJjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0J5WlhSMWNtNGdZblZtWEc1OVhHNWNiaTh2SUZOVVFWUkpReUJOUlZSSVQwUlRYRzR2THlBOVBUMDlQVDA5UFQwOVBUMDlQVnh1WEc1Q2RXWm1aWEl1YVhORmJtTnZaR2x1WnlBOUlHWjFibU4wYVc5dUlDaGxibU52WkdsdVp5a2dlMXh1SUNCemQybDBZMmdnS0ZOMGNtbHVaeWhsYm1OdlpHbHVaeWt1ZEc5TWIzZGxja05oYzJVb0tTa2dlMXh1SUNBZ0lHTmhjMlVnSjJobGVDYzZYRzRnSUNBZ1kyRnpaU0FuZFhSbU9DYzZYRzRnSUNBZ1kyRnpaU0FuZFhSbUxUZ25PbHh1SUNBZ0lHTmhjMlVnSjJGelkybHBKenBjYmlBZ0lDQmpZWE5sSUNkaWFXNWhjbmtuT2x4dUlDQWdJR05oYzJVZ0oySmhjMlUyTkNjNlhHNGdJQ0FnWTJGelpTQW5jbUYzSnpwY2JpQWdJQ0JqWVhObElDZDFZM015SnpwY2JpQWdJQ0JqWVhObElDZDFZM010TWljNlhHNGdJQ0FnWTJGelpTQW5kWFJtTVRac1pTYzZYRzRnSUNBZ1kyRnpaU0FuZFhSbUxURTJiR1VuT2x4dUlDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdWY2JpQWdJQ0JrWldaaGRXeDBPbHh1SUNBZ0lDQWdjbVYwZFhKdUlHWmhiSE5sWEc0Z0lIMWNibjFjYmx4dVFuVm1abVZ5TG1selFuVm1abVZ5SUQwZ1puVnVZM1JwYjI0Z0tHSXBJSHRjYmlBZ2NtVjBkWEp1SUNFaEtHSWdJVDA5SUc1MWJHd2dKaVlnWWlBaFBUMGdkVzVrWldacGJtVmtJQ1ltSUdJdVgybHpRblZtWm1WeUtWeHVmVnh1WEc1Q2RXWm1aWEl1WW5sMFpVeGxibWQwYUNBOUlHWjFibU4wYVc5dUlDaHpkSElzSUdWdVkyOWthVzVuS1NCN1hHNGdJSFpoY2lCeVpYUmNiaUFnYzNSeUlEMGdjM1J5SUNzZ0p5ZGNiaUFnYzNkcGRHTm9JQ2hsYm1OdlpHbHVaeUI4ZkNBbmRYUm1PQ2NwSUh0Y2JpQWdJQ0JqWVhObElDZG9aWGduT2x4dUlDQWdJQ0FnY21WMElEMGdjM1J5TG14bGJtZDBhQ0F2SURKY2JpQWdJQ0FnSUdKeVpXRnJYRzRnSUNBZ1kyRnpaU0FuZFhSbU9DYzZYRzRnSUNBZ1kyRnpaU0FuZFhSbUxUZ25PbHh1SUNBZ0lDQWdjbVYwSUQwZ2RYUm1PRlJ2UW5sMFpYTW9jM1J5S1M1c1pXNW5kR2hjYmlBZ0lDQWdJR0p5WldGclhHNGdJQ0FnWTJGelpTQW5ZWE5qYVdrbk9seHVJQ0FnSUdOaGMyVWdKMkpwYm1GeWVTYzZYRzRnSUNBZ1kyRnpaU0FuY21GM0p6cGNiaUFnSUNBZ0lISmxkQ0E5SUhOMGNpNXNaVzVuZEdoY2JpQWdJQ0FnSUdKeVpXRnJYRzRnSUNBZ1kyRnpaU0FuWW1GelpUWTBKenBjYmlBZ0lDQWdJSEpsZENBOUlHSmhjMlUyTkZSdlFubDBaWE1vYzNSeUtTNXNaVzVuZEdoY2JpQWdJQ0FnSUdKeVpXRnJYRzRnSUNBZ1kyRnpaU0FuZFdOek1pYzZYRzRnSUNBZ1kyRnpaU0FuZFdOekxUSW5PbHh1SUNBZ0lHTmhjMlVnSjNWMFpqRTJiR1VuT2x4dUlDQWdJR05oYzJVZ0ozVjBaaTB4Tm14bEp6cGNiaUFnSUNBZ0lISmxkQ0E5SUhOMGNpNXNaVzVuZEdnZ0tpQXlYRzRnSUNBZ0lDQmljbVZoYTF4dUlDQWdJR1JsWm1GMWJIUTZYRzRnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0oxVnVhMjV2ZDI0Z1pXNWpiMlJwYm1jbktWeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCeVpYUmNibjFjYmx4dVFuVm1abVZ5TG1OdmJtTmhkQ0E5SUdaMWJtTjBhVzl1SUNoc2FYTjBMQ0IwYjNSaGJFeGxibWQwYUNrZ2UxeHVJQ0JoYzNObGNuUW9hWE5CY25KaGVTaHNhWE4wS1N3Z0oxVnpZV2RsT2lCQ2RXWm1aWEl1WTI5dVkyRjBLR3hwYzNRc0lGdDBiM1JoYkV4bGJtZDBhRjBwWEZ4dUp5QXJYRzRnSUNBZ0lDQW5iR2x6ZENCemFHOTFiR1FnWW1VZ1lXNGdRWEp5WVhrdUp5bGNibHh1SUNCcFppQW9iR2x6ZEM1c1pXNW5kR2dnUFQwOUlEQXBJSHRjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRUoxWm1abGNpZ3dLVnh1SUNCOUlHVnNjMlVnYVdZZ0tHeHBjM1F1YkdWdVozUm9JRDA5UFNBeEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUd4cGMzUmJNRjFjYmlBZ2ZWeHVYRzRnSUhaaGNpQnBYRzRnSUdsbUlDaDBlWEJsYjJZZ2RHOTBZV3hNWlc1bmRHZ2dJVDA5SUNkdWRXMWlaWEluS1NCN1hHNGdJQ0FnZEc5MFlXeE1aVzVuZEdnZ1BTQXdYRzRnSUNBZ1ptOXlJQ2hwSUQwZ01Ec2dhU0E4SUd4cGMzUXViR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0FnSUhSdmRHRnNUR1Z1WjNSb0lDczlJR3hwYzNSYmFWMHViR1Z1WjNSb1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ2RtRnlJR0oxWmlBOUlHNWxkeUJDZFdabVpYSW9kRzkwWVd4TVpXNW5kR2dwWEc0Z0lIWmhjaUJ3YjNNZ1BTQXdYRzRnSUdadmNpQW9hU0E5SURBN0lHa2dQQ0JzYVhOMExteGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdkbUZ5SUdsMFpXMGdQU0JzYVhOMFcybGRYRzRnSUNBZ2FYUmxiUzVqYjNCNUtHSjFaaXdnY0c5ektWeHVJQ0FnSUhCdmN5QXJQU0JwZEdWdExteGxibWQwYUZ4dUlDQjlYRzRnSUhKbGRIVnliaUJpZFdaY2JuMWNibHh1THk4Z1FsVkdSa1ZTSUVsT1UxUkJUa05GSUUxRlZFaFBSRk5jYmk4dklEMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5WEc1Y2JtWjFibU4wYVc5dUlGOW9aWGhYY21sMFpTQW9ZblZtTENCemRISnBibWNzSUc5bVpuTmxkQ3dnYkdWdVozUm9LU0I3WEc0Z0lHOW1abk5sZENBOUlFNTFiV0psY2lodlptWnpaWFFwSUh4OElEQmNiaUFnZG1GeUlISmxiV0ZwYm1sdVp5QTlJR0oxWmk1c1pXNW5kR2dnTFNCdlptWnpaWFJjYmlBZ2FXWWdLQ0ZzWlc1bmRHZ3BJSHRjYmlBZ0lDQnNaVzVuZEdnZ1BTQnlaVzFoYVc1cGJtZGNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQnNaVzVuZEdnZ1BTQk9kVzFpWlhJb2JHVnVaM1JvS1Z4dUlDQWdJR2xtSUNoc1pXNW5kR2dnUGlCeVpXMWhhVzVwYm1jcElIdGNiaUFnSUNBZ0lHeGxibWQwYUNBOUlISmxiV0ZwYm1sdVoxeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lDOHZJRzExYzNRZ1ltVWdZVzRnWlhabGJpQnVkVzFpWlhJZ2IyWWdaR2xuYVhSelhHNGdJSFpoY2lCemRISk1aVzRnUFNCemRISnBibWN1YkdWdVozUm9YRzRnSUdGemMyVnlkQ2h6ZEhKTVpXNGdKU0F5SUQwOVBTQXdMQ0FuU1c1MllXeHBaQ0JvWlhnZ2MzUnlhVzVuSnlsY2JseHVJQ0JwWmlBb2JHVnVaM1JvSUQ0Z2MzUnlUR1Z1SUM4Z01pa2dlMXh1SUNBZ0lHeGxibWQwYUNBOUlITjBja3hsYmlBdklESmNiaUFnZlZ4dUlDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJR3hsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnZG1GeUlHSjVkR1VnUFNCd1lYSnpaVWx1ZENoemRISnBibWN1YzNWaWMzUnlLR2tnS2lBeUxDQXlLU3dnTVRZcFhHNGdJQ0FnWVhOelpYSjBLQ0ZwYzA1aFRpaGllWFJsS1N3Z0owbHVkbUZzYVdRZ2FHVjRJSE4wY21sdVp5Y3BYRzRnSUNBZ1luVm1XMjltWm5ObGRDQXJJR2xkSUQwZ1lubDBaVnh1SUNCOVhHNGdJRUoxWm1abGNpNWZZMmhoY25OWGNtbDBkR1Z1SUQwZ2FTQXFJREpjYmlBZ2NtVjBkWEp1SUdsY2JuMWNibHh1Wm5WdVkzUnBiMjRnWDNWMFpqaFhjbWwwWlNBb1luVm1MQ0J6ZEhKcGJtY3NJRzltWm5ObGRDd2diR1Z1WjNSb0tTQjdYRzRnSUhaaGNpQmphR0Z5YzFkeWFYUjBaVzRnUFNCQ2RXWm1aWEl1WDJOb1lYSnpWM0pwZEhSbGJpQTlYRzRnSUNBZ1lteHBkRUoxWm1abGNpaDFkR1k0Vkc5Q2VYUmxjeWh6ZEhKcGJtY3BMQ0JpZFdZc0lHOW1abk5sZEN3Z2JHVnVaM1JvS1Z4dUlDQnlaWFIxY200Z1kyaGhjbk5YY21sMGRHVnVYRzU5WEc1Y2JtWjFibU4wYVc5dUlGOWhjMk5wYVZkeWFYUmxJQ2hpZFdZc0lITjBjbWx1Wnl3Z2IyWm1jMlYwTENCc1pXNW5kR2dwSUh0Y2JpQWdkbUZ5SUdOb1lYSnpWM0pwZEhSbGJpQTlJRUoxWm1abGNpNWZZMmhoY25OWGNtbDBkR1Z1SUQxY2JpQWdJQ0JpYkdsMFFuVm1abVZ5S0dGelkybHBWRzlDZVhSbGN5aHpkSEpwYm1jcExDQmlkV1lzSUc5bVpuTmxkQ3dnYkdWdVozUm9LVnh1SUNCeVpYUjFjbTRnWTJoaGNuTlhjbWwwZEdWdVhHNTlYRzVjYm1aMWJtTjBhVzl1SUY5aWFXNWhjbmxYY21sMFpTQW9ZblZtTENCemRISnBibWNzSUc5bVpuTmxkQ3dnYkdWdVozUm9LU0I3WEc0Z0lISmxkSFZ5YmlCZllYTmphV2xYY21sMFpTaGlkV1lzSUhOMGNtbHVaeXdnYjJabWMyVjBMQ0JzWlc1bmRHZ3BYRzU5WEc1Y2JtWjFibU4wYVc5dUlGOWlZWE5sTmpSWGNtbDBaU0FvWW5WbUxDQnpkSEpwYm1jc0lHOW1abk5sZEN3Z2JHVnVaM1JvS1NCN1hHNGdJSFpoY2lCamFHRnljMWR5YVhSMFpXNGdQU0JDZFdabVpYSXVYMk5vWVhKelYzSnBkSFJsYmlBOVhHNGdJQ0FnWW14cGRFSjFabVpsY2loaVlYTmxOalJVYjBKNWRHVnpLSE4wY21sdVp5a3NJR0oxWml3Z2IyWm1jMlYwTENCc1pXNW5kR2dwWEc0Z0lISmxkSFZ5YmlCamFHRnljMWR5YVhSMFpXNWNibjFjYmx4dVpuVnVZM1JwYjI0Z1gzVjBaakUyYkdWWGNtbDBaU0FvWW5WbUxDQnpkSEpwYm1jc0lHOW1abk5sZEN3Z2JHVnVaM1JvS1NCN1hHNGdJSFpoY2lCamFHRnljMWR5YVhSMFpXNGdQU0JDZFdabVpYSXVYMk5vWVhKelYzSnBkSFJsYmlBOVhHNGdJQ0FnWW14cGRFSjFabVpsY2loMWRHWXhObXhsVkc5Q2VYUmxjeWh6ZEhKcGJtY3BMQ0JpZFdZc0lHOW1abk5sZEN3Z2JHVnVaM1JvS1Z4dUlDQnlaWFIxY200Z1kyaGhjbk5YY21sMGRHVnVYRzU5WEc1Y2JrSjFabVpsY2k1d2NtOTBiM1I1Y0dVdWQzSnBkR1VnUFNCbWRXNWpkR2x2YmlBb2MzUnlhVzVuTENCdlptWnpaWFFzSUd4bGJtZDBhQ3dnWlc1amIyUnBibWNwSUh0Y2JpQWdMeThnVTNWd2NHOXlkQ0JpYjNSb0lDaHpkSEpwYm1jc0lHOW1abk5sZEN3Z2JHVnVaM1JvTENCbGJtTnZaR2x1WnlsY2JpQWdMeThnWVc1a0lIUm9aU0JzWldkaFkza2dLSE4wY21sdVp5d2daVzVqYjJScGJtY3NJRzltWm5ObGRDd2diR1Z1WjNSb0tWeHVJQ0JwWmlBb2FYTkdhVzVwZEdVb2IyWm1jMlYwS1NrZ2UxeHVJQ0FnSUdsbUlDZ2hhWE5HYVc1cGRHVW9iR1Z1WjNSb0tTa2dlMXh1SUNBZ0lDQWdaVzVqYjJScGJtY2dQU0JzWlc1bmRHaGNiaUFnSUNBZ0lHeGxibWQwYUNBOUlIVnVaR1ZtYVc1bFpGeHVJQ0FnSUgxY2JpQWdmU0JsYkhObElIc2dJQzh2SUd4bFoyRmplVnh1SUNBZ0lIWmhjaUJ6ZDJGd0lEMGdaVzVqYjJScGJtZGNiaUFnSUNCbGJtTnZaR2x1WnlBOUlHOW1abk5sZEZ4dUlDQWdJRzltWm5ObGRDQTlJR3hsYm1kMGFGeHVJQ0FnSUd4bGJtZDBhQ0E5SUhOM1lYQmNiaUFnZlZ4dVhHNGdJRzltWm5ObGRDQTlJRTUxYldKbGNpaHZabVp6WlhRcElIeDhJREJjYmlBZ2RtRnlJSEpsYldGcGJtbHVaeUE5SUhSb2FYTXViR1Z1WjNSb0lDMGdiMlptYzJWMFhHNGdJR2xtSUNnaGJHVnVaM1JvS1NCN1hHNGdJQ0FnYkdWdVozUm9JRDBnY21WdFlXbHVhVzVuWEc0Z0lIMGdaV3h6WlNCN1hHNGdJQ0FnYkdWdVozUm9JRDBnVG5WdFltVnlLR3hsYm1kMGFDbGNiaUFnSUNCcFppQW9iR1Z1WjNSb0lENGdjbVZ0WVdsdWFXNW5LU0I3WEc0Z0lDQWdJQ0JzWlc1bmRHZ2dQU0J5WlcxaGFXNXBibWRjYmlBZ0lDQjlYRzRnSUgxY2JpQWdaVzVqYjJScGJtY2dQU0JUZEhKcGJtY29aVzVqYjJScGJtY2dmSHdnSjNWMFpqZ25LUzUwYjB4dmQyVnlRMkZ6WlNncFhHNWNiaUFnZG1GeUlISmxkRnh1SUNCemQybDBZMmdnS0dWdVkyOWthVzVuS1NCN1hHNGdJQ0FnWTJGelpTQW5hR1Y0SnpwY2JpQWdJQ0FnSUhKbGRDQTlJRjlvWlhoWGNtbDBaU2gwYUdsekxDQnpkSEpwYm1jc0lHOW1abk5sZEN3Z2JHVnVaM1JvS1Z4dUlDQWdJQ0FnWW5KbFlXdGNiaUFnSUNCallYTmxJQ2QxZEdZNEp6cGNiaUFnSUNCallYTmxJQ2QxZEdZdE9DYzZYRzRnSUNBZ0lDQnlaWFFnUFNCZmRYUm1PRmR5YVhSbEtIUm9hWE1zSUhOMGNtbHVaeXdnYjJabWMyVjBMQ0JzWlc1bmRHZ3BYRzRnSUNBZ0lDQmljbVZoYTF4dUlDQWdJR05oYzJVZ0oyRnpZMmxwSnpwY2JpQWdJQ0FnSUhKbGRDQTlJRjloYzJOcGFWZHlhWFJsS0hSb2FYTXNJSE4wY21sdVp5d2diMlptYzJWMExDQnNaVzVuZEdncFhHNGdJQ0FnSUNCaWNtVmhhMXh1SUNBZ0lHTmhjMlVnSjJKcGJtRnllU2M2WEc0Z0lDQWdJQ0J5WlhRZ1BTQmZZbWx1WVhKNVYzSnBkR1VvZEdocGN5d2djM1J5YVc1bkxDQnZabVp6WlhRc0lHeGxibWQwYUNsY2JpQWdJQ0FnSUdKeVpXRnJYRzRnSUNBZ1kyRnpaU0FuWW1GelpUWTBKenBjYmlBZ0lDQWdJSEpsZENBOUlGOWlZWE5sTmpSWGNtbDBaU2gwYUdsekxDQnpkSEpwYm1jc0lHOW1abk5sZEN3Z2JHVnVaM1JvS1Z4dUlDQWdJQ0FnWW5KbFlXdGNiaUFnSUNCallYTmxJQ2QxWTNNeUp6cGNiaUFnSUNCallYTmxJQ2QxWTNNdE1pYzZYRzRnSUNBZ1kyRnpaU0FuZFhSbU1UWnNaU2M2WEc0Z0lDQWdZMkZ6WlNBbmRYUm1MVEUyYkdVbk9seHVJQ0FnSUNBZ2NtVjBJRDBnWDNWMFpqRTJiR1ZYY21sMFpTaDBhR2x6TENCemRISnBibWNzSUc5bVpuTmxkQ3dnYkdWdVozUm9LVnh1SUNBZ0lDQWdZbkpsWVd0Y2JpQWdJQ0JrWldaaGRXeDBPbHh1SUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZFZibXR1YjNkdUlHVnVZMjlrYVc1bkp5bGNiaUFnZlZ4dUlDQnlaWFIxY200Z2NtVjBYRzU5WEc1Y2JrSjFabVpsY2k1d2NtOTBiM1I1Y0dVdWRHOVRkSEpwYm1jZ1BTQm1kVzVqZEdsdmJpQW9aVzVqYjJScGJtY3NJSE4wWVhKMExDQmxibVFwSUh0Y2JpQWdkbUZ5SUhObGJHWWdQU0IwYUdselhHNWNiaUFnWlc1amIyUnBibWNnUFNCVGRISnBibWNvWlc1amIyUnBibWNnZkh3Z0ozVjBaamduS1M1MGIweHZkMlZ5UTJGelpTZ3BYRzRnSUhOMFlYSjBJRDBnVG5WdFltVnlLSE4wWVhKMEtTQjhmQ0F3WEc0Z0lHVnVaQ0E5SUNobGJtUWdJVDA5SUhWdVpHVm1hVzVsWkNsY2JpQWdJQ0EvSUU1MWJXSmxjaWhsYm1RcFhHNGdJQ0FnT2lCbGJtUWdQU0J6Wld4bUxteGxibWQwYUZ4dVhHNGdJQzh2SUVaaGMzUndZWFJvSUdWdGNIUjVJSE4wY21sdVozTmNiaUFnYVdZZ0tHVnVaQ0E5UFQwZ2MzUmhjblFwWEc0Z0lDQWdjbVYwZFhKdUlDY25YRzVjYmlBZ2RtRnlJSEpsZEZ4dUlDQnpkMmwwWTJnZ0tHVnVZMjlrYVc1bktTQjdYRzRnSUNBZ1kyRnpaU0FuYUdWNEp6cGNiaUFnSUNBZ0lISmxkQ0E5SUY5b1pYaFRiR2xqWlNoelpXeG1MQ0J6ZEdGeWRDd2daVzVrS1Z4dUlDQWdJQ0FnWW5KbFlXdGNiaUFnSUNCallYTmxJQ2QxZEdZNEp6cGNiaUFnSUNCallYTmxJQ2QxZEdZdE9DYzZYRzRnSUNBZ0lDQnlaWFFnUFNCZmRYUm1PRk5zYVdObEtITmxiR1lzSUhOMFlYSjBMQ0JsYm1RcFhHNGdJQ0FnSUNCaWNtVmhhMXh1SUNBZ0lHTmhjMlVnSjJGelkybHBKenBjYmlBZ0lDQWdJSEpsZENBOUlGOWhjMk5wYVZOc2FXTmxLSE5sYkdZc0lITjBZWEowTENCbGJtUXBYRzRnSUNBZ0lDQmljbVZoYTF4dUlDQWdJR05oYzJVZ0oySnBibUZ5ZVNjNlhHNGdJQ0FnSUNCeVpYUWdQU0JmWW1sdVlYSjVVMnhwWTJVb2MyVnNaaXdnYzNSaGNuUXNJR1Z1WkNsY2JpQWdJQ0FnSUdKeVpXRnJYRzRnSUNBZ1kyRnpaU0FuWW1GelpUWTBKenBjYmlBZ0lDQWdJSEpsZENBOUlGOWlZWE5sTmpSVGJHbGpaU2h6Wld4bUxDQnpkR0Z5ZEN3Z1pXNWtLVnh1SUNBZ0lDQWdZbkpsWVd0Y2JpQWdJQ0JqWVhObElDZDFZM015SnpwY2JpQWdJQ0JqWVhObElDZDFZM010TWljNlhHNGdJQ0FnWTJGelpTQW5kWFJtTVRac1pTYzZYRzRnSUNBZ1kyRnpaU0FuZFhSbUxURTJiR1VuT2x4dUlDQWdJQ0FnY21WMElEMGdYM1YwWmpFMmJHVlRiR2xqWlNoelpXeG1MQ0J6ZEdGeWRDd2daVzVrS1Z4dUlDQWdJQ0FnWW5KbFlXdGNiaUFnSUNCa1pXWmhkV3gwT2x4dUlDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2RWYm10dWIzZHVJR1Z1WTI5a2FXNW5KeWxjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdjbVYwWEc1OVhHNWNia0oxWm1abGNpNXdjbTkwYjNSNWNHVXVkRzlLVTA5T0lEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQnlaWFIxY200Z2UxeHVJQ0FnSUhSNWNHVTZJQ2RDZFdabVpYSW5MRnh1SUNBZ0lHUmhkR0U2SUVGeWNtRjVMbkJ5YjNSdmRIbHdaUzV6YkdsalpTNWpZV3hzS0hSb2FYTXVYMkZ5Y2lCOGZDQjBhR2x6TENBd0tWeHVJQ0I5WEc1OVhHNWNiaTh2SUdOdmNIa29kR0Z5WjJWMFFuVm1abVZ5TENCMFlYSm5aWFJUZEdGeWREMHdMQ0J6YjNWeVkyVlRkR0Z5ZEQwd0xDQnpiM1Z5WTJWRmJtUTlZblZtWm1WeUxteGxibWQwYUNsY2JrSjFabVpsY2k1d2NtOTBiM1I1Y0dVdVkyOXdlU0E5SUdaMWJtTjBhVzl1SUNoMFlYSm5aWFFzSUhSaGNtZGxkRjl6ZEdGeWRDd2djM1JoY25Rc0lHVnVaQ2tnZTF4dUlDQjJZWElnYzI5MWNtTmxJRDBnZEdocGMxeHVYRzRnSUdsbUlDZ2hjM1JoY25RcElITjBZWEowSUQwZ01GeHVJQ0JwWmlBb0lXVnVaQ0FtSmlCbGJtUWdJVDA5SURBcElHVnVaQ0E5SUhSb2FYTXViR1Z1WjNSb1hHNGdJR2xtSUNnaGRHRnlaMlYwWDNOMFlYSjBLU0IwWVhKblpYUmZjM1JoY25RZ1BTQXdYRzVjYmlBZ0x5OGdRMjl3ZVNBd0lHSjVkR1Z6T3lCM1pTZHlaU0JrYjI1bFhHNGdJR2xtSUNobGJtUWdQVDA5SUhOMFlYSjBLU0J5WlhSMWNtNWNiaUFnYVdZZ0tIUmhjbWRsZEM1c1pXNW5kR2dnUFQwOUlEQWdmSHdnYzI5MWNtTmxMbXhsYm1kMGFDQTlQVDBnTUNrZ2NtVjBkWEp1WEc1Y2JpQWdMeThnUm1GMFlXd2daWEp5YjNJZ1kyOXVaR2wwYVc5dWMxeHVJQ0JoYzNObGNuUW9aVzVrSUQ0OUlITjBZWEowTENBbmMyOTFjbU5sUlc1a0lEd2djMjkxY21ObFUzUmhjblFuS1Z4dUlDQmhjM05sY25Rb2RHRnlaMlYwWDNOMFlYSjBJRDQ5SURBZ0ppWWdkR0Z5WjJWMFgzTjBZWEowSUR3Z2RHRnlaMlYwTG14bGJtZDBhQ3hjYmlBZ0lDQWdJQ2QwWVhKblpYUlRkR0Z5ZENCdmRYUWdiMllnWW05MWJtUnpKeWxjYmlBZ1lYTnpaWEowS0hOMFlYSjBJRDQ5SURBZ0ppWWdjM1JoY25RZ1BDQnpiM1Z5WTJVdWJHVnVaM1JvTENBbmMyOTFjbU5sVTNSaGNuUWdiM1YwSUc5bUlHSnZkVzVrY3ljcFhHNGdJR0Z6YzJWeWRDaGxibVFnUGowZ01DQW1KaUJsYm1RZ1BEMGdjMjkxY21ObExteGxibWQwYUN3Z0ozTnZkWEpqWlVWdVpDQnZkWFFnYjJZZ1ltOTFibVJ6SnlsY2JseHVJQ0F2THlCQmNtVWdkMlVnYjI5aVAxeHVJQ0JwWmlBb1pXNWtJRDRnZEdocGN5NXNaVzVuZEdncFhHNGdJQ0FnWlc1a0lEMGdkR2hwY3k1c1pXNW5kR2hjYmlBZ2FXWWdLSFJoY21kbGRDNXNaVzVuZEdnZ0xTQjBZWEpuWlhSZmMzUmhjblFnUENCbGJtUWdMU0J6ZEdGeWRDbGNiaUFnSUNCbGJtUWdQU0IwWVhKblpYUXViR1Z1WjNSb0lDMGdkR0Z5WjJWMFgzTjBZWEowSUNzZ2MzUmhjblJjYmx4dUlDQjJZWElnYkdWdUlEMGdaVzVrSUMwZ2MzUmhjblJjYmx4dUlDQnBaaUFvYkdWdUlEd2dNVEF3SUh4OElDRkNkV1ptWlhJdVgzVnpaVlI1Y0dWa1FYSnlZWGx6S1NCN1hHNGdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCc1pXNDdJR2tyS3lsY2JpQWdJQ0FnSUhSaGNtZGxkRnRwSUNzZ2RHRnlaMlYwWDNOMFlYSjBYU0E5SUhSb2FYTmJhU0FySUhOMFlYSjBYVnh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJSFJoY21kbGRDNWZjMlYwS0hSb2FYTXVjM1ZpWVhKeVlYa29jM1JoY25Rc0lITjBZWEowSUNzZ2JHVnVLU3dnZEdGeVoyVjBYM04wWVhKMEtWeHVJQ0I5WEc1OVhHNWNibVoxYm1OMGFXOXVJRjlpWVhObE5qUlRiR2xqWlNBb1luVm1MQ0J6ZEdGeWRDd2daVzVrS1NCN1hHNGdJR2xtSUNoemRHRnlkQ0E5UFQwZ01DQW1KaUJsYm1RZ1BUMDlJR0oxWmk1c1pXNW5kR2dwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdZbUZ6WlRZMExtWnliMjFDZVhSbFFYSnlZWGtvWW5WbUtWeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lISmxkSFZ5YmlCaVlYTmxOalF1Wm5KdmJVSjVkR1ZCY25KaGVTaGlkV1l1YzJ4cFkyVW9jM1JoY25Rc0lHVnVaQ2twWEc0Z0lIMWNibjFjYmx4dVpuVnVZM1JwYjI0Z1gzVjBaamhUYkdsalpTQW9ZblZtTENCemRHRnlkQ3dnWlc1a0tTQjdYRzRnSUhaaGNpQnlaWE1nUFNBbkoxeHVJQ0IyWVhJZ2RHMXdJRDBnSnlkY2JpQWdaVzVrSUQwZ1RXRjBhQzV0YVc0b1luVm1MbXhsYm1kMGFDd2daVzVrS1Z4dVhHNGdJR1p2Y2lBb2RtRnlJR2tnUFNCemRHRnlkRHNnYVNBOElHVnVaRHNnYVNzcktTQjdYRzRnSUNBZ2FXWWdLR0oxWmx0cFhTQThQU0F3ZURkR0tTQjdYRzRnSUNBZ0lDQnlaWE1nS3owZ1pHVmpiMlJsVlhSbU9FTm9ZWElvZEcxd0tTQXJJRk4wY21sdVp5NW1jbTl0UTJoaGNrTnZaR1VvWW5WbVcybGRLVnh1SUNBZ0lDQWdkRzF3SUQwZ0p5ZGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnZEcxd0lDczlJQ2NsSnlBcklHSjFabHRwWFM1MGIxTjBjbWx1WnlneE5pbGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQnlaWFIxY200Z2NtVnpJQ3NnWkdWamIyUmxWWFJtT0VOb1lYSW9kRzF3S1Z4dWZWeHVYRzVtZFc1amRHbHZiaUJmWVhOamFXbFRiR2xqWlNBb1luVm1MQ0J6ZEdGeWRDd2daVzVrS1NCN1hHNGdJSFpoY2lCeVpYUWdQU0FuSjF4dUlDQmxibVFnUFNCTllYUm9MbTFwYmloaWRXWXViR1Z1WjNSb0xDQmxibVFwWEc1Y2JpQWdabTl5SUNoMllYSWdhU0E5SUhOMFlYSjBPeUJwSUR3Z1pXNWtPeUJwS3lzcFhHNGdJQ0FnY21WMElDczlJRk4wY21sdVp5NW1jbTl0UTJoaGNrTnZaR1VvWW5WbVcybGRLVnh1SUNCeVpYUjFjbTRnY21WMFhHNTlYRzVjYm1aMWJtTjBhVzl1SUY5aWFXNWhjbmxUYkdsalpTQW9ZblZtTENCemRHRnlkQ3dnWlc1a0tTQjdYRzRnSUhKbGRIVnliaUJmWVhOamFXbFRiR2xqWlNoaWRXWXNJSE4wWVhKMExDQmxibVFwWEc1OVhHNWNibVoxYm1OMGFXOXVJRjlvWlhoVGJHbGpaU0FvWW5WbUxDQnpkR0Z5ZEN3Z1pXNWtLU0I3WEc0Z0lIWmhjaUJzWlc0Z1BTQmlkV1l1YkdWdVozUm9YRzVjYmlBZ2FXWWdLQ0Z6ZEdGeWRDQjhmQ0J6ZEdGeWRDQThJREFwSUhOMFlYSjBJRDBnTUZ4dUlDQnBaaUFvSVdWdVpDQjhmQ0JsYm1RZ1BDQXdJSHg4SUdWdVpDQStJR3hsYmlrZ1pXNWtJRDBnYkdWdVhHNWNiaUFnZG1GeUlHOTFkQ0E5SUNjblhHNGdJR1p2Y2lBb2RtRnlJR2tnUFNCemRHRnlkRHNnYVNBOElHVnVaRHNnYVNzcktTQjdYRzRnSUNBZ2IzVjBJQ3M5SUhSdlNHVjRLR0oxWmx0cFhTbGNiaUFnZlZ4dUlDQnlaWFIxY200Z2IzVjBYRzU5WEc1Y2JtWjFibU4wYVc5dUlGOTFkR1l4Tm14bFUyeHBZMlVnS0dKMVppd2djM1JoY25Rc0lHVnVaQ2tnZTF4dUlDQjJZWElnWW5sMFpYTWdQU0JpZFdZdWMyeHBZMlVvYzNSaGNuUXNJR1Z1WkNsY2JpQWdkbUZ5SUhKbGN5QTlJQ2NuWEc0Z0lHWnZjaUFvZG1GeUlHa2dQU0F3T3lCcElEd2dZbmwwWlhNdWJHVnVaM1JvT3lCcElDczlJRElwSUh0Y2JpQWdJQ0J5WlhNZ0t6MGdVM1J5YVc1bkxtWnliMjFEYUdGeVEyOWtaU2hpZVhSbGMxdHBYU0FySUdKNWRHVnpXMmtyTVYwZ0tpQXlOVFlwWEc0Z0lIMWNiaUFnY21WMGRYSnVJSEpsYzF4dWZWeHVYRzVDZFdabVpYSXVjSEp2ZEc5MGVYQmxMbk5zYVdObElEMGdablZ1WTNScGIyNGdLSE4wWVhKMExDQmxibVFwSUh0Y2JpQWdkbUZ5SUd4bGJpQTlJSFJvYVhNdWJHVnVaM1JvWEc0Z0lITjBZWEowSUQwZ1kyeGhiWEFvYzNSaGNuUXNJR3hsYml3Z01DbGNiaUFnWlc1a0lEMGdZMnhoYlhBb1pXNWtMQ0JzWlc0c0lHeGxiaWxjYmx4dUlDQnBaaUFvUW5WbVptVnlMbDkxYzJWVWVYQmxaRUZ5Y21GNWN5a2dlMXh1SUNBZ0lISmxkSFZ5YmlCQ2RXWm1aWEl1WDJGMVoyMWxiblFvZEdocGN5NXpkV0poY25KaGVTaHpkR0Z5ZEN3Z1pXNWtLU2xjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0IyWVhJZ2MyeHBZMlZNWlc0Z1BTQmxibVFnTFNCemRHRnlkRnh1SUNBZ0lIWmhjaUJ1WlhkQ2RXWWdQU0J1WlhjZ1FuVm1abVZ5S0hOc2FXTmxUR1Z1TENCMWJtUmxabWx1WldRc0lIUnlkV1VwWEc0Z0lDQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0J6YkdsalpVeGxianNnYVNzcktTQjdYRzRnSUNBZ0lDQnVaWGRDZFdaYmFWMGdQU0IwYUdselcya2dLeUJ6ZEdGeWRGMWNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJRzVsZDBKMVpseHVJQ0I5WEc1OVhHNWNiaTh2SUdCblpYUmdJSGRwYkd3Z1ltVWdjbVZ0YjNabFpDQnBiaUJPYjJSbElEQXVNVE1yWEc1Q2RXWm1aWEl1Y0hKdmRHOTBlWEJsTG1kbGRDQTlJR1oxYm1OMGFXOXVJQ2h2Wm1aelpYUXBJSHRjYmlBZ1kyOXVjMjlzWlM1c2IyY29KeTVuWlhRb0tTQnBjeUJrWlhCeVpXTmhkR1ZrTGlCQlkyTmxjM01nZFhOcGJtY2dZWEp5WVhrZ2FXNWtaWGhsY3lCcGJuTjBaV0ZrTGljcFhHNGdJSEpsZEhWeWJpQjBhR2x6TG5KbFlXUlZTVzUwT0NodlptWnpaWFFwWEc1OVhHNWNiaTh2SUdCelpYUmdJSGRwYkd3Z1ltVWdjbVZ0YjNabFpDQnBiaUJPYjJSbElEQXVNVE1yWEc1Q2RXWm1aWEl1Y0hKdmRHOTBlWEJsTG5ObGRDQTlJR1oxYm1OMGFXOXVJQ2gyTENCdlptWnpaWFFwSUh0Y2JpQWdZMjl1YzI5c1pTNXNiMmNvSnk1elpYUW9LU0JwY3lCa1pYQnlaV05oZEdWa0xpQkJZMk5sYzNNZ2RYTnBibWNnWVhKeVlYa2dhVzVrWlhobGN5QnBibk4wWldGa0xpY3BYRzRnSUhKbGRIVnliaUIwYUdsekxuZHlhWFJsVlVsdWREZ29kaXdnYjJabWMyVjBLVnh1ZlZ4dVhHNUNkV1ptWlhJdWNISnZkRzkwZVhCbExuSmxZV1JWU1c1ME9DQTlJR1oxYm1OMGFXOXVJQ2h2Wm1aelpYUXNJRzV2UVhOelpYSjBLU0I3WEc0Z0lHbG1JQ2doYm05QmMzTmxjblFwSUh0Y2JpQWdJQ0JoYzNObGNuUW9iMlptYzJWMElDRTlQU0IxYm1SbFptbHVaV1FnSmlZZ2IyWm1jMlYwSUNFOVBTQnVkV3hzTENBbmJXbHpjMmx1WnlCdlptWnpaWFFuS1Z4dUlDQWdJR0Z6YzJWeWRDaHZabVp6WlhRZ1BDQjBhR2x6TG14bGJtZDBhQ3dnSjFSeWVXbHVaeUIwYnlCeVpXRmtJR0psZVc5dVpDQmlkV1ptWlhJZ2JHVnVaM1JvSnlsY2JpQWdmVnh1WEc0Z0lHbG1JQ2h2Wm1aelpYUWdQajBnZEdocGN5NXNaVzVuZEdncFhHNGdJQ0FnY21WMGRYSnVYRzVjYmlBZ2NtVjBkWEp1SUhSb2FYTmJiMlptYzJWMFhWeHVmVnh1WEc1bWRXNWpkR2x2YmlCZmNtVmhaRlZKYm5ReE5pQW9ZblZtTENCdlptWnpaWFFzSUd4cGRIUnNaVVZ1WkdsaGJpd2dibTlCYzNObGNuUXBJSHRjYmlBZ2FXWWdLQ0Z1YjBGemMyVnlkQ2tnZTF4dUlDQWdJR0Z6YzJWeWRDaDBlWEJsYjJZZ2JHbDBkR3hsUlc1a2FXRnVJRDA5UFNBblltOXZiR1ZoYmljc0lDZHRhWE56YVc1bklHOXlJR2x1ZG1Gc2FXUWdaVzVrYVdGdUp5bGNiaUFnSUNCaGMzTmxjblFvYjJabWMyVjBJQ0U5UFNCMWJtUmxabWx1WldRZ0ppWWdiMlptYzJWMElDRTlQU0J1ZFd4c0xDQW5iV2x6YzJsdVp5QnZabVp6WlhRbktWeHVJQ0FnSUdGemMyVnlkQ2h2Wm1aelpYUWdLeUF4SUR3Z1luVm1MbXhsYm1kMGFDd2dKMVJ5ZVdsdVp5QjBieUJ5WldGa0lHSmxlVzl1WkNCaWRXWm1aWElnYkdWdVozUm9KeWxjYmlBZ2ZWeHVYRzRnSUhaaGNpQnNaVzRnUFNCaWRXWXViR1Z1WjNSb1hHNGdJR2xtSUNodlptWnpaWFFnUGowZ2JHVnVLVnh1SUNBZ0lISmxkSFZ5Ymx4dVhHNGdJSFpoY2lCMllXeGNiaUFnYVdZZ0tHeHBkSFJzWlVWdVpHbGhiaWtnZTF4dUlDQWdJSFpoYkNBOUlHSjFabHR2Wm1aelpYUmRYRzRnSUNBZ2FXWWdLRzltWm5ObGRDQXJJREVnUENCc1pXNHBYRzRnSUNBZ0lDQjJZV3dnZkQwZ1luVm1XMjltWm5ObGRDQXJJREZkSUR3OElEaGNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQjJZV3dnUFNCaWRXWmJiMlptYzJWMFhTQThQQ0E0WEc0Z0lDQWdhV1lnS0c5bVpuTmxkQ0FySURFZ1BDQnNaVzRwWEc0Z0lDQWdJQ0IyWVd3Z2ZEMGdZblZtVzI5bVpuTmxkQ0FySURGZFhHNGdJSDFjYmlBZ2NtVjBkWEp1SUhaaGJGeHVmVnh1WEc1Q2RXWm1aWEl1Y0hKdmRHOTBlWEJsTG5KbFlXUlZTVzUwTVRaTVJTQTlJR1oxYm1OMGFXOXVJQ2h2Wm1aelpYUXNJRzV2UVhOelpYSjBLU0I3WEc0Z0lISmxkSFZ5YmlCZmNtVmhaRlZKYm5ReE5paDBhR2x6TENCdlptWnpaWFFzSUhSeWRXVXNJRzV2UVhOelpYSjBLVnh1ZlZ4dVhHNUNkV1ptWlhJdWNISnZkRzkwZVhCbExuSmxZV1JWU1c1ME1UWkNSU0E5SUdaMWJtTjBhVzl1SUNodlptWnpaWFFzSUc1dlFYTnpaWEowS1NCN1hHNGdJSEpsZEhWeWJpQmZjbVZoWkZWSmJuUXhOaWgwYUdsekxDQnZabVp6WlhRc0lHWmhiSE5sTENCdWIwRnpjMlZ5ZENsY2JuMWNibHh1Wm5WdVkzUnBiMjRnWDNKbFlXUlZTVzUwTXpJZ0tHSjFaaXdnYjJabWMyVjBMQ0JzYVhSMGJHVkZibVJwWVc0c0lHNXZRWE56WlhKMEtTQjdYRzRnSUdsbUlDZ2hibTlCYzNObGNuUXBJSHRjYmlBZ0lDQmhjM05sY25Rb2RIbHdaVzltSUd4cGRIUnNaVVZ1WkdsaGJpQTlQVDBnSjJKdmIyeGxZVzRuTENBbmJXbHpjMmx1WnlCdmNpQnBiblpoYkdsa0lHVnVaR2xoYmljcFhHNGdJQ0FnWVhOelpYSjBLRzltWm5ObGRDQWhQVDBnZFc1a1pXWnBibVZrSUNZbUlHOW1abk5sZENBaFBUMGdiblZzYkN3Z0oyMXBjM05wYm1jZ2IyWm1jMlYwSnlsY2JpQWdJQ0JoYzNObGNuUW9iMlptYzJWMElDc2dNeUE4SUdKMVppNXNaVzVuZEdnc0lDZFVjbmxwYm1jZ2RHOGdjbVZoWkNCaVpYbHZibVFnWW5WbVptVnlJR3hsYm1kMGFDY3BYRzRnSUgxY2JseHVJQ0IyWVhJZ2JHVnVJRDBnWW5WbUxteGxibWQwYUZ4dUlDQnBaaUFvYjJabWMyVjBJRDQ5SUd4bGJpbGNiaUFnSUNCeVpYUjFjbTVjYmx4dUlDQjJZWElnZG1Gc1hHNGdJR2xtSUNoc2FYUjBiR1ZGYm1ScFlXNHBJSHRjYmlBZ0lDQnBaaUFvYjJabWMyVjBJQ3NnTWlBOElHeGxiaWxjYmlBZ0lDQWdJSFpoYkNBOUlHSjFabHR2Wm1aelpYUWdLeUF5WFNBOFBDQXhObHh1SUNBZ0lHbG1JQ2h2Wm1aelpYUWdLeUF4SUR3Z2JHVnVLVnh1SUNBZ0lDQWdkbUZzSUh3OUlHSjFabHR2Wm1aelpYUWdLeUF4WFNBOFBDQTRYRzRnSUNBZ2RtRnNJSHc5SUdKMVpsdHZabVp6WlhSZFhHNGdJQ0FnYVdZZ0tHOW1abk5sZENBcklETWdQQ0JzWlc0cFhHNGdJQ0FnSUNCMllXd2dQU0IyWVd3Z0t5QW9ZblZtVzI5bVpuTmxkQ0FySUROZElEdzhJREkwSUQ0K1BpQXdLVnh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJR2xtSUNodlptWnpaWFFnS3lBeElEd2diR1Z1S1Z4dUlDQWdJQ0FnZG1Gc0lEMGdZblZtVzI5bVpuTmxkQ0FySURGZElEdzhJREUyWEc0Z0lDQWdhV1lnS0c5bVpuTmxkQ0FySURJZ1BDQnNaVzRwWEc0Z0lDQWdJQ0IyWVd3Z2ZEMGdZblZtVzI5bVpuTmxkQ0FySURKZElEdzhJRGhjYmlBZ0lDQnBaaUFvYjJabWMyVjBJQ3NnTXlBOElHeGxiaWxjYmlBZ0lDQWdJSFpoYkNCOFBTQmlkV1piYjJabWMyVjBJQ3NnTTExY2JpQWdJQ0IyWVd3Z1BTQjJZV3dnS3lBb1luVm1XMjltWm5ObGRGMGdQRHdnTWpRZ1BqNCtJREFwWEc0Z0lIMWNiaUFnY21WMGRYSnVJSFpoYkZ4dWZWeHVYRzVDZFdabVpYSXVjSEp2ZEc5MGVYQmxMbkpsWVdSVlNXNTBNekpNUlNBOUlHWjFibU4wYVc5dUlDaHZabVp6WlhRc0lHNXZRWE56WlhKMEtTQjdYRzRnSUhKbGRIVnliaUJmY21WaFpGVkpiblF6TWloMGFHbHpMQ0J2Wm1aelpYUXNJSFJ5ZFdVc0lHNXZRWE56WlhKMEtWeHVmVnh1WEc1Q2RXWm1aWEl1Y0hKdmRHOTBlWEJsTG5KbFlXUlZTVzUwTXpKQ1JTQTlJR1oxYm1OMGFXOXVJQ2h2Wm1aelpYUXNJRzV2UVhOelpYSjBLU0I3WEc0Z0lISmxkSFZ5YmlCZmNtVmhaRlZKYm5Rek1paDBhR2x6TENCdlptWnpaWFFzSUdaaGJITmxMQ0J1YjBGemMyVnlkQ2xjYm4xY2JseHVRblZtWm1WeUxuQnliM1J2ZEhsd1pTNXlaV0ZrU1c1ME9DQTlJR1oxYm1OMGFXOXVJQ2h2Wm1aelpYUXNJRzV2UVhOelpYSjBLU0I3WEc0Z0lHbG1JQ2doYm05QmMzTmxjblFwSUh0Y2JpQWdJQ0JoYzNObGNuUW9iMlptYzJWMElDRTlQU0IxYm1SbFptbHVaV1FnSmlZZ2IyWm1jMlYwSUNFOVBTQnVkV3hzTEZ4dUlDQWdJQ0FnSUNBbmJXbHpjMmx1WnlCdlptWnpaWFFuS1Z4dUlDQWdJR0Z6YzJWeWRDaHZabVp6WlhRZ1BDQjBhR2x6TG14bGJtZDBhQ3dnSjFSeWVXbHVaeUIwYnlCeVpXRmtJR0psZVc5dVpDQmlkV1ptWlhJZ2JHVnVaM1JvSnlsY2JpQWdmVnh1WEc0Z0lHbG1JQ2h2Wm1aelpYUWdQajBnZEdocGN5NXNaVzVuZEdncFhHNGdJQ0FnY21WMGRYSnVYRzVjYmlBZ2RtRnlJRzVsWnlBOUlIUm9hWE5iYjJabWMyVjBYU0FtSURCNE9EQmNiaUFnYVdZZ0tHNWxaeWxjYmlBZ0lDQnlaWFIxY200Z0tEQjRabVlnTFNCMGFHbHpXMjltWm5ObGRGMGdLeUF4S1NBcUlDMHhYRzRnSUdWc2MyVmNiaUFnSUNCeVpYUjFjbTRnZEdocGMxdHZabVp6WlhSZFhHNTlYRzVjYm1aMWJtTjBhVzl1SUY5eVpXRmtTVzUwTVRZZ0tHSjFaaXdnYjJabWMyVjBMQ0JzYVhSMGJHVkZibVJwWVc0c0lHNXZRWE56WlhKMEtTQjdYRzRnSUdsbUlDZ2hibTlCYzNObGNuUXBJSHRjYmlBZ0lDQmhjM05sY25Rb2RIbHdaVzltSUd4cGRIUnNaVVZ1WkdsaGJpQTlQVDBnSjJKdmIyeGxZVzRuTENBbmJXbHpjMmx1WnlCdmNpQnBiblpoYkdsa0lHVnVaR2xoYmljcFhHNGdJQ0FnWVhOelpYSjBLRzltWm5ObGRDQWhQVDBnZFc1a1pXWnBibVZrSUNZbUlHOW1abk5sZENBaFBUMGdiblZzYkN3Z0oyMXBjM05wYm1jZ2IyWm1jMlYwSnlsY2JpQWdJQ0JoYzNObGNuUW9iMlptYzJWMElDc2dNU0E4SUdKMVppNXNaVzVuZEdnc0lDZFVjbmxwYm1jZ2RHOGdjbVZoWkNCaVpYbHZibVFnWW5WbVptVnlJR3hsYm1kMGFDY3BYRzRnSUgxY2JseHVJQ0IyWVhJZ2JHVnVJRDBnWW5WbUxteGxibWQwYUZ4dUlDQnBaaUFvYjJabWMyVjBJRDQ5SUd4bGJpbGNiaUFnSUNCeVpYUjFjbTVjYmx4dUlDQjJZWElnZG1Gc0lEMGdYM0psWVdSVlNXNTBNVFlvWW5WbUxDQnZabVp6WlhRc0lHeHBkSFJzWlVWdVpHbGhiaXdnZEhKMVpTbGNiaUFnZG1GeUlHNWxaeUE5SUhaaGJDQW1JREI0T0RBd01GeHVJQ0JwWmlBb2JtVm5LVnh1SUNBZ0lISmxkSFZ5YmlBb01IaG1abVptSUMwZ2RtRnNJQ3NnTVNrZ0tpQXRNVnh1SUNCbGJITmxYRzRnSUNBZ2NtVjBkWEp1SUhaaGJGeHVmVnh1WEc1Q2RXWm1aWEl1Y0hKdmRHOTBlWEJsTG5KbFlXUkpiblF4Tmt4RklEMGdablZ1WTNScGIyNGdLRzltWm5ObGRDd2dibTlCYzNObGNuUXBJSHRjYmlBZ2NtVjBkWEp1SUY5eVpXRmtTVzUwTVRZb2RHaHBjeXdnYjJabWMyVjBMQ0IwY25WbExDQnViMEZ6YzJWeWRDbGNibjFjYmx4dVFuVm1abVZ5TG5CeWIzUnZkSGx3WlM1eVpXRmtTVzUwTVRaQ1JTQTlJR1oxYm1OMGFXOXVJQ2h2Wm1aelpYUXNJRzV2UVhOelpYSjBLU0I3WEc0Z0lISmxkSFZ5YmlCZmNtVmhaRWx1ZERFMktIUm9hWE1zSUc5bVpuTmxkQ3dnWm1Gc2MyVXNJRzV2UVhOelpYSjBLVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmZjbVZoWkVsdWRETXlJQ2hpZFdZc0lHOW1abk5sZEN3Z2JHbDBkR3hsUlc1a2FXRnVMQ0J1YjBGemMyVnlkQ2tnZTF4dUlDQnBaaUFvSVc1dlFYTnpaWEowS1NCN1hHNGdJQ0FnWVhOelpYSjBLSFI1Y0dWdlppQnNhWFIwYkdWRmJtUnBZVzRnUFQwOUlDZGliMjlzWldGdUp5d2dKMjFwYzNOcGJtY2diM0lnYVc1MllXeHBaQ0JsYm1ScFlXNG5LVnh1SUNBZ0lHRnpjMlZ5ZENodlptWnpaWFFnSVQwOUlIVnVaR1ZtYVc1bFpDQW1KaUJ2Wm1aelpYUWdJVDA5SUc1MWJHd3NJQ2R0YVhOemFXNW5JRzltWm5ObGRDY3BYRzRnSUNBZ1lYTnpaWEowS0c5bVpuTmxkQ0FySURNZ1BDQmlkV1l1YkdWdVozUm9MQ0FuVkhKNWFXNW5JSFJ2SUhKbFlXUWdZbVY1YjI1a0lHSjFabVpsY2lCc1pXNW5kR2duS1Z4dUlDQjlYRzVjYmlBZ2RtRnlJR3hsYmlBOUlHSjFaaTVzWlc1bmRHaGNiaUFnYVdZZ0tHOW1abk5sZENBK1BTQnNaVzRwWEc0Z0lDQWdjbVYwZFhKdVhHNWNiaUFnZG1GeUlIWmhiQ0E5SUY5eVpXRmtWVWx1ZERNeUtHSjFaaXdnYjJabWMyVjBMQ0JzYVhSMGJHVkZibVJwWVc0c0lIUnlkV1VwWEc0Z0lIWmhjaUJ1WldjZ1BTQjJZV3dnSmlBd2VEZ3dNREF3TURBd1hHNGdJR2xtSUNodVpXY3BYRzRnSUNBZ2NtVjBkWEp1SUNnd2VHWm1abVptWm1abUlDMGdkbUZzSUNzZ01Ta2dLaUF0TVZ4dUlDQmxiSE5sWEc0Z0lDQWdjbVYwZFhKdUlIWmhiRnh1ZlZ4dVhHNUNkV1ptWlhJdWNISnZkRzkwZVhCbExuSmxZV1JKYm5Rek1reEZJRDBnWm5WdVkzUnBiMjRnS0c5bVpuTmxkQ3dnYm05QmMzTmxjblFwSUh0Y2JpQWdjbVYwZFhKdUlGOXlaV0ZrU1c1ME16SW9kR2hwY3l3Z2IyWm1jMlYwTENCMGNuVmxMQ0J1YjBGemMyVnlkQ2xjYm4xY2JseHVRblZtWm1WeUxuQnliM1J2ZEhsd1pTNXlaV0ZrU1c1ME16SkNSU0E5SUdaMWJtTjBhVzl1SUNodlptWnpaWFFzSUc1dlFYTnpaWEowS1NCN1hHNGdJSEpsZEhWeWJpQmZjbVZoWkVsdWRETXlLSFJvYVhNc0lHOW1abk5sZEN3Z1ptRnNjMlVzSUc1dlFYTnpaWEowS1Z4dWZWeHVYRzVtZFc1amRHbHZiaUJmY21WaFpFWnNiMkYwSUNoaWRXWXNJRzltWm5ObGRDd2diR2wwZEd4bFJXNWthV0Z1TENCdWIwRnpjMlZ5ZENrZ2UxeHVJQ0JwWmlBb0lXNXZRWE56WlhKMEtTQjdYRzRnSUNBZ1lYTnpaWEowS0hSNWNHVnZaaUJzYVhSMGJHVkZibVJwWVc0Z1BUMDlJQ2RpYjI5c1pXRnVKeXdnSjIxcGMzTnBibWNnYjNJZ2FXNTJZV3hwWkNCbGJtUnBZVzRuS1Z4dUlDQWdJR0Z6YzJWeWRDaHZabVp6WlhRZ0t5QXpJRHdnWW5WbUxteGxibWQwYUN3Z0oxUnllV2x1WnlCMGJ5QnlaV0ZrSUdKbGVXOXVaQ0JpZFdabVpYSWdiR1Z1WjNSb0p5bGNiaUFnZlZ4dVhHNGdJSEpsZEhWeWJpQnBaV1ZsTnpVMExuSmxZV1FvWW5WbUxDQnZabVp6WlhRc0lHeHBkSFJzWlVWdVpHbGhiaXdnTWpNc0lEUXBYRzU5WEc1Y2JrSjFabVpsY2k1d2NtOTBiM1I1Y0dVdWNtVmhaRVpzYjJGMFRFVWdQU0JtZFc1amRHbHZiaUFvYjJabWMyVjBMQ0J1YjBGemMyVnlkQ2tnZTF4dUlDQnlaWFIxY200Z1gzSmxZV1JHYkc5aGRDaDBhR2x6TENCdlptWnpaWFFzSUhSeWRXVXNJRzV2UVhOelpYSjBLVnh1ZlZ4dVhHNUNkV1ptWlhJdWNISnZkRzkwZVhCbExuSmxZV1JHYkc5aGRFSkZJRDBnWm5WdVkzUnBiMjRnS0c5bVpuTmxkQ3dnYm05QmMzTmxjblFwSUh0Y2JpQWdjbVYwZFhKdUlGOXlaV0ZrUm14dllYUW9kR2hwY3l3Z2IyWm1jMlYwTENCbVlXeHpaU3dnYm05QmMzTmxjblFwWEc1OVhHNWNibVoxYm1OMGFXOXVJRjl5WldGa1JHOTFZbXhsSUNoaWRXWXNJRzltWm5ObGRDd2diR2wwZEd4bFJXNWthV0Z1TENCdWIwRnpjMlZ5ZENrZ2UxeHVJQ0JwWmlBb0lXNXZRWE56WlhKMEtTQjdYRzRnSUNBZ1lYTnpaWEowS0hSNWNHVnZaaUJzYVhSMGJHVkZibVJwWVc0Z1BUMDlJQ2RpYjI5c1pXRnVKeXdnSjIxcGMzTnBibWNnYjNJZ2FXNTJZV3hwWkNCbGJtUnBZVzRuS1Z4dUlDQWdJR0Z6YzJWeWRDaHZabVp6WlhRZ0t5QTNJRHdnWW5WbUxteGxibWQwYUN3Z0oxUnllV2x1WnlCMGJ5QnlaV0ZrSUdKbGVXOXVaQ0JpZFdabVpYSWdiR1Z1WjNSb0p5bGNiaUFnZlZ4dVhHNGdJSEpsZEhWeWJpQnBaV1ZsTnpVMExuSmxZV1FvWW5WbUxDQnZabVp6WlhRc0lHeHBkSFJzWlVWdVpHbGhiaXdnTlRJc0lEZ3BYRzU5WEc1Y2JrSjFabVpsY2k1d2NtOTBiM1I1Y0dVdWNtVmhaRVJ2ZFdKc1pVeEZJRDBnWm5WdVkzUnBiMjRnS0c5bVpuTmxkQ3dnYm05QmMzTmxjblFwSUh0Y2JpQWdjbVYwZFhKdUlGOXlaV0ZrUkc5MVlteGxLSFJvYVhNc0lHOW1abk5sZEN3Z2RISjFaU3dnYm05QmMzTmxjblFwWEc1OVhHNWNia0oxWm1abGNpNXdjbTkwYjNSNWNHVXVjbVZoWkVSdmRXSnNaVUpGSUQwZ1puVnVZM1JwYjI0Z0tHOW1abk5sZEN3Z2JtOUJjM05sY25RcElIdGNiaUFnY21WMGRYSnVJRjl5WldGa1JHOTFZbXhsS0hSb2FYTXNJRzltWm5ObGRDd2dabUZzYzJVc0lHNXZRWE56WlhKMEtWeHVmVnh1WEc1Q2RXWm1aWEl1Y0hKdmRHOTBlWEJsTG5keWFYUmxWVWx1ZERnZ1BTQm1kVzVqZEdsdmJpQW9kbUZzZFdVc0lHOW1abk5sZEN3Z2JtOUJjM05sY25RcElIdGNiaUFnYVdZZ0tDRnViMEZ6YzJWeWRDa2dlMXh1SUNBZ0lHRnpjMlZ5ZENoMllXeDFaU0FoUFQwZ2RXNWtaV1pwYm1Wa0lDWW1JSFpoYkhWbElDRTlQU0J1ZFd4c0xDQW5iV2x6YzJsdVp5QjJZV3gxWlNjcFhHNGdJQ0FnWVhOelpYSjBLRzltWm5ObGRDQWhQVDBnZFc1a1pXWnBibVZrSUNZbUlHOW1abk5sZENBaFBUMGdiblZzYkN3Z0oyMXBjM05wYm1jZ2IyWm1jMlYwSnlsY2JpQWdJQ0JoYzNObGNuUW9iMlptYzJWMElEd2dkR2hwY3k1c1pXNW5kR2dzSUNkMGNubHBibWNnZEc4Z2QzSnBkR1VnWW1WNWIyNWtJR0oxWm1abGNpQnNaVzVuZEdnbktWeHVJQ0FnSUhabGNtbG1kV2x1ZENoMllXeDFaU3dnTUhobVppbGNiaUFnZlZ4dVhHNGdJR2xtSUNodlptWnpaWFFnUGowZ2RHaHBjeTVzWlc1bmRHZ3BJSEpsZEhWeWJseHVYRzRnSUhSb2FYTmJiMlptYzJWMFhTQTlJSFpoYkhWbFhHNTlYRzVjYm1aMWJtTjBhVzl1SUY5M2NtbDBaVlZKYm5ReE5pQW9ZblZtTENCMllXeDFaU3dnYjJabWMyVjBMQ0JzYVhSMGJHVkZibVJwWVc0c0lHNXZRWE56WlhKMEtTQjdYRzRnSUdsbUlDZ2hibTlCYzNObGNuUXBJSHRjYmlBZ0lDQmhjM05sY25Rb2RtRnNkV1VnSVQwOUlIVnVaR1ZtYVc1bFpDQW1KaUIyWVd4MVpTQWhQVDBnYm5Wc2JDd2dKMjFwYzNOcGJtY2dkbUZzZFdVbktWeHVJQ0FnSUdGemMyVnlkQ2gwZVhCbGIyWWdiR2wwZEd4bFJXNWthV0Z1SUQwOVBTQW5ZbTl2YkdWaGJpY3NJQ2R0YVhOemFXNW5JRzl5SUdsdWRtRnNhV1FnWlc1a2FXRnVKeWxjYmlBZ0lDQmhjM05sY25Rb2IyWm1jMlYwSUNFOVBTQjFibVJsWm1sdVpXUWdKaVlnYjJabWMyVjBJQ0U5UFNCdWRXeHNMQ0FuYldsemMybHVaeUJ2Wm1aelpYUW5LVnh1SUNBZ0lHRnpjMlZ5ZENodlptWnpaWFFnS3lBeElEd2dZblZtTG14bGJtZDBhQ3dnSjNSeWVXbHVaeUIwYnlCM2NtbDBaU0JpWlhsdmJtUWdZblZtWm1WeUlHeGxibWQwYUNjcFhHNGdJQ0FnZG1WeWFXWjFhVzUwS0haaGJIVmxMQ0F3ZUdabVptWXBYRzRnSUgxY2JseHVJQ0IyWVhJZ2JHVnVJRDBnWW5WbUxteGxibWQwYUZ4dUlDQnBaaUFvYjJabWMyVjBJRDQ5SUd4bGJpbGNiaUFnSUNCeVpYUjFjbTVjYmx4dUlDQm1iM0lnS0haaGNpQnBJRDBnTUN3Z2FpQTlJRTFoZEdndWJXbHVLR3hsYmlBdElHOW1abk5sZEN3Z01pazdJR2tnUENCcU95QnBLeXNwSUh0Y2JpQWdJQ0JpZFdaYmIyWm1jMlYwSUNzZ2FWMGdQVnh1SUNBZ0lDQWdJQ0FvZG1Gc2RXVWdKaUFvTUhobVppQThQQ0FvT0NBcUlDaHNhWFIwYkdWRmJtUnBZVzRnUHlCcElEb2dNU0F0SUdrcEtTa3BJRDQrUGx4dUlDQWdJQ0FnSUNBZ0lDQWdLR3hwZEhSc1pVVnVaR2xoYmlBL0lHa2dPaUF4SUMwZ2FTa2dLaUE0WEc0Z0lIMWNibjFjYmx4dVFuVm1abVZ5TG5CeWIzUnZkSGx3WlM1M2NtbDBaVlZKYm5ReE5reEZJRDBnWm5WdVkzUnBiMjRnS0haaGJIVmxMQ0J2Wm1aelpYUXNJRzV2UVhOelpYSjBLU0I3WEc0Z0lGOTNjbWwwWlZWSmJuUXhOaWgwYUdsekxDQjJZV3gxWlN3Z2IyWm1jMlYwTENCMGNuVmxMQ0J1YjBGemMyVnlkQ2xjYm4xY2JseHVRblZtWm1WeUxuQnliM1J2ZEhsd1pTNTNjbWwwWlZWSmJuUXhOa0pGSUQwZ1puVnVZM1JwYjI0Z0tIWmhiSFZsTENCdlptWnpaWFFzSUc1dlFYTnpaWEowS1NCN1hHNGdJRjkzY21sMFpWVkpiblF4TmloMGFHbHpMQ0IyWVd4MVpTd2diMlptYzJWMExDQm1ZV3h6WlN3Z2JtOUJjM05sY25RcFhHNTlYRzVjYm1aMWJtTjBhVzl1SUY5M2NtbDBaVlZKYm5Rek1pQW9ZblZtTENCMllXeDFaU3dnYjJabWMyVjBMQ0JzYVhSMGJHVkZibVJwWVc0c0lHNXZRWE56WlhKMEtTQjdYRzRnSUdsbUlDZ2hibTlCYzNObGNuUXBJSHRjYmlBZ0lDQmhjM05sY25Rb2RtRnNkV1VnSVQwOUlIVnVaR1ZtYVc1bFpDQW1KaUIyWVd4MVpTQWhQVDBnYm5Wc2JDd2dKMjFwYzNOcGJtY2dkbUZzZFdVbktWeHVJQ0FnSUdGemMyVnlkQ2gwZVhCbGIyWWdiR2wwZEd4bFJXNWthV0Z1SUQwOVBTQW5ZbTl2YkdWaGJpY3NJQ2R0YVhOemFXNW5JRzl5SUdsdWRtRnNhV1FnWlc1a2FXRnVKeWxjYmlBZ0lDQmhjM05sY25Rb2IyWm1jMlYwSUNFOVBTQjFibVJsWm1sdVpXUWdKaVlnYjJabWMyVjBJQ0U5UFNCdWRXeHNMQ0FuYldsemMybHVaeUJ2Wm1aelpYUW5LVnh1SUNBZ0lHRnpjMlZ5ZENodlptWnpaWFFnS3lBeklEd2dZblZtTG14bGJtZDBhQ3dnSjNSeWVXbHVaeUIwYnlCM2NtbDBaU0JpWlhsdmJtUWdZblZtWm1WeUlHeGxibWQwYUNjcFhHNGdJQ0FnZG1WeWFXWjFhVzUwS0haaGJIVmxMQ0F3ZUdabVptWm1abVptS1Z4dUlDQjlYRzVjYmlBZ2RtRnlJR3hsYmlBOUlHSjFaaTVzWlc1bmRHaGNiaUFnYVdZZ0tHOW1abk5sZENBK1BTQnNaVzRwWEc0Z0lDQWdjbVYwZFhKdVhHNWNiaUFnWm05eUlDaDJZWElnYVNBOUlEQXNJR29nUFNCTllYUm9MbTFwYmloc1pXNGdMU0J2Wm1aelpYUXNJRFFwT3lCcElEd2dhanNnYVNzcktTQjdYRzRnSUNBZ1luVm1XMjltWm5ObGRDQXJJR2xkSUQxY2JpQWdJQ0FnSUNBZ0tIWmhiSFZsSUQ0K1BpQW9iR2wwZEd4bFJXNWthV0Z1SUQ4Z2FTQTZJRE1nTFNCcEtTQXFJRGdwSUNZZ01IaG1abHh1SUNCOVhHNTlYRzVjYmtKMVptWmxjaTV3Y205MGIzUjVjR1V1ZDNKcGRHVlZTVzUwTXpKTVJTQTlJR1oxYm1OMGFXOXVJQ2gyWVd4MVpTd2diMlptYzJWMExDQnViMEZ6YzJWeWRDa2dlMXh1SUNCZmQzSnBkR1ZWU1c1ME16SW9kR2hwY3l3Z2RtRnNkV1VzSUc5bVpuTmxkQ3dnZEhKMVpTd2dibTlCYzNObGNuUXBYRzU5WEc1Y2JrSjFabVpsY2k1d2NtOTBiM1I1Y0dVdWQzSnBkR1ZWU1c1ME16SkNSU0E5SUdaMWJtTjBhVzl1SUNoMllXeDFaU3dnYjJabWMyVjBMQ0J1YjBGemMyVnlkQ2tnZTF4dUlDQmZkM0pwZEdWVlNXNTBNeklvZEdocGN5d2dkbUZzZFdVc0lHOW1abk5sZEN3Z1ptRnNjMlVzSUc1dlFYTnpaWEowS1Z4dWZWeHVYRzVDZFdabVpYSXVjSEp2ZEc5MGVYQmxMbmR5YVhSbFNXNTBPQ0E5SUdaMWJtTjBhVzl1SUNoMllXeDFaU3dnYjJabWMyVjBMQ0J1YjBGemMyVnlkQ2tnZTF4dUlDQnBaaUFvSVc1dlFYTnpaWEowS1NCN1hHNGdJQ0FnWVhOelpYSjBLSFpoYkhWbElDRTlQU0IxYm1SbFptbHVaV1FnSmlZZ2RtRnNkV1VnSVQwOUlHNTFiR3dzSUNkdGFYTnphVzVuSUhaaGJIVmxKeWxjYmlBZ0lDQmhjM05sY25Rb2IyWm1jMlYwSUNFOVBTQjFibVJsWm1sdVpXUWdKaVlnYjJabWMyVjBJQ0U5UFNCdWRXeHNMQ0FuYldsemMybHVaeUJ2Wm1aelpYUW5LVnh1SUNBZ0lHRnpjMlZ5ZENodlptWnpaWFFnUENCMGFHbHpMbXhsYm1kMGFDd2dKMVJ5ZVdsdVp5QjBieUIzY21sMFpTQmlaWGx2Ym1RZ1luVm1abVZ5SUd4bGJtZDBhQ2NwWEc0Z0lDQWdkbVZ5YVdaemFXNTBLSFpoYkhWbExDQXdlRGRtTENBdE1IZzRNQ2xjYmlBZ2ZWeHVYRzRnSUdsbUlDaHZabVp6WlhRZ1BqMGdkR2hwY3k1c1pXNW5kR2dwWEc0Z0lDQWdjbVYwZFhKdVhHNWNiaUFnYVdZZ0tIWmhiSFZsSUQ0OUlEQXBYRzRnSUNBZ2RHaHBjeTUzY21sMFpWVkpiblE0S0haaGJIVmxMQ0J2Wm1aelpYUXNJRzV2UVhOelpYSjBLVnh1SUNCbGJITmxYRzRnSUNBZ2RHaHBjeTUzY21sMFpWVkpiblE0S0RCNFptWWdLeUIyWVd4MVpTQXJJREVzSUc5bVpuTmxkQ3dnYm05QmMzTmxjblFwWEc1OVhHNWNibVoxYm1OMGFXOXVJRjkzY21sMFpVbHVkREUySUNoaWRXWXNJSFpoYkhWbExDQnZabVp6WlhRc0lHeHBkSFJzWlVWdVpHbGhiaXdnYm05QmMzTmxjblFwSUh0Y2JpQWdhV1lnS0NGdWIwRnpjMlZ5ZENrZ2UxeHVJQ0FnSUdGemMyVnlkQ2gyWVd4MVpTQWhQVDBnZFc1a1pXWnBibVZrSUNZbUlIWmhiSFZsSUNFOVBTQnVkV3hzTENBbmJXbHpjMmx1WnlCMllXeDFaU2NwWEc0Z0lDQWdZWE56WlhKMEtIUjVjR1Z2WmlCc2FYUjBiR1ZGYm1ScFlXNGdQVDA5SUNkaWIyOXNaV0Z1Snl3Z0oyMXBjM05wYm1jZ2IzSWdhVzUyWVd4cFpDQmxibVJwWVc0bktWeHVJQ0FnSUdGemMyVnlkQ2h2Wm1aelpYUWdJVDA5SUhWdVpHVm1hVzVsWkNBbUppQnZabVp6WlhRZ0lUMDlJRzUxYkd3c0lDZHRhWE56YVc1bklHOW1abk5sZENjcFhHNGdJQ0FnWVhOelpYSjBLRzltWm5ObGRDQXJJREVnUENCaWRXWXViR1Z1WjNSb0xDQW5WSEo1YVc1bklIUnZJSGR5YVhSbElHSmxlVzl1WkNCaWRXWm1aWElnYkdWdVozUm9KeWxjYmlBZ0lDQjJaWEpwWm5OcGJuUW9kbUZzZFdVc0lEQjROMlptWml3Z0xUQjRPREF3TUNsY2JpQWdmVnh1WEc0Z0lIWmhjaUJzWlc0Z1BTQmlkV1l1YkdWdVozUm9YRzRnSUdsbUlDaHZabVp6WlhRZ1BqMGdiR1Z1S1Z4dUlDQWdJSEpsZEhWeWJseHVYRzRnSUdsbUlDaDJZV3gxWlNBK1BTQXdLVnh1SUNBZ0lGOTNjbWwwWlZWSmJuUXhOaWhpZFdZc0lIWmhiSFZsTENCdlptWnpaWFFzSUd4cGRIUnNaVVZ1WkdsaGJpd2dibTlCYzNObGNuUXBYRzRnSUdWc2MyVmNiaUFnSUNCZmQzSnBkR1ZWU1c1ME1UWW9ZblZtTENBd2VHWm1abVlnS3lCMllXeDFaU0FySURFc0lHOW1abk5sZEN3Z2JHbDBkR3hsUlc1a2FXRnVMQ0J1YjBGemMyVnlkQ2xjYm4xY2JseHVRblZtWm1WeUxuQnliM1J2ZEhsd1pTNTNjbWwwWlVsdWRERTJURVVnUFNCbWRXNWpkR2x2YmlBb2RtRnNkV1VzSUc5bVpuTmxkQ3dnYm05QmMzTmxjblFwSUh0Y2JpQWdYM2R5YVhSbFNXNTBNVFlvZEdocGN5d2dkbUZzZFdVc0lHOW1abk5sZEN3Z2RISjFaU3dnYm05QmMzTmxjblFwWEc1OVhHNWNia0oxWm1abGNpNXdjbTkwYjNSNWNHVXVkM0pwZEdWSmJuUXhOa0pGSUQwZ1puVnVZM1JwYjI0Z0tIWmhiSFZsTENCdlptWnpaWFFzSUc1dlFYTnpaWEowS1NCN1hHNGdJRjkzY21sMFpVbHVkREUyS0hSb2FYTXNJSFpoYkhWbExDQnZabVp6WlhRc0lHWmhiSE5sTENCdWIwRnpjMlZ5ZENsY2JuMWNibHh1Wm5WdVkzUnBiMjRnWDNkeWFYUmxTVzUwTXpJZ0tHSjFaaXdnZG1Gc2RXVXNJRzltWm5ObGRDd2diR2wwZEd4bFJXNWthV0Z1TENCdWIwRnpjMlZ5ZENrZ2UxeHVJQ0JwWmlBb0lXNXZRWE56WlhKMEtTQjdYRzRnSUNBZ1lYTnpaWEowS0haaGJIVmxJQ0U5UFNCMWJtUmxabWx1WldRZ0ppWWdkbUZzZFdVZ0lUMDlJRzUxYkd3c0lDZHRhWE56YVc1bklIWmhiSFZsSnlsY2JpQWdJQ0JoYzNObGNuUW9kSGx3Wlc5bUlHeHBkSFJzWlVWdVpHbGhiaUE5UFQwZ0oySnZiMnhsWVc0bkxDQW5iV2x6YzJsdVp5QnZjaUJwYm5aaGJHbGtJR1Z1WkdsaGJpY3BYRzRnSUNBZ1lYTnpaWEowS0c5bVpuTmxkQ0FoUFQwZ2RXNWtaV1pwYm1Wa0lDWW1JRzltWm5ObGRDQWhQVDBnYm5Wc2JDd2dKMjFwYzNOcGJtY2diMlptYzJWMEp5bGNiaUFnSUNCaGMzTmxjblFvYjJabWMyVjBJQ3NnTXlBOElHSjFaaTVzWlc1bmRHZ3NJQ2RVY25scGJtY2dkRzhnZDNKcGRHVWdZbVY1YjI1a0lHSjFabVpsY2lCc1pXNW5kR2duS1Z4dUlDQWdJSFpsY21sbWMybHVkQ2gyWVd4MVpTd2dNSGczWm1abVptWm1aaXdnTFRCNE9EQXdNREF3TURBcFhHNGdJSDFjYmx4dUlDQjJZWElnYkdWdUlEMGdZblZtTG14bGJtZDBhRnh1SUNCcFppQW9iMlptYzJWMElENDlJR3hsYmlsY2JpQWdJQ0J5WlhSMWNtNWNibHh1SUNCcFppQW9kbUZzZFdVZ1BqMGdNQ2xjYmlBZ0lDQmZkM0pwZEdWVlNXNTBNeklvWW5WbUxDQjJZV3gxWlN3Z2IyWm1jMlYwTENCc2FYUjBiR1ZGYm1ScFlXNHNJRzV2UVhOelpYSjBLVnh1SUNCbGJITmxYRzRnSUNBZ1gzZHlhWFJsVlVsdWRETXlLR0oxWml3Z01IaG1abVptWm1abVppQXJJSFpoYkhWbElDc2dNU3dnYjJabWMyVjBMQ0JzYVhSMGJHVkZibVJwWVc0c0lHNXZRWE56WlhKMEtWeHVmVnh1WEc1Q2RXWm1aWEl1Y0hKdmRHOTBlWEJsTG5keWFYUmxTVzUwTXpKTVJTQTlJR1oxYm1OMGFXOXVJQ2gyWVd4MVpTd2diMlptYzJWMExDQnViMEZ6YzJWeWRDa2dlMXh1SUNCZmQzSnBkR1ZKYm5Rek1paDBhR2x6TENCMllXeDFaU3dnYjJabWMyVjBMQ0IwY25WbExDQnViMEZ6YzJWeWRDbGNibjFjYmx4dVFuVm1abVZ5TG5CeWIzUnZkSGx3WlM1M2NtbDBaVWx1ZERNeVFrVWdQU0JtZFc1amRHbHZiaUFvZG1Gc2RXVXNJRzltWm5ObGRDd2dibTlCYzNObGNuUXBJSHRjYmlBZ1gzZHlhWFJsU1c1ME16SW9kR2hwY3l3Z2RtRnNkV1VzSUc5bVpuTmxkQ3dnWm1Gc2MyVXNJRzV2UVhOelpYSjBLVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmZkM0pwZEdWR2JHOWhkQ0FvWW5WbUxDQjJZV3gxWlN3Z2IyWm1jMlYwTENCc2FYUjBiR1ZGYm1ScFlXNHNJRzV2UVhOelpYSjBLU0I3WEc0Z0lHbG1JQ2doYm05QmMzTmxjblFwSUh0Y2JpQWdJQ0JoYzNObGNuUW9kbUZzZFdVZ0lUMDlJSFZ1WkdWbWFXNWxaQ0FtSmlCMllXeDFaU0FoUFQwZ2JuVnNiQ3dnSjIxcGMzTnBibWNnZG1Gc2RXVW5LVnh1SUNBZ0lHRnpjMlZ5ZENoMGVYQmxiMllnYkdsMGRHeGxSVzVrYVdGdUlEMDlQU0FuWW05dmJHVmhiaWNzSUNkdGFYTnphVzVuSUc5eUlHbHVkbUZzYVdRZ1pXNWthV0Z1SnlsY2JpQWdJQ0JoYzNObGNuUW9iMlptYzJWMElDRTlQU0IxYm1SbFptbHVaV1FnSmlZZ2IyWm1jMlYwSUNFOVBTQnVkV3hzTENBbmJXbHpjMmx1WnlCdlptWnpaWFFuS1Z4dUlDQWdJR0Z6YzJWeWRDaHZabVp6WlhRZ0t5QXpJRHdnWW5WbUxteGxibWQwYUN3Z0oxUnllV2x1WnlCMGJ5QjNjbWwwWlNCaVpYbHZibVFnWW5WbVptVnlJR3hsYm1kMGFDY3BYRzRnSUNBZ2RtVnlhV1pKUlVWRk56VTBLSFpoYkhWbExDQXpMalF3TWpneU16UTJOak00TlRJNE9EWmxLek00TENBdE15NDBNREk0TWpNME5qWXpPRFV5T0RnMlpTc3pPQ2xjYmlBZ2ZWeHVYRzRnSUhaaGNpQnNaVzRnUFNCaWRXWXViR1Z1WjNSb1hHNGdJR2xtSUNodlptWnpaWFFnUGowZ2JHVnVLVnh1SUNBZ0lISmxkSFZ5Ymx4dVhHNGdJR2xsWldVM05UUXVkM0pwZEdVb1luVm1MQ0IyWVd4MVpTd2diMlptYzJWMExDQnNhWFIwYkdWRmJtUnBZVzRzSURJekxDQTBLVnh1ZlZ4dVhHNUNkV1ptWlhJdWNISnZkRzkwZVhCbExuZHlhWFJsUm14dllYUk1SU0E5SUdaMWJtTjBhVzl1SUNoMllXeDFaU3dnYjJabWMyVjBMQ0J1YjBGemMyVnlkQ2tnZTF4dUlDQmZkM0pwZEdWR2JHOWhkQ2gwYUdsekxDQjJZV3gxWlN3Z2IyWm1jMlYwTENCMGNuVmxMQ0J1YjBGemMyVnlkQ2xjYm4xY2JseHVRblZtWm1WeUxuQnliM1J2ZEhsd1pTNTNjbWwwWlVac2IyRjBRa1VnUFNCbWRXNWpkR2x2YmlBb2RtRnNkV1VzSUc5bVpuTmxkQ3dnYm05QmMzTmxjblFwSUh0Y2JpQWdYM2R5YVhSbFJteHZZWFFvZEdocGN5d2dkbUZzZFdVc0lHOW1abk5sZEN3Z1ptRnNjMlVzSUc1dlFYTnpaWEowS1Z4dWZWeHVYRzVtZFc1amRHbHZiaUJmZDNKcGRHVkViM1ZpYkdVZ0tHSjFaaXdnZG1Gc2RXVXNJRzltWm5ObGRDd2diR2wwZEd4bFJXNWthV0Z1TENCdWIwRnpjMlZ5ZENrZ2UxeHVJQ0JwWmlBb0lXNXZRWE56WlhKMEtTQjdYRzRnSUNBZ1lYTnpaWEowS0haaGJIVmxJQ0U5UFNCMWJtUmxabWx1WldRZ0ppWWdkbUZzZFdVZ0lUMDlJRzUxYkd3c0lDZHRhWE56YVc1bklIWmhiSFZsSnlsY2JpQWdJQ0JoYzNObGNuUW9kSGx3Wlc5bUlHeHBkSFJzWlVWdVpHbGhiaUE5UFQwZ0oySnZiMnhsWVc0bkxDQW5iV2x6YzJsdVp5QnZjaUJwYm5aaGJHbGtJR1Z1WkdsaGJpY3BYRzRnSUNBZ1lYTnpaWEowS0c5bVpuTmxkQ0FoUFQwZ2RXNWtaV1pwYm1Wa0lDWW1JRzltWm5ObGRDQWhQVDBnYm5Wc2JDd2dKMjFwYzNOcGJtY2diMlptYzJWMEp5bGNiaUFnSUNCaGMzTmxjblFvYjJabWMyVjBJQ3NnTnlBOElHSjFaaTVzWlc1bmRHZ3NYRzRnSUNBZ0lDQWdJQ2RVY25scGJtY2dkRzhnZDNKcGRHVWdZbVY1YjI1a0lHSjFabVpsY2lCc1pXNW5kR2duS1Z4dUlDQWdJSFpsY21sbVNVVkZSVGMxTkNoMllXeDFaU3dnTVM0M09UYzJPVE14TXpRNE5qSXpNVFUzUlNzek1EZ3NJQzB4TGpjNU56WTVNekV6TkRnMk1qTXhOVGRGS3pNd09DbGNiaUFnZlZ4dVhHNGdJSFpoY2lCc1pXNGdQU0JpZFdZdWJHVnVaM1JvWEc0Z0lHbG1JQ2h2Wm1aelpYUWdQajBnYkdWdUtWeHVJQ0FnSUhKbGRIVnlibHh1WEc0Z0lHbGxaV1UzTlRRdWQzSnBkR1VvWW5WbUxDQjJZV3gxWlN3Z2IyWm1jMlYwTENCc2FYUjBiR1ZGYm1ScFlXNHNJRFV5TENBNEtWeHVmVnh1WEc1Q2RXWm1aWEl1Y0hKdmRHOTBlWEJsTG5keWFYUmxSRzkxWW14bFRFVWdQU0JtZFc1amRHbHZiaUFvZG1Gc2RXVXNJRzltWm5ObGRDd2dibTlCYzNObGNuUXBJSHRjYmlBZ1gzZHlhWFJsUkc5MVlteGxLSFJvYVhNc0lIWmhiSFZsTENCdlptWnpaWFFzSUhSeWRXVXNJRzV2UVhOelpYSjBLVnh1ZlZ4dVhHNUNkV1ptWlhJdWNISnZkRzkwZVhCbExuZHlhWFJsUkc5MVlteGxRa1VnUFNCbWRXNWpkR2x2YmlBb2RtRnNkV1VzSUc5bVpuTmxkQ3dnYm05QmMzTmxjblFwSUh0Y2JpQWdYM2R5YVhSbFJHOTFZbXhsS0hSb2FYTXNJSFpoYkhWbExDQnZabVp6WlhRc0lHWmhiSE5sTENCdWIwRnpjMlZ5ZENsY2JuMWNibHh1THk4Z1ptbHNiQ2gyWVd4MVpTd2djM1JoY25ROU1Dd2daVzVrUFdKMVptWmxjaTVzWlc1bmRHZ3BYRzVDZFdabVpYSXVjSEp2ZEc5MGVYQmxMbVpwYkd3Z1BTQm1kVzVqZEdsdmJpQW9kbUZzZFdVc0lITjBZWEowTENCbGJtUXBJSHRjYmlBZ2FXWWdLQ0YyWVd4MVpTa2dkbUZzZFdVZ1BTQXdYRzRnSUdsbUlDZ2hjM1JoY25RcElITjBZWEowSUQwZ01GeHVJQ0JwWmlBb0lXVnVaQ2tnWlc1a0lEMGdkR2hwY3k1c1pXNW5kR2hjYmx4dUlDQnBaaUFvZEhsd1pXOW1JSFpoYkhWbElEMDlQU0FuYzNSeWFXNW5KeWtnZTF4dUlDQWdJSFpoYkhWbElEMGdkbUZzZFdVdVkyaGhja052WkdWQmRDZ3dLVnh1SUNCOVhHNWNiaUFnWVhOelpYSjBLSFI1Y0dWdlppQjJZV3gxWlNBOVBUMGdKMjUxYldKbGNpY2dKaVlnSVdselRtRk9LSFpoYkhWbEtTd2dKM1poYkhWbElHbHpJRzV2ZENCaElHNTFiV0psY2ljcFhHNGdJR0Z6YzJWeWRDaGxibVFnUGowZ2MzUmhjblFzSUNkbGJtUWdQQ0J6ZEdGeWRDY3BYRzVjYmlBZ0x5OGdSbWxzYkNBd0lHSjVkR1Z6T3lCM1pTZHlaU0JrYjI1bFhHNGdJR2xtSUNobGJtUWdQVDA5SUhOMFlYSjBLU0J5WlhSMWNtNWNiaUFnYVdZZ0tIUm9hWE11YkdWdVozUm9JRDA5UFNBd0tTQnlaWFIxY201Y2JseHVJQ0JoYzNObGNuUW9jM1JoY25RZ1BqMGdNQ0FtSmlCemRHRnlkQ0E4SUhSb2FYTXViR1Z1WjNSb0xDQW5jM1JoY25RZ2IzVjBJRzltSUdKdmRXNWtjeWNwWEc0Z0lHRnpjMlZ5ZENobGJtUWdQajBnTUNBbUppQmxibVFnUEQwZ2RHaHBjeTVzWlc1bmRHZ3NJQ2RsYm1RZ2IzVjBJRzltSUdKdmRXNWtjeWNwWEc1Y2JpQWdabTl5SUNoMllYSWdhU0E5SUhOMFlYSjBPeUJwSUR3Z1pXNWtPeUJwS3lzcElIdGNiaUFnSUNCMGFHbHpXMmxkSUQwZ2RtRnNkV1ZjYmlBZ2ZWeHVmVnh1WEc1Q2RXWm1aWEl1Y0hKdmRHOTBlWEJsTG1sdWMzQmxZM1FnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUhaaGNpQnZkWFFnUFNCYlhWeHVJQ0IyWVhJZ2JHVnVJRDBnZEdocGN5NXNaVzVuZEdoY2JpQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0JzWlc0N0lHa3JLeWtnZTF4dUlDQWdJRzkxZEZ0cFhTQTlJSFJ2U0dWNEtIUm9hWE5iYVYwcFhHNGdJQ0FnYVdZZ0tHa2dQVDA5SUdWNGNHOXlkSE11U1U1VFVFVkRWRjlOUVZoZlFsbFVSVk1wSUh0Y2JpQWdJQ0FnSUc5MWRGdHBJQ3NnTVYwZ1BTQW5MaTR1SjF4dUlDQWdJQ0FnWW5KbFlXdGNiaUFnSUNCOVhHNGdJSDFjYmlBZ2NtVjBkWEp1SUNjOFFuVm1abVZ5SUNjZ0t5QnZkWFF1YW05cGJpZ25JQ2NwSUNzZ0p6NG5YRzU5WEc1Y2JpOHFLbHh1SUNvZ1EzSmxZWFJsY3lCaElHNWxkeUJnUVhKeVlYbENkV1ptWlhKZ0lIZHBkR2dnZEdobElDcGpiM0JwWldRcUlHMWxiVzl5ZVNCdlppQjBhR1VnWW5WbVptVnlJR2x1YzNSaGJtTmxMbHh1SUNvZ1FXUmtaV1FnYVc0Z1RtOWtaU0F3TGpFeUxpQlBibXg1SUdGMllXbHNZV0pzWlNCcGJpQmljbTkzYzJWeWN5QjBhR0YwSUhOMWNIQnZjblFnUVhKeVlYbENkV1ptWlhJdVhHNGdLaTljYmtKMVptWmxjaTV3Y205MGIzUjVjR1V1ZEc5QmNuSmhlVUoxWm1abGNpQTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdhV1lnS0hSNWNHVnZaaUJWYVc1ME9FRnljbUY1SUNFOVBTQW5kVzVrWldacGJtVmtKeWtnZTF4dUlDQWdJR2xtSUNoQ2RXWm1aWEl1WDNWelpWUjVjR1ZrUVhKeVlYbHpLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdLRzVsZHlCQ2RXWm1aWElvZEdocGN5a3BMbUoxWm1abGNseHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0IyWVhJZ1luVm1JRDBnYm1WM0lGVnBiblE0UVhKeVlYa29kR2hwY3k1c1pXNW5kR2dwWEc0Z0lDQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Dd2diR1Z1SUQwZ1luVm1MbXhsYm1kMGFEc2dhU0E4SUd4bGJqc2dhU0FyUFNBeEtWeHVJQ0FnSUNBZ0lDQmlkV1piYVYwZ1BTQjBhR2x6VzJsZFhHNGdJQ0FnSUNCeVpYUjFjbTRnWW5WbUxtSjFabVpsY2x4dUlDQWdJSDFjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMEoxWm1abGNpNTBiMEZ5Y21GNVFuVm1abVZ5SUc1dmRDQnpkWEJ3YjNKMFpXUWdhVzRnZEdocGN5QmljbTkzYzJWeUp5bGNiaUFnZlZ4dWZWeHVYRzR2THlCSVJVeFFSVklnUmxWT1ExUkpUMDVUWEc0dkx5QTlQVDA5UFQwOVBUMDlQVDA5UFQwOVhHNWNibVoxYm1OMGFXOXVJSE4wY21sdVozUnlhVzBnS0hOMGNpa2dlMXh1SUNCcFppQW9jM1J5TG5SeWFXMHBJSEpsZEhWeWJpQnpkSEl1ZEhKcGJTZ3BYRzRnSUhKbGRIVnliaUJ6ZEhJdWNtVndiR0ZqWlNndlhseGNjeXQ4WEZ4ekt5UXZaeXdnSnljcFhHNTlYRzVjYm5aaGNpQkNVQ0E5SUVKMVptWmxjaTV3Y205MGIzUjVjR1ZjYmx4dUx5b3FYRzRnS2lCQmRXZHRaVzUwSUdFZ1ZXbHVkRGhCY25KaGVTQXFhVzV6ZEdGdVkyVXFJQ2h1YjNRZ2RHaGxJRlZwYm5RNFFYSnlZWGtnWTJ4aGMzTWhLU0IzYVhSb0lFSjFabVpsY2lCdFpYUm9iMlJ6WEc0Z0tpOWNia0oxWm1abGNpNWZZWFZuYldWdWRDQTlJR1oxYm1OMGFXOXVJQ2hoY25JcElIdGNiaUFnWVhKeUxsOXBjMEoxWm1abGNpQTlJSFJ5ZFdWY2JseHVJQ0F2THlCellYWmxJSEpsWm1WeVpXNWpaU0IwYnlCdmNtbG5hVzVoYkNCVmFXNTBPRUZ5Y21GNUlHZGxkQzl6WlhRZ2JXVjBhRzlrY3lCaVpXWnZjbVVnYjNabGNuZHlhWFJwYm1kY2JpQWdZWEp5TGw5blpYUWdQU0JoY25JdVoyVjBYRzRnSUdGeWNpNWZjMlYwSUQwZ1lYSnlMbk5sZEZ4dVhHNGdJQzh2SUdSbGNISmxZMkYwWldRc0lIZHBiR3dnWW1VZ2NtVnRiM1psWkNCcGJpQnViMlJsSURBdU1UTXJYRzRnSUdGeWNpNW5aWFFnUFNCQ1VDNW5aWFJjYmlBZ1lYSnlMbk5sZENBOUlFSlFMbk5sZEZ4dVhHNGdJR0Z5Y2k1M2NtbDBaU0E5SUVKUUxuZHlhWFJsWEc0Z0lHRnljaTUwYjFOMGNtbHVaeUE5SUVKUUxuUnZVM1J5YVc1blhHNGdJR0Z5Y2k1MGIweHZZMkZzWlZOMGNtbHVaeUE5SUVKUUxuUnZVM1J5YVc1blhHNGdJR0Z5Y2k1MGIwcFRUMDRnUFNCQ1VDNTBiMHBUVDA1Y2JpQWdZWEp5TG1OdmNIa2dQU0JDVUM1amIzQjVYRzRnSUdGeWNpNXpiR2xqWlNBOUlFSlFMbk5zYVdObFhHNGdJR0Z5Y2k1eVpXRmtWVWx1ZERnZ1BTQkNVQzV5WldGa1ZVbHVkRGhjYmlBZ1lYSnlMbkpsWVdSVlNXNTBNVFpNUlNBOUlFSlFMbkpsWVdSVlNXNTBNVFpNUlZ4dUlDQmhjbkl1Y21WaFpGVkpiblF4TmtKRklEMGdRbEF1Y21WaFpGVkpiblF4TmtKRlhHNGdJR0Z5Y2k1eVpXRmtWVWx1ZERNeVRFVWdQU0JDVUM1eVpXRmtWVWx1ZERNeVRFVmNiaUFnWVhKeUxuSmxZV1JWU1c1ME16SkNSU0E5SUVKUUxuSmxZV1JWU1c1ME16SkNSVnh1SUNCaGNuSXVjbVZoWkVsdWREZ2dQU0JDVUM1eVpXRmtTVzUwT0Z4dUlDQmhjbkl1Y21WaFpFbHVkREUyVEVVZ1BTQkNVQzV5WldGa1NXNTBNVFpNUlZ4dUlDQmhjbkl1Y21WaFpFbHVkREUyUWtVZ1BTQkNVQzV5WldGa1NXNTBNVFpDUlZ4dUlDQmhjbkl1Y21WaFpFbHVkRE15VEVVZ1BTQkNVQzV5WldGa1NXNTBNekpNUlZ4dUlDQmhjbkl1Y21WaFpFbHVkRE15UWtVZ1BTQkNVQzV5WldGa1NXNTBNekpDUlZ4dUlDQmhjbkl1Y21WaFpFWnNiMkYwVEVVZ1BTQkNVQzV5WldGa1JteHZZWFJNUlZ4dUlDQmhjbkl1Y21WaFpFWnNiMkYwUWtVZ1BTQkNVQzV5WldGa1JteHZZWFJDUlZ4dUlDQmhjbkl1Y21WaFpFUnZkV0pzWlV4RklEMGdRbEF1Y21WaFpFUnZkV0pzWlV4RlhHNGdJR0Z5Y2k1eVpXRmtSRzkxWW14bFFrVWdQU0JDVUM1eVpXRmtSRzkxWW14bFFrVmNiaUFnWVhKeUxuZHlhWFJsVlVsdWREZ2dQU0JDVUM1M2NtbDBaVlZKYm5RNFhHNGdJR0Z5Y2k1M2NtbDBaVlZKYm5ReE5reEZJRDBnUWxBdWQzSnBkR1ZWU1c1ME1UWk1SVnh1SUNCaGNuSXVkM0pwZEdWVlNXNTBNVFpDUlNBOUlFSlFMbmR5YVhSbFZVbHVkREUyUWtWY2JpQWdZWEp5TG5keWFYUmxWVWx1ZERNeVRFVWdQU0JDVUM1M2NtbDBaVlZKYm5Rek1reEZYRzRnSUdGeWNpNTNjbWwwWlZWSmJuUXpNa0pGSUQwZ1FsQXVkM0pwZEdWVlNXNTBNekpDUlZ4dUlDQmhjbkl1ZDNKcGRHVkpiblE0SUQwZ1FsQXVkM0pwZEdWSmJuUTRYRzRnSUdGeWNpNTNjbWwwWlVsdWRERTJURVVnUFNCQ1VDNTNjbWwwWlVsdWRERTJURVZjYmlBZ1lYSnlMbmR5YVhSbFNXNTBNVFpDUlNBOUlFSlFMbmR5YVhSbFNXNTBNVFpDUlZ4dUlDQmhjbkl1ZDNKcGRHVkpiblF6TWt4RklEMGdRbEF1ZDNKcGRHVkpiblF6TWt4RlhHNGdJR0Z5Y2k1M2NtbDBaVWx1ZERNeVFrVWdQU0JDVUM1M2NtbDBaVWx1ZERNeVFrVmNiaUFnWVhKeUxuZHlhWFJsUm14dllYUk1SU0E5SUVKUUxuZHlhWFJsUm14dllYUk1SVnh1SUNCaGNuSXVkM0pwZEdWR2JHOWhkRUpGSUQwZ1FsQXVkM0pwZEdWR2JHOWhkRUpGWEc0Z0lHRnljaTUzY21sMFpVUnZkV0pzWlV4RklEMGdRbEF1ZDNKcGRHVkViM1ZpYkdWTVJWeHVJQ0JoY25JdWQzSnBkR1ZFYjNWaWJHVkNSU0E5SUVKUUxuZHlhWFJsUkc5MVlteGxRa1ZjYmlBZ1lYSnlMbVpwYkd3Z1BTQkNVQzVtYVd4c1hHNGdJR0Z5Y2k1cGJuTndaV04wSUQwZ1FsQXVhVzV6Y0dWamRGeHVJQ0JoY25JdWRHOUJjbkpoZVVKMVptWmxjaUE5SUVKUUxuUnZRWEp5WVhsQ2RXWm1aWEpjYmx4dUlDQnlaWFIxY200Z1lYSnlYRzU5WEc1Y2JpOHZJSE5zYVdObEtITjBZWEowTENCbGJtUXBYRzVtZFc1amRHbHZiaUJqYkdGdGNDQW9hVzVrWlhnc0lHeGxiaXdnWkdWbVlYVnNkRlpoYkhWbEtTQjdYRzRnSUdsbUlDaDBlWEJsYjJZZ2FXNWtaWGdnSVQwOUlDZHVkVzFpWlhJbktTQnlaWFIxY200Z1pHVm1ZWFZzZEZaaGJIVmxYRzRnSUdsdVpHVjRJRDBnZm41cGJtUmxlRHNnSUM4dklFTnZaWEpqWlNCMGJ5QnBiblJsWjJWeUxseHVJQ0JwWmlBb2FXNWtaWGdnUGowZ2JHVnVLU0J5WlhSMWNtNGdiR1Z1WEc0Z0lHbG1JQ2hwYm1SbGVDQStQU0F3S1NCeVpYUjFjbTRnYVc1a1pYaGNiaUFnYVc1a1pYZ2dLejBnYkdWdVhHNGdJR2xtSUNocGJtUmxlQ0ErUFNBd0tTQnlaWFIxY200Z2FXNWtaWGhjYmlBZ2NtVjBkWEp1SURCY2JuMWNibHh1Wm5WdVkzUnBiMjRnWTI5bGNtTmxJQ2hzWlc1bmRHZ3BJSHRjYmlBZ0x5OGdRMjlsY21ObElHeGxibWQwYUNCMGJ5QmhJRzUxYldKbGNpQW9jRzl6YzJsaWJIa2dUbUZPS1N3Z2NtOTFibVFnZFhCY2JpQWdMeThnYVc0Z1kyRnpaU0JwZENkeklHWnlZV04wYVc5dVlXd2dLR1V1Wnk0Z01USXpMalExTmlrZ2RHaGxiaUJrYnlCaFhHNGdJQzh2SUdSdmRXSnNaU0J1WldkaGRHVWdkRzhnWTI5bGNtTmxJR0VnVG1GT0lIUnZJREF1SUVWaGMza3NJSEpwWjJoMFAxeHVJQ0JzWlc1bmRHZ2dQU0IrZmsxaGRHZ3VZMlZwYkNncmJHVnVaM1JvS1Z4dUlDQnlaWFIxY200Z2JHVnVaM1JvSUR3Z01DQS9JREFnT2lCc1pXNW5kR2hjYm4xY2JseHVablZ1WTNScGIyNGdhWE5CY25KaGVTQW9jM1ZpYW1WamRDa2dlMXh1SUNCeVpYUjFjbTRnS0VGeWNtRjVMbWx6UVhKeVlYa2dmSHdnWm5WdVkzUnBiMjRnS0hOMVltcGxZM1FwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdUMkpxWldOMExuQnliM1J2ZEhsd1pTNTBiMU4wY21sdVp5NWpZV3hzS0hOMVltcGxZM1FwSUQwOVBTQW5XMjlpYW1WamRDQkJjbkpoZVYwblhHNGdJSDBwS0hOMVltcGxZM1FwWEc1OVhHNWNibVoxYm1OMGFXOXVJR2x6UVhKeVlYbHBjMmdnS0hOMVltcGxZM1FwSUh0Y2JpQWdjbVYwZFhKdUlHbHpRWEp5WVhrb2MzVmlhbVZqZENrZ2ZId2dRblZtWm1WeUxtbHpRblZtWm1WeUtITjFZbXBsWTNRcElIeDhYRzRnSUNBZ0lDQnpkV0pxWldOMElDWW1JSFI1Y0dWdlppQnpkV0pxWldOMElEMDlQU0FuYjJKcVpXTjBKeUFtSmx4dUlDQWdJQ0FnZEhsd1pXOW1JSE4xWW1wbFkzUXViR1Z1WjNSb0lEMDlQU0FuYm5WdFltVnlKMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQjBiMGhsZUNBb2Jpa2dlMXh1SUNCcFppQW9iaUE4SURFMktTQnlaWFIxY200Z0p6QW5JQ3NnYmk1MGIxTjBjbWx1WnlneE5pbGNiaUFnY21WMGRYSnVJRzR1ZEc5VGRISnBibWNvTVRZcFhHNTlYRzVjYm1aMWJtTjBhVzl1SUhWMFpqaFViMEo1ZEdWeklDaHpkSElwSUh0Y2JpQWdkbUZ5SUdKNWRHVkJjbkpoZVNBOUlGdGRYRzRnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z2MzUnlMbXhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnZG1GeUlHSWdQU0J6ZEhJdVkyaGhja052WkdWQmRDaHBLVnh1SUNBZ0lHbG1JQ2hpSUR3OUlEQjROMFlwWEc0Z0lDQWdJQ0JpZVhSbFFYSnlZWGt1Y0hWemFDaHpkSEl1WTJoaGNrTnZaR1ZCZENocEtTbGNiaUFnSUNCbGJITmxJSHRjYmlBZ0lDQWdJSFpoY2lCemRHRnlkQ0E5SUdsY2JpQWdJQ0FnSUdsbUlDaGlJRDQ5SURCNFJEZ3dNQ0FtSmlCaUlEdzlJREI0UkVaR1Jpa2dhU3NyWEc0Z0lDQWdJQ0IyWVhJZ2FDQTlJR1Z1WTI5a1pWVlNTVU52YlhCdmJtVnVkQ2h6ZEhJdWMyeHBZMlVvYzNSaGNuUXNJR2tyTVNrcExuTjFZbk4wY2lneEtTNXpjR3hwZENnbkpTY3BYRzRnSUNBZ0lDQm1iM0lnS0haaGNpQnFJRDBnTURzZ2FpQThJR2d1YkdWdVozUm9PeUJxS3lzcFhHNGdJQ0FnSUNBZ0lHSjVkR1ZCY25KaGVTNXdkWE5vS0hCaGNuTmxTVzUwS0doYmFsMHNJREUyS1NsY2JpQWdJQ0I5WEc0Z0lIMWNiaUFnY21WMGRYSnVJR0o1ZEdWQmNuSmhlVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmhjMk5wYVZSdlFubDBaWE1nS0hOMGNpa2dlMXh1SUNCMllYSWdZbmwwWlVGeWNtRjVJRDBnVzExY2JpQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0J6ZEhJdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQXZMeUJPYjJSbEozTWdZMjlrWlNCelpXVnRjeUIwYnlCaVpTQmtiMmx1WnlCMGFHbHpJR0Z1WkNCdWIzUWdKaUF3ZURkR0xpNWNiaUFnSUNCaWVYUmxRWEp5WVhrdWNIVnphQ2h6ZEhJdVkyaGhja052WkdWQmRDaHBLU0FtSURCNFJrWXBYRzRnSUgxY2JpQWdjbVYwZFhKdUlHSjVkR1ZCY25KaGVWeHVmVnh1WEc1bWRXNWpkR2x2YmlCMWRHWXhObXhsVkc5Q2VYUmxjeUFvYzNSeUtTQjdYRzRnSUhaaGNpQmpMQ0JvYVN3Z2JHOWNiaUFnZG1GeUlHSjVkR1ZCY25KaGVTQTlJRnRkWEc0Z0lHWnZjaUFvZG1GeUlHa2dQU0F3T3lCcElEd2djM1J5TG14bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ1l5QTlJSE4wY2k1amFHRnlRMjlrWlVGMEtHa3BYRzRnSUNBZ2FHa2dQU0JqSUQ0K0lEaGNiaUFnSUNCc2J5QTlJR01nSlNBeU5UWmNiaUFnSUNCaWVYUmxRWEp5WVhrdWNIVnphQ2hzYnlsY2JpQWdJQ0JpZVhSbFFYSnlZWGt1Y0hWemFDaG9hU2xjYmlBZ2ZWeHVYRzRnSUhKbGRIVnliaUJpZVhSbFFYSnlZWGxjYm4xY2JseHVablZ1WTNScGIyNGdZbUZ6WlRZMFZHOUNlWFJsY3lBb2MzUnlLU0I3WEc0Z0lISmxkSFZ5YmlCaVlYTmxOalF1ZEc5Q2VYUmxRWEp5WVhrb2MzUnlLVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmliR2wwUW5WbVptVnlJQ2h6Y21Nc0lHUnpkQ3dnYjJabWMyVjBMQ0JzWlc1bmRHZ3BJSHRjYmlBZ2RtRnlJSEJ2YzF4dUlDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJR3hsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnYVdZZ0tDaHBJQ3NnYjJabWMyVjBJRDQ5SUdSemRDNXNaVzVuZEdncElIeDhJQ2hwSUQ0OUlITnlZeTVzWlc1bmRHZ3BLVnh1SUNBZ0lDQWdZbkpsWVd0Y2JpQWdJQ0JrYzNSYmFTQXJJRzltWm5ObGRGMGdQU0J6Y21OYmFWMWNiaUFnZlZ4dUlDQnlaWFIxY200Z2FWeHVmVnh1WEc1bWRXNWpkR2x2YmlCa1pXTnZaR1ZWZEdZNFEyaGhjaUFvYzNSeUtTQjdYRzRnSUhSeWVTQjdYRzRnSUNBZ2NtVjBkWEp1SUdSbFkyOWtaVlZTU1VOdmJYQnZibVZ1ZENoemRISXBYRzRnSUgwZ1kyRjBZMmdnS0dWeWNpa2dlMXh1SUNBZ0lISmxkSFZ5YmlCVGRISnBibWN1Wm5KdmJVTm9ZWEpEYjJSbEtEQjRSa1pHUkNrZ0x5OGdWVlJHSURnZ2FXNTJZV3hwWkNCamFHRnlYRzRnSUgxY2JuMWNibHh1THlwY2JpQXFJRmRsSUdoaGRtVWdkRzhnYldGclpTQnpkWEpsSUhSb1lYUWdkR2hsSUhaaGJIVmxJR2x6SUdFZ2RtRnNhV1FnYVc1MFpXZGxjaTRnVkdocGN5QnRaV0Z1Y3lCMGFHRjBJR2wwWEc0Z0tpQnBjeUJ1YjI0dGJtVm5ZWFJwZG1VdUlFbDBJR2hoY3lCdWJ5Qm1jbUZqZEdsdmJtRnNJR052YlhCdmJtVnVkQ0JoYm1RZ2RHaGhkQ0JwZENCa2IyVnpJRzV2ZEZ4dUlDb2daWGhqWldWa0lIUm9aU0J0WVhocGJYVnRJR0ZzYkc5M1pXUWdkbUZzZFdVdVhHNGdLaTljYm1aMWJtTjBhVzl1SUhabGNtbG1kV2x1ZENBb2RtRnNkV1VzSUcxaGVDa2dlMXh1SUNCaGMzTmxjblFvZEhsd1pXOW1JSFpoYkhWbElEMDlQU0FuYm5WdFltVnlKeXdnSjJOaGJtNXZkQ0IzY21sMFpTQmhJRzV2YmkxdWRXMWlaWElnWVhNZ1lTQnVkVzFpWlhJbktWeHVJQ0JoYzNObGNuUW9kbUZzZFdVZ1BqMGdNQ3dnSjNOd1pXTnBabWxsWkNCaElHNWxaMkYwYVhabElIWmhiSFZsSUdadmNpQjNjbWwwYVc1bklHRnVJSFZ1YzJsbmJtVmtJSFpoYkhWbEp5bGNiaUFnWVhOelpYSjBLSFpoYkhWbElEdzlJRzFoZUN3Z0ozWmhiSFZsSUdseklHeGhjbWRsY2lCMGFHRnVJRzFoZUdsdGRXMGdkbUZzZFdVZ1ptOXlJSFI1Y0dVbktWeHVJQ0JoYzNObGNuUW9UV0YwYUM1bWJHOXZjaWgyWVd4MVpTa2dQVDA5SUhaaGJIVmxMQ0FuZG1Gc2RXVWdhR0Z6SUdFZ1puSmhZM1JwYjI1aGJDQmpiMjF3YjI1bGJuUW5LVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQjJaWEpwWm5OcGJuUWdLSFpoYkhWbExDQnRZWGdzSUcxcGJpa2dlMXh1SUNCaGMzTmxjblFvZEhsd1pXOW1JSFpoYkhWbElEMDlQU0FuYm5WdFltVnlKeXdnSjJOaGJtNXZkQ0IzY21sMFpTQmhJRzV2YmkxdWRXMWlaWElnWVhNZ1lTQnVkVzFpWlhJbktWeHVJQ0JoYzNObGNuUW9kbUZzZFdVZ1BEMGdiV0Y0TENBbmRtRnNkV1VnYkdGeVoyVnlJSFJvWVc0Z2JXRjRhVzExYlNCaGJHeHZkMlZrSUhaaGJIVmxKeWxjYmlBZ1lYTnpaWEowS0haaGJIVmxJRDQ5SUcxcGJpd2dKM1poYkhWbElITnRZV3hzWlhJZ2RHaGhiaUJ0YVc1cGJYVnRJR0ZzYkc5M1pXUWdkbUZzZFdVbktWeHVJQ0JoYzNObGNuUW9UV0YwYUM1bWJHOXZjaWgyWVd4MVpTa2dQVDA5SUhaaGJIVmxMQ0FuZG1Gc2RXVWdhR0Z6SUdFZ1puSmhZM1JwYjI1aGJDQmpiMjF3YjI1bGJuUW5LVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQjJaWEpwWmtsRlJVVTNOVFFnS0haaGJIVmxMQ0J0WVhnc0lHMXBiaWtnZTF4dUlDQmhjM05sY25Rb2RIbHdaVzltSUhaaGJIVmxJRDA5UFNBbmJuVnRZbVZ5Snl3Z0oyTmhibTV2ZENCM2NtbDBaU0JoSUc1dmJpMXVkVzFpWlhJZ1lYTWdZU0J1ZFcxaVpYSW5LVnh1SUNCaGMzTmxjblFvZG1Gc2RXVWdQRDBnYldGNExDQW5kbUZzZFdVZ2JHRnlaMlZ5SUhSb1lXNGdiV0Y0YVcxMWJTQmhiR3h2ZDJWa0lIWmhiSFZsSnlsY2JpQWdZWE56WlhKMEtIWmhiSFZsSUQ0OUlHMXBiaXdnSjNaaGJIVmxJSE50WVd4c1pYSWdkR2hoYmlCdGFXNXBiWFZ0SUdGc2JHOTNaV1FnZG1Gc2RXVW5LVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmhjM05sY25RZ0tIUmxjM1FzSUcxbGMzTmhaMlVwSUh0Y2JpQWdhV1lnS0NGMFpYTjBLU0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9iV1Z6YzJGblpTQjhmQ0FuUm1GcGJHVmtJR0Z6YzJWeWRHbHZiaWNwWEc1OVhHNWNibjBwTG1OaGJHd29kR2hwY3l4eVpYRjFhWEpsS0Z3aVpTOVZLemszWENJcExIUjVjR1Z2WmlCelpXeG1JQ0U5UFNCY0luVnVaR1ZtYVc1bFpGd2lJRDhnYzJWc1ppQTZJSFI1Y0dWdlppQjNhVzVrYjNjZ0lUMDlJRndpZFc1a1pXWnBibVZrWENJZ1B5QjNhVzVrYjNjZ09pQjdmU3h5WlhGMWFYSmxLRndpWW5WbVptVnlYQ0lwTGtKMVptWmxjaXhoY21kMWJXVnVkSE5iTTEwc1lYSm5kVzFsYm5Seld6UmRMR0Z5WjNWdFpXNTBjMXMxWFN4aGNtZDFiV1Z1ZEhOYk5sMHNYQ0l2TGk1Y1hGeGNMaTVjWEZ4Y2JtOWtaVjl0YjJSMWJHVnpYRnhjWEdKMVptWmxjbHhjWEZ4cGJtUmxlQzVxYzF3aUxGd2lMeTR1WEZ4Y1hDNHVYRnhjWEc1dlpHVmZiVzlrZFd4bGMxeGNYRnhpZFdabVpYSmNJaWtpTENJb1puVnVZM1JwYjI0Z0tIQnliMk5sYzNNc1oyeHZZbUZzTEVKMVptWmxjaXhmWDJGeVozVnRaVzUwTUN4ZlgyRnlaM1Z0Wlc1ME1TeGZYMkZ5WjNWdFpXNTBNaXhmWDJGeVozVnRaVzUwTXl4ZlgyWnBiR1Z1WVcxbExGOWZaR2x5Ym1GdFpTbDdYRzVsZUhCdmNuUnpMbkpsWVdRZ1BTQm1kVzVqZEdsdmJpQW9ZblZtWm1WeUxDQnZabVp6WlhRc0lHbHpURVVzSUcxTVpXNHNJRzVDZVhSbGN5a2dlMXh1SUNCMllYSWdaU3dnYlZ4dUlDQjJZWElnWlV4bGJpQTlJRzVDZVhSbGN5QXFJRGdnTFNCdFRHVnVJQzBnTVZ4dUlDQjJZWElnWlUxaGVDQTlJQ2d4SUR3OElHVk1aVzRwSUMwZ01WeHVJQ0IyWVhJZ1pVSnBZWE1nUFNCbFRXRjRJRDQrSURGY2JpQWdkbUZ5SUc1Q2FYUnpJRDBnTFRkY2JpQWdkbUZ5SUdrZ1BTQnBjMHhGSUQ4Z0tHNUNlWFJsY3lBdElERXBJRG9nTUZ4dUlDQjJZWElnWkNBOUlHbHpURVVnUHlBdE1TQTZJREZjYmlBZ2RtRnlJSE1nUFNCaWRXWm1aWEpiYjJabWMyVjBJQ3NnYVYxY2JseHVJQ0JwSUNzOUlHUmNibHh1SUNCbElEMGdjeUFtSUNnb01TQThQQ0FvTFc1Q2FYUnpLU2tnTFNBeEtWeHVJQ0J6SUQ0K1BTQW9MVzVDYVhSektWeHVJQ0J1UW1sMGN5QXJQU0JsVEdWdVhHNGdJR1p2Y2lBb095QnVRbWwwY3lBK0lEQTdJR1VnUFNCbElDb2dNalUySUNzZ1luVm1abVZ5VzI5bVpuTmxkQ0FySUdsZExDQnBJQ3M5SUdRc0lHNUNhWFJ6SUMwOUlEZ3BJSHQ5WEc1Y2JpQWdiU0E5SUdVZ0ppQW9LREVnUER3Z0tDMXVRbWwwY3lrcElDMGdNU2xjYmlBZ1pTQStQajBnS0MxdVFtbDBjeWxjYmlBZ2JrSnBkSE1nS3owZ2JVeGxibHh1SUNCbWIzSWdLRHNnYmtKcGRITWdQaUF3T3lCdElEMGdiU0FxSURJMU5pQXJJR0oxWm1abGNsdHZabVp6WlhRZ0t5QnBYU3dnYVNBclBTQmtMQ0J1UW1sMGN5QXRQU0E0S1NCN2ZWeHVYRzRnSUdsbUlDaGxJRDA5UFNBd0tTQjdYRzRnSUNBZ1pTQTlJREVnTFNCbFFtbGhjMXh1SUNCOUlHVnNjMlVnYVdZZ0tHVWdQVDA5SUdWTllYZ3BJSHRjYmlBZ0lDQnlaWFIxY200Z2JTQS9JRTVoVGlBNklDZ29jeUEvSUMweElEb2dNU2tnS2lCSmJtWnBibWwwZVNsY2JpQWdmU0JsYkhObElIdGNiaUFnSUNCdElEMGdiU0FySUUxaGRHZ3VjRzkzS0RJc0lHMU1aVzRwWEc0Z0lDQWdaU0E5SUdVZ0xTQmxRbWxoYzF4dUlDQjlYRzRnSUhKbGRIVnliaUFvY3lBL0lDMHhJRG9nTVNrZ0tpQnRJQ29nVFdGMGFDNXdiM2NvTWl3Z1pTQXRJRzFNWlc0cFhHNTlYRzVjYm1WNGNHOXlkSE11ZDNKcGRHVWdQU0JtZFc1amRHbHZiaUFvWW5WbVptVnlMQ0IyWVd4MVpTd2diMlptYzJWMExDQnBjMHhGTENCdFRHVnVMQ0J1UW5sMFpYTXBJSHRjYmlBZ2RtRnlJR1VzSUcwc0lHTmNiaUFnZG1GeUlHVk1aVzRnUFNCdVFubDBaWE1nS2lBNElDMGdiVXhsYmlBdElERmNiaUFnZG1GeUlHVk5ZWGdnUFNBb01TQThQQ0JsVEdWdUtTQXRJREZjYmlBZ2RtRnlJR1ZDYVdGeklEMGdaVTFoZUNBK1BpQXhYRzRnSUhaaGNpQnlkQ0E5SUNodFRHVnVJRDA5UFNBeU15QS9JRTFoZEdndWNHOTNLRElzSUMweU5Da2dMU0JOWVhSb0xuQnZkeWd5TENBdE56Y3BJRG9nTUNsY2JpQWdkbUZ5SUdrZ1BTQnBjMHhGSUQ4Z01DQTZJQ2h1UW5sMFpYTWdMU0F4S1Z4dUlDQjJZWElnWkNBOUlHbHpURVVnUHlBeElEb2dMVEZjYmlBZ2RtRnlJSE1nUFNCMllXeDFaU0E4SURBZ2ZId2dLSFpoYkhWbElEMDlQU0F3SUNZbUlERWdMeUIyWVd4MVpTQThJREFwSUQ4Z01TQTZJREJjYmx4dUlDQjJZV3gxWlNBOUlFMWhkR2d1WVdKektIWmhiSFZsS1Z4dVhHNGdJR2xtSUNocGMwNWhUaWgyWVd4MVpTa2dmSHdnZG1Gc2RXVWdQVDA5SUVsdVptbHVhWFI1S1NCN1hHNGdJQ0FnYlNBOUlHbHpUbUZPS0haaGJIVmxLU0EvSURFZ09pQXdYRzRnSUNBZ1pTQTlJR1ZOWVhoY2JpQWdmU0JsYkhObElIdGNiaUFnSUNCbElEMGdUV0YwYUM1bWJHOXZjaWhOWVhSb0xteHZaeWgyWVd4MVpTa2dMeUJOWVhSb0xreE9NaWxjYmlBZ0lDQnBaaUFvZG1Gc2RXVWdLaUFvWXlBOUlFMWhkR2d1Y0c5M0tESXNJQzFsS1NrZ1BDQXhLU0I3WEc0Z0lDQWdJQ0JsTFMxY2JpQWdJQ0FnSUdNZ0tqMGdNbHh1SUNBZ0lIMWNiaUFnSUNCcFppQW9aU0FySUdWQ2FXRnpJRDQ5SURFcElIdGNiaUFnSUNBZ0lIWmhiSFZsSUNzOUlISjBJQzhnWTF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQjJZV3gxWlNBclBTQnlkQ0FxSUUxaGRHZ3VjRzkzS0RJc0lERWdMU0JsUW1saGN5bGNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tIWmhiSFZsSUNvZ1l5QStQU0F5S1NCN1hHNGdJQ0FnSUNCbEt5dGNiaUFnSUNBZ0lHTWdMejBnTWx4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNobElDc2daVUpwWVhNZ1BqMGdaVTFoZUNrZ2UxeHVJQ0FnSUNBZ2JTQTlJREJjYmlBZ0lDQWdJR1VnUFNCbFRXRjRYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaGxJQ3NnWlVKcFlYTWdQajBnTVNrZ2UxeHVJQ0FnSUNBZ2JTQTlJQ2gyWVd4MVpTQXFJR01nTFNBeEtTQXFJRTFoZEdndWNHOTNLRElzSUcxTVpXNHBYRzRnSUNBZ0lDQmxJRDBnWlNBcklHVkNhV0Z6WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lHMGdQU0IyWVd4MVpTQXFJRTFoZEdndWNHOTNLRElzSUdWQ2FXRnpJQzBnTVNrZ0tpQk5ZWFJvTG5CdmR5Z3lMQ0J0VEdWdUtWeHVJQ0FnSUNBZ1pTQTlJREJjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0JtYjNJZ0tEc2diVXhsYmlBK1BTQTRPeUJpZFdabVpYSmJiMlptYzJWMElDc2dhVjBnUFNCdElDWWdNSGhtWml3Z2FTQXJQU0JrTENCdElDODlJREkxTml3Z2JVeGxiaUF0UFNBNEtTQjdmVnh1WEc0Z0lHVWdQU0FvWlNBOFBDQnRUR1Z1S1NCOElHMWNiaUFnWlV4bGJpQXJQU0J0VEdWdVhHNGdJR1p2Y2lBb095QmxUR1Z1SUQ0Z01Ec2dZblZtWm1WeVcyOW1abk5sZENBcklHbGRJRDBnWlNBbUlEQjRabVlzSUdrZ0t6MGdaQ3dnWlNBdlBTQXlOVFlzSUdWTVpXNGdMVDBnT0NrZ2UzMWNibHh1SUNCaWRXWm1aWEpiYjJabWMyVjBJQ3NnYVNBdElHUmRJSHc5SUhNZ0tpQXhNamhjYm4xY2JseHVmU2t1WTJGc2JDaDBhR2x6TEhKbGNYVnBjbVVvWENKbEwxVXJPVGRjSWlrc2RIbHdaVzltSUhObGJHWWdJVDA5SUZ3aWRXNWtaV1pwYm1Wa1hDSWdQeUJ6Wld4bUlEb2dkSGx3Wlc5bUlIZHBibVJ2ZHlBaFBUMGdYQ0oxYm1SbFptbHVaV1JjSWlBL0lIZHBibVJ2ZHlBNklIdDlMSEpsY1hWcGNtVW9YQ0ppZFdabVpYSmNJaWt1UW5WbVptVnlMR0Z5WjNWdFpXNTBjMXN6WFN4aGNtZDFiV1Z1ZEhOYk5GMHNZWEpuZFcxbGJuUnpXelZkTEdGeVozVnRaVzUwYzFzMlhTeGNJaTh1TGx4Y1hGd3VMbHhjWEZ4dWIyUmxYMjF2WkhWc1pYTmNYRnhjYVdWbFpUYzFORnhjWEZ4cGJtUmxlQzVxYzF3aUxGd2lMeTR1WEZ4Y1hDNHVYRnhjWEc1dlpHVmZiVzlrZFd4bGMxeGNYRnhwWldWbE56VTBYQ0lwSWl3aUtHWjFibU4wYVc5dUlDaHdjbTlqWlhOekxHZHNiMkpoYkN4Q2RXWm1aWElzWDE5aGNtZDFiV1Z1ZERBc1gxOWhjbWQxYldWdWRERXNYMTloY21kMWJXVnVkRElzWDE5aGNtZDFiV1Z1ZERNc1gxOW1hV3hsYm1GdFpTeGZYMlJwY201aGJXVXBlMXh1THk4Z2MyaHBiU0JtYjNJZ2RYTnBibWNnY0hKdlkyVnpjeUJwYmlCaWNtOTNjMlZ5WEc1Y2JuWmhjaUJ3Y205alpYTnpJRDBnYlc5a2RXeGxMbVY0Y0c5eWRITWdQU0I3ZlR0Y2JseHVjSEp2WTJWemN5NXVaWGgwVkdsamF5QTlJQ2htZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnZG1GeUlHTmhibE5sZEVsdGJXVmthV0YwWlNBOUlIUjVjR1Z2WmlCM2FXNWtiM2NnSVQwOUlDZDFibVJsWm1sdVpXUW5YRzRnSUNBZ0ppWWdkMmx1Wkc5M0xuTmxkRWx0YldWa2FXRjBaVHRjYmlBZ0lDQjJZWElnWTJGdVVHOXpkQ0E5SUhSNWNHVnZaaUIzYVc1a2IzY2dJVDA5SUNkMWJtUmxabWx1WldRblhHNGdJQ0FnSmlZZ2QybHVaRzkzTG5CdmMzUk5aWE56WVdkbElDWW1JSGRwYm1SdmR5NWhaR1JGZG1WdWRFeHBjM1JsYm1WeVhHNGdJQ0FnTzF4dVhHNGdJQ0FnYVdZZ0tHTmhibE5sZEVsdGJXVmthV0YwWlNrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1puVnVZM1JwYjI0Z0tHWXBJSHNnY21WMGRYSnVJSGRwYm1SdmR5NXpaWFJKYlcxbFpHbGhkR1VvWmlrZ2ZUdGNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9ZMkZ1VUc5emRDa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2NYVmxkV1VnUFNCYlhUdGNiaUFnSUNBZ0lDQWdkMmx1Wkc5M0xtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0oyMWxjM05oWjJVbkxDQm1kVzVqZEdsdmJpQW9aWFlwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCemIzVnlZMlVnUFNCbGRpNXpiM1Z5WTJVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0tITnZkWEpqWlNBOVBUMGdkMmx1Wkc5M0lIeDhJSE52ZFhKalpTQTlQVDBnYm5Wc2JDa2dKaVlnWlhZdVpHRjBZU0E5UFQwZ0ozQnliMk5sYzNNdGRHbGpheWNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGRpNXpkRzl3VUhKdmNHRm5ZWFJwYjI0b0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY1hWbGRXVXViR1Z1WjNSb0lENGdNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnWm00Z1BTQnhkV1YxWlM1emFHbG1kQ2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1iaWdwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlN3Z2RISjFaU2s3WEc1Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdaMWJtTjBhVzl1SUc1bGVIUlVhV05yS0dadUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeGRXVjFaUzV3ZFhOb0tHWnVLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIZHBibVJ2ZHk1d2IzTjBUV1Z6YzJGblpTZ25jSEp2WTJWemN5MTBhV05ySnl3Z0p5b25LVHRjYmlBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5WlhSMWNtNGdablZ1WTNScGIyNGdibVY0ZEZScFkyc29abTRwSUh0Y2JpQWdJQ0FnSUNBZ2MyVjBWR2x0Wlc5MWRDaG1iaXdnTUNrN1hHNGdJQ0FnZlR0Y2JuMHBLQ2s3WEc1Y2JuQnliMk5sYzNNdWRHbDBiR1VnUFNBblluSnZkM05sY2ljN1hHNXdjbTlqWlhOekxtSnliM2R6WlhJZ1BTQjBjblZsTzF4dWNISnZZMlZ6Y3k1bGJuWWdQU0I3ZlR0Y2JuQnliMk5sYzNNdVlYSm5kaUE5SUZ0ZE8xeHVYRzVtZFc1amRHbHZiaUJ1YjI5d0tDa2dlMzFjYmx4dWNISnZZMlZ6Y3k1dmJpQTlJRzV2YjNBN1hHNXdjbTlqWlhOekxtRmtaRXhwYzNSbGJtVnlJRDBnYm05dmNEdGNibkJ5YjJObGMzTXViMjVqWlNBOUlHNXZiM0E3WEc1d2NtOWpaWE56TG05bVppQTlJRzV2YjNBN1hHNXdjbTlqWlhOekxuSmxiVzkyWlV4cGMzUmxibVZ5SUQwZ2JtOXZjRHRjYm5CeWIyTmxjM011Y21WdGIzWmxRV3hzVEdsemRHVnVaWEp6SUQwZ2JtOXZjRHRjYm5CeWIyTmxjM011WlcxcGRDQTlJRzV2YjNBN1hHNWNibkJ5YjJObGMzTXVZbWx1WkdsdVp5QTlJR1oxYm1OMGFXOXVJQ2h1WVcxbEtTQjdYRzRnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0Nkd2NtOWpaWE56TG1KcGJtUnBibWNnYVhNZ2JtOTBJSE4xY0hCdmNuUmxaQ2NwTzF4dWZWeHVYRzR2THlCVVQwUlBLSE5vZEhsc2JXRnVLVnh1Y0hKdlkyVnpjeTVqZDJRZ1BTQm1kVzVqZEdsdmJpQW9LU0I3SUhKbGRIVnliaUFuTHljZ2ZUdGNibkJ5YjJObGMzTXVZMmhrYVhJZ1BTQm1kVzVqZEdsdmJpQW9aR2x5S1NCN1hHNGdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2R3Y205alpYTnpMbU5vWkdseUlHbHpJRzV2ZENCemRYQndiM0owWldRbktUdGNibjA3WEc1Y2JuMHBMbU5oYkd3b2RHaHBjeXh5WlhGMWFYSmxLRndpWlM5Vkt6azNYQ0lwTEhSNWNHVnZaaUJ6Wld4bUlDRTlQU0JjSW5WdVpHVm1hVzVsWkZ3aUlEOGdjMlZzWmlBNklIUjVjR1Z2WmlCM2FXNWtiM2NnSVQwOUlGd2lkVzVrWldacGJtVmtYQ0lnUHlCM2FXNWtiM2NnT2lCN2ZTeHlaWEYxYVhKbEtGd2lZblZtWm1WeVhDSXBMa0oxWm1abGNpeGhjbWQxYldWdWRITmJNMTBzWVhKbmRXMWxiblJ6V3pSZExHRnlaM1Z0Wlc1MGMxczFYU3hoY21kMWJXVnVkSE5iTmwwc1hDSXZMaTVjWEZ4Y0xpNWNYRnhjYm05a1pWOXRiMlIxYkdWelhGeGNYSEJ5YjJObGMzTmNYRnhjWW5KdmQzTmxjaTVxYzF3aUxGd2lMeTR1WEZ4Y1hDNHVYRnhjWEc1dlpHVmZiVzlrZFd4bGMxeGNYRnh3Y205alpYTnpYQ0lwSWl3aUtHWjFibU4wYVc5dUlDaHdjbTlqWlhOekxHZHNiMkpoYkN4Q2RXWm1aWElzWDE5aGNtZDFiV1Z1ZERBc1gxOWhjbWQxYldWdWRERXNYMTloY21kMWJXVnVkRElzWDE5aGNtZDFiV1Z1ZERNc1gxOW1hV3hsYm1GdFpTeGZYMlJwY201aGJXVXBlMXh1WENKMWMyVWdjM1J5YVdOMFhDSTdYRzVjYm5aaGNpQjJZV3hwWkdGMFpVWnZjbTBnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ2RtRnlJRzl3ZEdsdmJuTWdQU0I3ZlR0Y2JpQWdJQ0IyWVhJZ1kyeGhjM05GY25KdmNpQTlJQ2RsY25KdmNpYzdYRzVjYmlBZ0lDQjJZWElnYzJodmQwWnBaV3hrVm1Gc2FXUmhkR2x2YmlBOUlHWjFibU4wYVc5dUlITm9iM2RHYVdWc1pGWmhiR2xrWVhScGIyNG9hVzV3ZFhRc0lHbHVjSFYwU1hOV1lXeHBaQ2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9JV2x1Y0hWMFNYTldZV3hwWkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVc1d2RYUXVjR0Z5Wlc1MFRtOWtaUzVqYkdGemMweHBjM1F1WVdSa0tHOXdkR2x2Ym5NdVkyeGhjM05GY25KdmNpazdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcGJuQjFkQzV3WVhKbGJuUk9iMlJsTG1Oc1lYTnpUR2x6ZEM1eVpXMXZkbVVvYjNCMGFXOXVjeTVqYkdGemMwVnljbTl5S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgwN1hHNWNiaUFnSUNCMllYSWdkR1Z6ZEVsdWNIVjBWR1Y0ZENBOUlHWjFibU4wYVc5dUlIUmxjM1JKYm5CMWRGUmxlSFFvYVc1d2RYUXBJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHbHVjSFYwU1hOV1lXeHBaQ0E5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJSFpoY2lCd1lYUjBaWEp1SUQwZ2FXNXdkWFF1WjJWMFFYUjBjbWxpZFhSbEtDZHdZWFIwWlhKdUp5azdYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tIQmhkSFJsY200Z0lUMGdiblZzYkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlISmxaeUE5SUc1bGR5QlNaV2RGZUhBb2NHRjBkR1Z5Yml3Z0oyZHBKeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVhKbFp5NTBaWE4wS0dsdWNIVjBMblpoYkhWbEtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2x1Y0hWMFNYTldZV3hwWkNBOUlHWmhiSE5sTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR2x1Y0hWMExuWmhiSFZsSUQwOUlDY25LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVc1d2RYUkpjMVpoYkdsa0lEMGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQnBaaUFvYVc1d2RYUkpjMVpoYkdsa0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCemFHOTNSbWxsYkdSV1lXeHBaR0YwYVc5dUtHbHVjSFYwTENCMGNuVmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGNuVmxPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2MyaHZkMFpwWld4a1ZtRnNhV1JoZEdsdmJpaHBibkIxZEN3Z1ptRnNjMlVwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlR0Y2JseHVJQ0FnSUhaaGNpQjBaWE4wU1c1d2RYUkZiV0ZwYkNBOUlHWjFibU4wYVc5dUlIUmxjM1JKYm5CMWRFVnRZV2xzS0dsdWNIVjBLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQnRZV2xzVW1WbklEMGdibVYzSUZKbFowVjRjQ2duWGxzd0xUbGhMWHBCTFZwZkxpMWRLMEJiTUMwNVlTMTZRUzFhTGkxZEsxeGNMbHRoTFhwQkxWcGRleklzTTMwa0p5d2dKMmRwSnlrN1hHNWNiaUFnSUNBZ0lDQWdhV1lnS0NGdFlXbHNVbVZuTG5SbGMzUW9hVzV3ZFhRdWRtRnNkV1VwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6YUc5M1JtbGxiR1JXWVd4cFpHRjBhVzl1S0dsdWNIVjBMQ0JtWVd4elpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCemFHOTNSbWxsYkdSV1lXeHBaR0YwYVc5dUtHbHVjSFYwTENCMGNuVmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGNuVmxPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVHRjYmx4dUlDQWdJSFpoY2lCMFpYTjBTVzV3ZFhSVlVrd2dQU0JtZFc1amRHbHZiaUIwWlhOMFNXNXdkWFJWVWt3b2FXNXdkWFFwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJSFZ5YkZKbFp5QTlJRzVsZHlCU1pXZEZlSEFvSjE1b2RIUndPbHhjTDF4Y0x5NHJKeXdnSjJrbktUdGNiaUFnSUNBZ0lDQWdhV1lnS0NGMWNteFNaV2N1ZEdWemRDaHBibkIxZEM1MllXeDFaU2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSE5vYjNkR2FXVnNaRlpoYkdsa1lYUnBiMjRvYVc1d2RYUXNJR1poYkhObEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJtWVd4elpUdGNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhOb2IzZEdhV1ZzWkZaaGJHbGtZWFJwYjI0b2FXNXdkWFFzSUhSeWRXVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSeWRXVTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlPMXh1WEc0Z0lDQWdkbUZ5SUhSbGMzUkpibkIxZEZObGJHVmpkQ0E5SUdaMWJtTjBhVzl1SUhSbGMzUkpibkIxZEZObGJHVmpkQ2h6Wld4bFkzUXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tITmxiR1ZqZEM1dmNIUnBiMjV6VzNObGJHVmpkQzV6Wld4bFkzUmxaRWx1WkdWNFhTNTJZV3gxWlNBOVBTQW5KeUI4ZkNCelpXeGxZM1F1YjNCMGFXOXVjMXR6Wld4bFkzUXVjMlZzWldOMFpXUkpibVJsZUYwdWRtRnNkV1VnUFQwZ0p5MHhKeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjMmh2ZDBacFpXeGtWbUZzYVdSaGRHbHZiaWh6Wld4bFkzUXNJR1poYkhObEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJtWVd4elpUdGNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhOb2IzZEdhV1ZzWkZaaGJHbGtZWFJwYjI0b2MyVnNaV04wTENCMGNuVmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGNuVmxPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVHRjYmx4dUlDQWdJSFpoY2lCMFpYTjBTVzV3ZFhSRGFHVmphMkp2ZUNBOUlHWjFibU4wYVc5dUlIUmxjM1JKYm5CMWRFTm9aV05yWW05NEtHbHVjSFYwS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ1WVcxbElEMGdhVzV3ZFhRdVoyVjBRWFIwY21saWRYUmxLQ2R1WVcxbEp5azdYRzRnSUNBZ0lDQWdJSFpoY2lCbmNtOTFjQ0E5SUdsdWNIVjBMbVp2Y20wdWNYVmxjbmxUWld4bFkzUnZja0ZzYkNnbk9uTmpiM0JsSUdsdWNIVjBXMjVoYldVOVhDSW5JQ3NnYm1GdFpTQXJJQ2RjSWwwNlkyaGxZMnRsWkNjcE8xeHVYRzRnSUNBZ0lDQWdJR2xtSUNobmNtOTFjQzVzWlc1bmRHZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lITm9iM2RHYVdWc1pGWmhiR2xrWVhScGIyNG9hVzV3ZFhRc0lIUnlkV1VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnphRzkzUm1sbGJHUldZV3hwWkdGMGFXOXVLR2x1Y0hWMExDQm1ZV3h6WlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOU8xeHVYRzRnSUNBZ2RtRnlJSFJsYzNSSmJuQjFkRVJoZEdVZ1BTQm1kVzVqZEdsdmJpQjBaWE4wU1c1d2RYUkVZWFJsS0dsdWNIVjBLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hhVzV3ZFhRdWRtRnNkV1VnUFQwZ0p5Y3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lITm9iM2RHYVdWc1pGWmhiR2xrWVhScGIyNG9hVzV3ZFhRc0lIUnlkV1VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnphRzkzUm1sbGJHUldZV3hwWkdGMGFXOXVLR2x1Y0hWMExDQm1ZV3h6WlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOU8xeHVYRzRnSUNBZ2RtRnlJSEJ5WlhCaGNtVkZiR1Z0Wlc1MGN5QTlJR1oxYm1OMGFXOXVJSEJ5WlhCaGNtVkZiR1Z0Wlc1MGN5Z3BJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHVnNaVzFsYm5SeklEMGdiM0IwYVc5dWN5NW1iM0p0TG5GMVpYSjVVMlZzWldOMGIzSkJiR3dvSnpwelkyOXdaU0JiY21WeGRXbHlaV1JkSnlrN1hHNWNiaUFnSUNBZ0lDQWdXMTB1Wm05eVJXRmphQzVqWVd4c0tHVnNaVzFsYm5SekxDQm1kVzVqZEdsdmJpQW9aV3hsYldWdWRDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR1ZzWlcxbGJuUXVibTlrWlU1aGJXVXVkRzlWY0hCbGNrTmhjMlVvS1NBOVBTQW5TVTVRVlZRbktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhSNWNHVWdQU0JsYkdWdFpXNTBMblI1Y0dVdWRHOVZjSEJsY2tOaGMyVW9LVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBlWEJsSUQwOUlDZFVSVmhVSnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsYkdWdFpXNTBMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9KMnRsZVhWd0p5d2dablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdWemRFbHVjSFYwVkdWNGRDaGxiR1Z0Wlc1MEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1ZzWlcxbGJuUXVZV1JrUlhabGJuUk1hWE4wWlc1bGNpZ25ZbXgxY2ljc0lHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJsYzNSSmJuQjFkRlJsZUhRb1pXeGxiV1Z1ZENrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kSGx3WlNBOVBTQW5SRUZVUlNjcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWld4bGJXVnVkQzVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ2RyWlhsMWNDY3NJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSbGMzUkpibkIxZEZSbGVIUW9aV3hsYldWdWRDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsYkdWdFpXNTBMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9KMkpzZFhJbkxDQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwWlhOMFNXNXdkWFJVWlhoMEtHVnNaVzFsYm5RcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaV3hsYldWdWRDNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDZGpiR2xqYXljc0lHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJsYzNSSmJuQjFkRVJoZEdVb1pXeGxiV1Z1ZENrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kSGx3WlNBOVBTQW5SVTFCU1V3bktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWc1pXMWxiblF1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWduYTJWNWRYQW5MQ0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMFpYTjBTVzV3ZFhSRmJXRnBiQ2hsYkdWdFpXNTBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWc1pXMWxiblF1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWduWW14MWNpY3NJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSbGMzUkpibkIxZEVWdFlXbHNLR1ZzWlcxbGJuUXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSNWNHVWdQVDBnSjFWU1RDY3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pXeGxiV1Z1ZEM1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NkclpYbDFjQ2NzSUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUmxjM1JKYm5CMWRGVlNUQ2hsYkdWdFpXNTBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWc1pXMWxiblF1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWduWW14MWNpY3NJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSbGMzUkpibkIxZEZWU1RDaGxiR1Z0Wlc1MEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwZVhCbElEMDlJQ2REU0VWRFMwSlBXQ2NwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaV3hsYldWdWRDNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDZGpiR2xqYXljc0lHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJsYzNSSmJuQjFkRU5vWldOclltOTRLR1ZzWlcxbGJuUXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSNWNHVWdQVDBnSjFKQlJFbFBKeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxiR1Z0Wlc1MExtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0oyTnNhV05ySnl3Z1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR1Z6ZEVsdWNIVjBRMmhsWTJ0aWIzZ29aV3hsYldWdWRDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNobGJHVnRaVzUwTG01dlpHVk9ZVzFsTG5SdlZYQndaWEpEWVhObEtDa2dQVDBnSjFSRldGUkJVa1ZCSnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnNaVzFsYm5RdVlXUmtSWFpsYm5STWFYTjBaVzVsY2lnbmEyVjVkWEFuTENCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSbGMzUkpibkIxZEZSbGVIUW9aV3hsYldWdWRDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWld4bGJXVnVkQzVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ2RpYkhWeUp5d2dablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBaWE4wU1c1d2RYUlVaWGgwS0dWc1pXMWxiblFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dWc1pXMWxiblF1Ym05a1pVNWhiV1V1ZEc5VmNIQmxja05oYzJVb0tTQTlQU0FuVTBWTVJVTlVKeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWc1pXMWxiblF1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWduWTJoaGJtZGxKeXdnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwWlhOMFNXNXdkWFJUWld4bFkzUW9aV3hsYldWdWRDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJSDA3WEc1Y2JpQWdJQ0IyWVhJZ1ptOXliVk4xWW0xcGRDQTlJR1oxYm1OMGFXOXVJR1p2Y20xVGRXSnRhWFFvS1NCN1hHNGdJQ0FnSUNBZ0lHOXdkR2x2Ym5NdVptOXliUzVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ2R6ZFdKdGFYUW5MQ0JtZFc1amRHbHZiaUFvWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWlM1d2NtVjJaVzUwUkdWbVlYVnNkQ2dwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2RtRnNhV1JoZEdWa0lEMGdkSEoxWlR0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnTHk5d2IySnBaWEpoYlhrZ2QzTjZlWE4wYTJsbElIQnZiR0VzSUd0MHc3TnllVzBnZDJONlpjV2JibWxsYWlCMWMzUmhkMmxzYWNXYmJYa2dhMnhoYzhTWklDNXlaWEYxYVhKbFpGeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHVnNaVzFsYm5SeklEMGdiM0IwYVc5dWN5NW1iM0p0TG5GMVpYSjVVMlZzWldOMGIzSkJiR3dvSnpwelkyOXdaU0JiY21WeGRXbHlaV1JkSnlrN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUM4dmNHOWtiMkp1WlNCa2VtbGh4WUpoYm1sbElHcDF4YndnY205aWFXeHB4WnR0ZVNCd2NucDVJSEJ5ZW5sbmIzUnZkM2wzWVc1cGRTQnd3N05zWEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnWDJsMFpYSmhkRzl5VG05eWJXRnNRMjl0Y0d4bGRHbHZiaUE5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdYMlJwWkVsMFpYSmhkRzl5UlhKeWIzSWdQU0JtWVd4elpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQmZhWFJsY21GMGIzSkZjbkp2Y2lBOUlIVnVaR1ZtYVc1bFpEdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjNJZ0tIWmhjaUJmYVhSbGNtRjBiM0lnUFNCbGJHVnRaVzUwYzF0VGVXMWliMnd1YVhSbGNtRjBiM0pkS0Nrc0lGOXpkR1Z3T3lBaEtGOXBkR1Z5WVhSdmNrNXZjbTFoYkVOdmJYQnNaWFJwYjI0Z1BTQW9YM04wWlhBZ1BTQmZhWFJsY21GMGIzSXVibVY0ZENncEtTNWtiMjVsS1RzZ1gybDBaWEpoZEc5eVRtOXliV0ZzUTI5dGNHeGxkR2x2YmlBOUlIUnlkV1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdWc1pXMWxiblFnUFNCZmMzUmxjQzUyWVd4MVpUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9aV3hsYldWdWRDNXViMlJsVG1GdFpTNTBiMVZ3Y0dWeVEyRnpaU2dwSUQwOUlDZEpUbEJWVkNjcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUIwZVhCbElEMGdaV3hsYldWdWRDNTBlWEJsTG5SdlZYQndaWEpEWVhObEtDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pTQTlQU0FuUlUxQlNVd25LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0YwWlhOMFNXNXdkWFJGYldGcGJDaGxiR1Z0Wlc1MEtTa2dkbUZzYVdSaGRHVmtJRDBnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pTQTlQU0FuVlZKTUp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hkR1Z6ZEVsdWNIVjBWVkpNS0dWc1pXMWxiblFwS1NCMllXeHBaR0YwWldRZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBlWEJsSUQwOUlDZFVSVmhVSnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaGRHVnpkRWx1Y0hWMFZHVjRkQ2hsYkdWdFpXNTBLU2tnZG1Gc2FXUmhkR1ZrSUQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RIbHdaU0E5UFNBblEwaEZRMHRDVDFnbktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRjBaWE4wU1c1d2RYUkRhR1ZqYTJKdmVDaGxiR1Z0Wlc1MEtTa2dkbUZzYVdSaGRHVmtJRDBnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pTQTlQU0FuVWtGRVNVOG5LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0YwWlhOMFNXNXdkWFJEYUdWamEySnZlQ2hsYkdWdFpXNTBLU2tnZG1Gc2FXUmhkR1ZrSUQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RIbHdaU0E5UFNBblJFRlVSU2NwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVhSbGMzUkpibkIxZEVSaGRHVW9aV3hsYldWdWRDa3BJSFpoYkdsa1lYUmxaQ0E5SUdaaGJITmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNobGJHVnRaVzUwTG01dlpHVk9ZVzFsTG5SdlZYQndaWEpEWVhObEtDa2dQVDBnSjFSRldGUkJVa1ZCSnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0YwWlhOMFNXNXdkWFJVWlhoMEtHVnNaVzFsYm5RcEtTQjJZV3hwWkdGMFpXUWdQU0JtWVd4elpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWld4bGJXVnVkQzV1YjJSbFRtRnRaUzUwYjFWd2NHVnlRMkZ6WlNncElEMDlJQ2RUUlV4RlExUW5LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lYUmxjM1JKYm5CMWRGTmxiR1ZqZENobGJHVnRaVzUwS1NrZ2RtRnNhV1JoZEdWa0lEMGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlJR05oZEdOb0lDaGxjbklwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZlpHbGtTWFJsY21GMGIzSkZjbkp2Y2lBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWDJsMFpYSmhkRzl5UlhKeWIzSWdQU0JsY25JN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5SUdacGJtRnNiSGtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hYMmwwWlhKaGRHOXlUbTl5YldGc1EyOXRjR3hsZEdsdmJpQW1KaUJmYVhSbGNtRjBiM0l1Y21WMGRYSnVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JmYVhSbGNtRjBiM0l1Y21WMGRYSnVLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1pwYm1Gc2JIa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9YMlJwWkVsMFpYSmhkRzl5UlhKeWIzSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvY205M0lGOXBkR1Z5WVhSdmNrVnljbTl5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklHbG1JQ2gyWVd4cFpHRjBaV1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUNBZ0lDQjBhR2x6TG5OMVltMXBkQ2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJQ0FnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QjlYRzRnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJSDA3WEc1Y2JpQWdJQ0IyWVhJZ2FXNXBkQ0E5SUdaMWJtTjBhVzl1SUdsdWFYUW9YMjl3ZEdsdmJuTXBJSHRjYmlBZ0lDQWdJQ0FnTHk5a2J5QnVZWE42WldkdklHMXZaSFZzZFNCaVpXUjZhV1Z0ZVNCd2NucGxhMkY2ZVhkaFl5QnZjR05xWlZ4dUlDQWdJQ0FnSUNCdmNIUnBiMjV6SUQwZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWm05eWJUb2dYMjl3ZEdsdmJuTXVabTl5YlNCOGZDQnVkV3hzTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdZMnhoYzNORmNuSnZjam9nWDI5d2RHbHZibk11WTJ4aGMzTkZjbkp2Y2lCOGZDQW5aWEp5YjNJblhHNGdJQ0FnSUNBZ0lIMDdYRzRnSUNBZ0lDQWdJR2xtSUNodmNIUnBiMjV6TG1admNtMGdQVDA5SUc1MWJHd2dmSHdnYjNCMGFXOXVjeTVtYjNKdElEMDlQU0IxYm1SbFptbHVaV1FnZkh3Z2IzQjBhVzl1Y3k1bWIzSnRMbXhsYm1kMGFDQTlQU0F3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbmRoY200b0ozWmhiR2xrWVhSbFJtOXliVG9neGJsc1pTQndjbnBsYTJGNllXNTVJR1p2Y20xMWJHRnllaWNwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdMeTkxYzNSaGQybGhiWGtnWkd4aElHWnZjbTBnYm05MllXeHBaR0YwWlNBdElHUjZhV1ZyYVNCMFpXMTFJRzVwWlNCaVpXUjZhV1VnWkc5dGVYTnNibmxqYUNCa2VXMXJiM2NnZDJGc2FXUmhZMnBwSUdSc1lTQndiMndnY21WeGRXbHlaV1JjYmlBZ0lDQWdJQ0FnYjNCMGFXOXVjeTVtYjNKdExuTmxkRUYwZEhKcFluVjBaU2duYm05MllXeHBaR0YwWlNjc0lDZHViM1poYkdsa1lYUmxKeWs3WEc1Y2JpQWdJQ0FnSUNBZ2NISmxjR0Z5WlVWc1pXMWxiblJ6S0NrN1hHNGdJQ0FnSUNBZ0lHWnZjbTFUZFdKdGFYUW9LVHRjYmlBZ0lDQjlPMXh1WEc0Z0lDQWdjbVYwZFhKdUlIdGNiaUFnSUNBZ0lDQWdhVzVwZERvZ2FXNXBkRnh1SUNBZ0lIMDdYRzU5S0NrN1hHNTlLUzVqWVd4c0tIUm9hWE1zY21WeGRXbHlaU2hjSW1VdlZTczVOMXdpS1N4MGVYQmxiMllnYzJWc1ppQWhQVDBnWENKMWJtUmxabWx1WldSY0lpQS9JSE5sYkdZZ09pQjBlWEJsYjJZZ2QybHVaRzkzSUNFOVBTQmNJblZ1WkdWbWFXNWxaRndpSUQ4Z2QybHVaRzkzSURvZ2UzMHNjbVZ4ZFdseVpTaGNJbUoxWm1abGNsd2lLUzVDZFdabVpYSXNZWEpuZFcxbGJuUnpXek5kTEdGeVozVnRaVzUwYzFzMFhTeGhjbWQxYldWdWRITmJOVjBzWVhKbmRXMWxiblJ6V3paZExGd2lMMlpoYTJWZllXRXlNV0UxWXpVdWFuTmNJaXhjSWk5Y0lpa2lYWDA9XG4iXX0=
